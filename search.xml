<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Android Studio自定义模板</title>
    <url>/2017/12/07/Android%20Studio%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在Android Studio如果我们需要新建一个Activity一般都会new一个Empty Activity。然而新建出来的结果往往还不是我们需要的，还需要进行一些修改。比如说Activity默认是继承AppCompatActivity而一般我都习惯写一个统一的父类来继承，并且在Activity中做一些初始化的操作，如果使用MVP模式还需要新建一个Presenter类。对于这些需求我一直都是在创建完后再进行修改和新建，直到我我看到了Android Studio的自定义模板。</p>
<a id="more"></a>
<hr>
<h3 id="目录文件"><a href="#目录文件" class="headerlink" title="目录文件"></a>目录文件</h3><p>首先我们找到AS默认模板的存放路径<br>AS3.0\android-studio\plugins\android\lib\templates<br>其中我们平时常用的模板就放在activity和other这两个文件夹下。<br>先以最简单的EmptyActivity为例，他的结构目录是</p>
<ul>
<li>root<ul>
<li>SimpleActivity.java.ftl</li>
<li>SimpleActivity.kt.ftl</li>
</ul>
</li>
<li>globals.xml.ftl</li>
<li>recipe.xml.ftl</li>
<li>template.xml</li>
<li>templat_black_activity.png</li>
</ul>
<p>其中root目录下是模板ftl文件<br>globals.xml.ftl是全局参数配置文件<br>recipe.xml.ftl是控制文件创建和修改<br>template.xml和templat_black_activity.png是创建时的UI界面控制</p>
<hr>
<h3 id="template-xml"><a href="#template-xml" class="headerlink" title="template.xml"></a>template.xml</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template</span><br><span class="line">    format=&quot;5&quot;</span><br><span class="line">    revision=&quot;5&quot;</span><br><span class="line">    name=&quot;TheMVP Activity&quot;</span><br><span class="line">    minApi=&quot;9&quot;</span><br><span class="line">    minBuildApi=&quot;14&quot;</span><br><span class="line">    description=&quot;Creates a new empty activity with TheMVP&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;category value=&quot;Activity&quot; /&gt;</span><br><span class="line">    &lt;formfactor value=&quot;Mobile&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;parameter</span><br><span class="line">        id=&quot;activityClass&quot;</span><br><span class="line">        name=&quot;Activity Name&quot;</span><br><span class="line">        type=&quot;string&quot;</span><br><span class="line">        constraints=&quot;class|unique|nonempty&quot;</span><br><span class="line">        suggest=&quot;$&#123;layoutToActivity(layoutName)&#125;&quot;</span><br><span class="line">        default=&quot;MainActivity&quot;</span><br><span class="line">        help=&quot;The name of the activity class to create&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;parameter</span><br><span class="line">        id=&quot;delegateClass&quot;</span><br><span class="line">        name=&quot;Delegate Name&quot;</span><br><span class="line">        type=&quot;string&quot;</span><br><span class="line">        constraints=&quot;class|unique|nonempty&quot;</span><br><span class="line">        default=&quot;MainDelegate&quot;</span><br><span class="line">        visibility=&quot;isCreateDelegate&quot;</span><br><span class="line">        help=&quot;The name of the delegate class to create&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;parameter</span><br><span class="line">        id=&quot;layoutName&quot;</span><br><span class="line">        name=&quot;Layout Name&quot;</span><br><span class="line">        type=&quot;string&quot;</span><br><span class="line">        constraints=&quot;layout|unique|nonempty&quot;</span><br><span class="line">        suggest=&quot;$&#123;activityToLayout(activityClass)&#125;&quot;</span><br><span class="line">        default=&quot;activity_main&quot;</span><br><span class="line">        visibility=&quot;isCreateDelegate&quot;</span><br><span class="line">        help=&quot;The name of the layout to create for the activity&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;parameter</span><br><span class="line">        id=&quot;linkedDelegate&quot;</span><br><span class="line">        name=&quot;Linked Delegate&quot;</span><br><span class="line">        type=&quot;string&quot;</span><br><span class="line">        constraints=&quot;nonempty&quot;</span><br><span class="line">        default=&quot;AppDelegate&quot;</span><br><span class="line">        visibility=&quot;!isCreateDelegate&quot;</span><br><span class="line">        help=&quot;Chose exists delegate&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;parameter</span><br><span class="line">        id=&quot;isCreateDelegate&quot;</span><br><span class="line">        name=&quot;Create Delegate&quot;</span><br><span class="line">        type=&quot;boolean&quot;</span><br><span class="line">        default=&quot;true&quot;</span><br><span class="line">        help=&quot;If false, this delegate and layout will not be created&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;parameter</span><br><span class="line">        id=&quot;packageName&quot;</span><br><span class="line">        name=&quot;Package name&quot;</span><br><span class="line">        type=&quot;string&quot;</span><br><span class="line">        constraints=&quot;package&quot;</span><br><span class="line">        default=&quot;com.mycompany.myapp&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 128x128 thumbnails relative to template.xml --&gt;</span><br><span class="line">    &lt;thumbs&gt;</span><br><span class="line">        &lt;!-- default thumbnail is required --&gt;</span><br><span class="line">        &lt;thumb&gt;template_blank_activity.png&lt;/thumb&gt;</span><br><span class="line">    &lt;/thumbs&gt;</span><br><span class="line"></span><br><span class="line">    &lt;globals file=&quot;globals.xml.ftl&quot; /&gt;</span><br><span class="line">    &lt;execute file=&quot;recipe.xml.ftl&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
<div align="center"><br><img src="https://www.sisyphuser.cn/image/blog_as_template_ui.png"><br></div>

<p>上面就是template.xml和对应的创建UI示图。</p>
<hr>
<p>template标签主要显示一些名称、描述和一些需要的版本信息，这里我写的测试模板名称为TheMVP Activity。</p>
<p>&lt; category value=”Activity” /&gt; 说明该标签放在Activity目录下，如果设置为Fragment则放在Fragment目录先下。</p>
<div align="center"><br><img src="https://www.sisyphuser.cn/image/blog_as_template_category.png"><br></div>

<hr>
<p>parameter标签就是主要的创建item的标签了</p>
<div align="center"><br><img src="https://www.sisyphuser.cn/image/blog_as_template_parameter.png"><br></div>

<hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;parameter</span><br><span class="line">	id=&quot;packageName&quot;</span><br><span class="line">	name=&quot;Package name&quot;</span><br><span class="line">	type=&quot;string&quot;</span><br><span class="line">	constraints=&quot;package&quot;</span><br><span class="line">	default=&quot;com.mycompany.myapp&quot; /&gt;</span><br></pre></td></tr></table></figure>
<p>这个是默认的选择包名的parameter</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;thumbs&gt;</span><br><span class="line">       &lt;thumb&gt;template_blank_activity.png&lt;/thumb&gt;</span><br><span class="line">   &lt;/thumbs&gt;</span><br><span class="line"></span><br><span class="line">   &lt;globals file=&quot;globals.xml.ftl&quot; /&gt;</span><br><span class="line">   &lt;execute file=&quot;recipe.xml.ftl&quot; /&gt;</span><br></pre></td></tr></table></figure>
<p>这三个是配置外部关联文件，template_blank_activity.png就显示在UI示图左边，globals.xml.ftl和recipe.xml.ftl将会在下面提到。</p>
<hr>
<h3 id="globals-xml-ftl"><a href="#globals-xml-ftl" class="headerlink" title="globals.xml.ftl"></a>globals.xml.ftl</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;globals&gt;</span><br><span class="line">&lt;#if isCreateDelegate&gt;</span><br><span class="line">    &lt;global id=&quot;superClass&quot; type=&quot;string&quot; value=&quot;ActivityPresenter&amp;lt;$&#123;delegateClass&#125;&amp;gt;&quot; /&gt;</span><br><span class="line">&lt;#else&gt;</span><br><span class="line">    &lt;global id=&quot;superClass&quot; type=&quot;string&quot; value=&quot;ActivityPresenter&amp;lt;$&#123;linkedDelegate&#125;&amp;gt;&quot; /&gt;</span><br><span class="line">&lt;/#if&gt;</span><br><span class="line">    &lt;global id=&quot;hasNoActionBar&quot; type=&quot;boolean&quot; value=&quot;false&quot; /&gt;</span><br><span class="line">    &lt;global id=&quot;parentActivityClass&quot; value=&quot;&quot; /&gt;</span><br><span class="line">    &lt;global id=&quot;simpleLayoutName&quot; value=&quot;$&#123;layoutName&#125;&quot; /&gt;</span><br><span class="line">    &lt;global id=&quot;excludeMenu&quot; type=&quot;boolean&quot; value=&quot;true&quot; /&gt;</span><br><span class="line">    &lt;global id=&quot;generateActivityTitle&quot; type=&quot;boolean&quot; value=&quot;false&quot; /&gt;</span><br><span class="line">    &lt;#include &quot;../common/common_globals.xml.ftl&quot; /&gt;</span><br><span class="line">&lt;/globals&gt;</span><br></pre></td></tr></table></figure>
<p>globals.xml.ftl中的内容比较简单，就是一些全局使用的值。这里有一个简单的逻辑标签<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;#if Boolean&gt;</span><br><span class="line">&lt;#else&gt;</span><br><span class="line">&lt;/#if&gt;</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="root"><a href="#root" class="headerlink" title="root"></a>root</h3><p>root目录下方的是一些作为模板的activity、layout、fragment文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package $&#123;packageName&#125;.activity</span><br><span class="line"></span><br><span class="line">import android.app.Activity</span><br><span class="line">import android.content.Intent</span><br><span class="line">import android.os.Bundle</span><br><span class="line">import $&#123;applicationPackage&#125;.base.ActivityPresenter</span><br><span class="line">&lt;#if isCreateDelegate&gt;</span><br><span class="line">import $&#123;packageName&#125;.delegate.$&#123;delegateClass&#125;</span><br><span class="line">&lt;#else&gt;</span><br><span class="line">import $&#123;packageName&#125;.delegate.$&#123;linkedDelegate&#125;</span><br><span class="line">&lt;/#if&gt;</span><br><span class="line"></span><br><span class="line">class $&#123;activityClass&#125; : $&#123;superClass&#125;() &#123;</span><br><span class="line">&lt;#if isCreateDelegate&gt;</span><br><span class="line">    override fun instanceDelegate(): $&#123;delegateClass&#125; &#123;</span><br><span class="line">        return $&#123;delegateClass&#125;()</span><br><span class="line">    &#125;</span><br><span class="line">&lt;#else&gt;</span><br><span class="line">	override fun instanceDelegate(): $&#123;linkedDelegate&#125; &#123;</span><br><span class="line">        return $&#123;linkedDelegate&#125;()</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/#if&gt;</span><br><span class="line"></span><br><span class="line">    companion object &#123;</span><br><span class="line">        fun start(activity: Activity) &#123;</span><br><span class="line">            val intent=Intent(activity,$&#123;activityClass&#125;::class.java)</span><br><span class="line">            start(activity,intent)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    override fun onCreate(savedInstanceState: Bundle?) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>写法也比较简单，与正常的代码一样，只是在一些位置将之前template.xml和globals.xml.ftl中输入和定义的值用${id}代替</p>
<hr>
<h3 id="recipe-xml-ftl"><a href="#recipe-xml-ftl" class="headerlink" title="recipe.xml.ftl"></a>recipe.xml.ftl</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;recipe&gt;</span><br><span class="line"></span><br><span class="line">&lt;#if generateKotlin&gt;</span><br><span class="line">    &lt;instantiate from=&quot;root/src/app_package/SimpleActivity.kt.ftl&quot;</span><br><span class="line">                   to=&quot;$&#123;escapeXmlAttribute(srcOut)&#125;/activity/$&#123;activityClass&#125;.kt&quot; /&gt;</span><br><span class="line">    &lt;open file=&quot;$&#123;escapeXmlAttribute(srcOut)&#125;/activity/$&#123;activityClass&#125;.kt&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;#if isCreateDelegate&gt;</span><br><span class="line"></span><br><span class="line">    &lt;instantiate from=&quot;root/src/app_package/SimpleDelegate.kt.ftl&quot;</span><br><span class="line">                   to=&quot;$&#123;escapeXmlAttribute(srcOut)&#125;/delegate/$&#123;delegateClass&#125;.kt&quot; /&gt;</span><br><span class="line">    &lt;open file=&quot;$&#123;escapeXmlAttribute(srcOut)&#125;/delegate/$&#123;delegateClass&#125;.kt&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;instantiate from=&quot;root/src/app_package/activity_simple.xml.ftl&quot;</span><br><span class="line">                   to=&quot;$&#123;escapeXmlAttribute(resOut)&#125;/layout/$&#123;layoutName&#125;.xml&quot; /&gt;</span><br><span class="line">    &lt;open file=&quot;$&#123;escapeXmlAttribute(resOut)&#125;/layout/$&#123;layoutName&#125;.xml&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/#if&gt;</span><br><span class="line">&lt;/#if&gt;</span><br><span class="line"></span><br><span class="line">    &lt;merge from=&quot;root/AndroidManifest.xml.ftl&quot;</span><br><span class="line">             to=&quot;$&#123;escapeXmlAttribute(manifestOut)&#125;/AndroidManifest.xml&quot; /&gt;</span><br><span class="line">&lt;/recipe&gt;</span><br></pre></td></tr></table></figure>
<p>recipe是一个管理创建的文件，主要用到的操作标签有：</p>
<ul>
<li>copy：从root文件夹复制文件到目标文件夹</li>
<li>instantiate：从root中将对应的ftl文件经处理后转为目标文件</li>
<li>open：打开目标文件</li>
<li>merge：合并文件</li>
</ul>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android Studio</tag>
        <tag>自定义模板</tag>
      </tags>
  </entry>
  <entry>
    <title>Android6.0权限管理</title>
    <url>/2018/04/10/Android6.0%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Android6.0(API 23)引入了一种新的权限模式，即运行时应用权限管理。这种模式让用户能够更好地了解和控制权限，用户可为所安装的各个应用分别授予或撤销权限。对于开发者来说意味着在使用对应权限功能时必须要先判断权限是否已经赋予了。<br><a id="more"></a></p>
<h2 id="危险权限"><a href="#危险权限" class="headerlink" title="危险权限"></a>危险权限</h2><p>对于权限的管理，并不是所有的权限都需要用户允许的，只有一部分危险权限需要许可。可以参照下图<br><img align="middle" src="https://www.sisyphuser.cn/image/%E5%8D%B1%E9%99%A9%E6%9D%83%E9%99%90.png"></p>
<h2 id="检查、请求权限"><a href="#检查、请求权限" class="headerlink" title="检查、请求权限"></a>检查、请求权限</h2><ol>
<li>在AndroidManifest中添加所需的权限</li>
<li><p>在使用危险权限功能前检查权限的状态</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">checkSelfPermission(Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED</span><br></pre></td></tr></table></figure>
</li>
<li><p>当没有权限(检查权限状态不为PackageManager.PERMISSION_GRANTED)时请求权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">requestPermissions(new String[]&#123;Manifest.permission.ACCESS_COARSE_LOCATION&#125;, 1);</span><br></pre></td></tr></table></figure>
</li>
<li><p>在用户操作回掉中处理允许和拒绝操作的逻辑</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) &#123;</span><br><span class="line">    super.onRequestPermissionsResult(requestCode, permissions, grantResults);</span><br><span class="line">    switch (requestCode) &#123;</span><br><span class="line">        case 1:</span><br><span class="line">            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">                Toast.makeText(this, &quot;允许定位权限&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                Toast.makeText(this, &quot;拒绝定位权限！！！&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>其中在第三步中requestPermissions()可以一次请求多个权限，对于那些用户已经允许和拒绝并且勾选了不再提示的权限会直接执行回掉，并不会让用户再次选择授权。所以对于那些必须要要权限才能使用的功能可以在用户拒绝之后让用户在设置中手动打开权限。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Intent intent = new Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);</span><br><span class="line">intent.setData(Uri.fromParts(&quot;package&quot;, getPackageName(), null));</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure>
<h2 id="对于特殊机型的适配"><a href="#对于特殊机型的适配" class="headerlink" title="对于特殊机型的适配"></a>对于特殊机型的适配</h2><p>由于国内很多手机厂商早在Android6.0之前就有了自己的权限管理系统，在Android6.0之后有一些还保留着原有的权限管理系统。这导致了明明用checkSelfPermission()检查有权限但还是还是无法使用权限功能。例如VIVO在所有情况下checkSelfPermission()都是返回有权限，但他在使用到有关权限操作时会自动提示用户权限许可。不过这种情况下调用并不会导致系统报错，而且第三方厂商也做了使用权限的提示。下面以小米为例判断是否在小米中打开权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">*检查是由有权限</span><br><span class="line">**/</span><br><span class="line">private static boolean checkOpsPermission(Context context, String permission) &#123;</span><br><span class="line">    if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            AppOpsManager appOpsManager = (AppOpsManager) context.getSystemService(Context.APP_OPS_SERVICE);</span><br><span class="line">            String opsName = AppOpsManager.permissionToOp(permission);</span><br><span class="line">            if (opsName == null) &#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">            int opsMode = appOpsManager.checkOpNoThrow(opsName, android.os.Process.myUid(), context.getPackageName());</span><br><span class="line">            return opsMode == AppOpsManager.MODE_ALLOWED;</span><br><span class="line">        &#125; catch (Exception ex) &#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 打开小米权限设置</span><br><span class="line"> */</span><br><span class="line">public void openPermissionSetting(Activity activity) &#123;</span><br><span class="line">    String miuiVersion = getMiuiVersion();</span><br><span class="line">    Intent intent = null;</span><br><span class="line">    if (&quot;V5&quot;.equals(miuiVersion)) &#123;</span><br><span class="line">        Uri packageURI = Uri.parse(&quot;package:&quot; + activity.getApplicationInfo().packageName);</span><br><span class="line">        intent = new Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS, packageURI);</span><br><span class="line">    &#125; else if (&quot;V6&quot;.equals(miuiVersion) || &quot;V7&quot;.equals(miuiVersion)) &#123;</span><br><span class="line">        intent = new Intent(&quot;miui.intent.action.APP_PERM_EDITOR&quot;);</span><br><span class="line">        intent.setClassName(&quot;com.miui.securitycenter&quot;, &quot;com.miui.permcenter.permissions.AppPermissionsEditorActivity&quot;);</span><br><span class="line">        intent.putExtra(&quot;extra_pkgname&quot;, activity.getPackageName());</span><br><span class="line">    &#125; else if (&quot;V8&quot;.equals(miuiVersion) || &quot;V9&quot;.equals(miuiVersion)) &#123;</span><br><span class="line">        intent = new Intent(&quot;miui.intent.action.APP_PERM_EDITOR&quot;);</span><br><span class="line">        intent.setClassName(&quot;com.miui.securitycenter&quot;, &quot;com.miui.permcenter.permissions.PermissionsEditorActivity&quot;);</span><br><span class="line">        intent.putExtra(&quot;extra_pkgname&quot;, activity.getPackageName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (null != intent)</span><br><span class="line">        activity.startActivity(intent);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 获取MIUI版本</span><br><span class="line"> */</span><br><span class="line">public String getMiuiVersion() &#123;</span><br><span class="line">    String line;</span><br><span class="line">    BufferedReader input = null;</span><br><span class="line">    try &#123;</span><br><span class="line">        Process p = Runtime.getRuntime().exec(&quot;getprop ro.miui.ui.version.name&quot;);</span><br><span class="line">        input = new BufferedReader(new InputStreamReader(p.getInputStream()), 1024);</span><br><span class="line">        line = input.readLine();</span><br><span class="line">        input.close();</span><br><span class="line">    &#125; catch (IOException ex) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        if (input != null) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                input.close();</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return line;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/lmj623565791/article/details/50709663" target="_blank" rel="noopener">Android 6.0 运行时权限处理完全解析</a><br><a href="https://developer.android.com/training/permissions/best-practices.html?hl=zh-cn#testing" target="_blank" rel="noopener">权限最佳做法</a><br><a href="https://blog.csdn.net/lupengfei1009/article/details/78140047#%E5%B0%8F%E7%B1%B3%E6%9D%83%E9%99%90%E7%89%B9%E6%AE%8A%E5%A4%84%E7%90%86" target="_blank" rel="noopener">Android 6.0动态权限及小米（MIUI）权限的特殊处理</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android基础</tag>
        <tag>权限管理</tag>
      </tags>
  </entry>
  <entry>
    <title>Dagger2使用</title>
    <url>/2017/03/16/Dagger2%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>dagger2是一个依赖注入框架，可以用于功能模块的解耦，非常适合于和MVP搭配使用，下面就来介绍一下dagger2一些使用方式</p>
<a id="more"></a>
<p><strong>导入项目库</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    classpath &apos;com.neenbedankt.gradle.plugins:android-apt:1.8&apos;</span><br><span class="line">&#125;</span><br><span class="line">apply plugin: &apos;com.neenbedankt.android-apt&apos;</span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile &apos;com.google.dagger:dagger:2.4&apos;</span><br><span class="line">    apt &apos;com.google.dagger:dagger-compiler:2.4&apos;</span><br><span class="line">    compile &apos;org.glassfish:javax.annotation:10.0-b28&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>先来看一个简单的例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line">    @Inject</span><br><span class="line">    B b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在一个Activity中我需要一个B的实例，通常情况下我们直接b=new B();这样来初始化，但是使用了Dagger2之后就只需要添加一个@Inject注解就可以了。<br>难道这样就可以了吗？<br>不不不，我们还需要做一些配置</p>
<ol>
<li>创建我们的测试类B</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class B &#123;</span><br><span class="line">    C c;</span><br><span class="line"></span><br><span class="line">    @Inject</span><br><span class="line">    public B(C c) &#123;</span><br><span class="line">        this.c = c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String geti() &#123;</span><br><span class="line">        return &quot;result&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>等等，这里只有一个构造方法，并且要传入C类，这个C类又是什么。<br>我们一步步来，可以看到在构造方法上有一个@Inject，这个注解和MainActivity中的注解名称一样但是功能是不同的。在MainActivity中放在成员变量上面，是告诉dagger2我需要一个B的实例。在B中放在构造函数上面，是告诉dagger2可以用这个构造函数来创建B的实例。<br>接下来就需要一个中间类来连接MainActivity和B，提供B的初始化条件C</p>
<ol>
<li>创建MyComponent</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> @Component(modules = MyModule.class)</span><br><span class="line">public interface MyComponent &#123;</span><br><span class="line">    void inject(MainActivity a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里用到了@Component注解，告诉dagger2需要用到哪些Module</p>
<ol>
<li>创建MyModule</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class MyModule &#123;</span><br><span class="line">    @Provides</span><br><span class="line">    public C provideB()&#123;</span><br><span class="line">        return new C();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>提供了C类的实例</p>
<ol>
<li>在MainActivity中初始化 </li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DaggerMyComponent.builder().myModule(new MyModule()).build().inject(this);</span><br></pre></td></tr></table></figure>
<p>DaggerMyComponent如果没有找到，可以build一下项目，这是一个由dagger2创建的实现了MyComponent的类</p>
<p>简单说先dagger2找到类的实例的基本步骤<br><em>1. 查找Module中是否存在创建该类的方法。</em><br><em>2. 若存在创建类方法，查看该方法是否存在参数</em><br><em>2.1 若存在参数，则按从步骤1开始依次初始化每个参数</em><br><em>2.2 若不存在参数，则直接初始化该类实例，一次依赖注入到此结束</em><br><em>3. 若不存在创建类方法，则查找Inject注解的构造函数，看构造函数是否存在参数</em><br><em>3.1 若存在参数，则从步骤1开始依次初始化每个参数</em><br><em>3.2 若不存在参数，则直接初始化该类实例，一次依赖注入到此结束</em></p>
<p><strong>Qualifier(限定符)解决依赖注入迷失</strong><br>什么是依赖迷失？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class B &#123;</span><br><span class="line">    C c;</span><br><span class="line"></span><br><span class="line">	@Inject</span><br><span class="line">    public B() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Inject</span><br><span class="line">    public B(C c) &#123;</span><br><span class="line">        this.c = c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String geti() &#123;</span><br><span class="line">        return &quot;result&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>想上面的这种写法，当一个类中有两个或两个以上的构造方法时，dagger2就不知道用哪个构造方法来创建对象，这事就依赖迷失。当出现依赖迷失时项目编译时就会报错。<br>Qualifier这时就可以发挥他的作用了，关于Qualifier有两种基本的用法</p>
<ol>
<li>使用@Named注解<br>在Module中</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Provides</span><br><span class="line">@Named(&quot;c&quot;)</span><br><span class="line">public B provideB1(C c)&#123;</span><br><span class="line">    return new B(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Provides</span><br><span class="line">@Named(&quot;qualifier&quot;)</span><br><span class="line">public B provideB2(C c)&#123;</span><br><span class="line">    return new B();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在MainActivity中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Inject</span><br><span class="line">@Named(&quot;qualifier&quot;)</span><br><span class="line">B b;</span><br></pre></td></tr></table></figure>
<ol>
<li>自定义Qualifier注解<br>创建注解</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Qualifier</span><br><span class="line">@Documented</span><br><span class="line">@Retention(RUNTIME)</span><br><span class="line">public @interface HasC &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在Module中使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Provides</span><br><span class="line">@HasC</span><br><span class="line">public B provideB1(C c)&#123;</span><br><span class="line">    return new B(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Provides</span><br><span class="line">@NoC</span><br><span class="line">public B provideB2()&#123;</span><br><span class="line">    return new B();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在MainActivity中使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Inject</span><br><span class="line">@HasC</span><br><span class="line">B b;</span><br></pre></td></tr></table></figure>
<p><strong>Component组织方式</strong></p>
<ul>
<li>依赖方式<br><img src="https://raw.githubusercontent.com/codepath/android_guides/master/images/dagger_dependency.png" alt="pic1"><br>如上图中E的创建需要依赖C,F两个条件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Singleton</span><br><span class="line">@Component(modules = CModule.class)</span><br><span class="line">public interface AppComponent &#123;</span><br><span class="line">    C c();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Module</span><br><span class="line">public class CModule &#123;</span><br><span class="line">    @Provides</span><br><span class="line">    public C getc()&#123;</span><br><span class="line">        return new C();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@UserScope</span><br><span class="line">@Component(dependencies = AppComponent.class,modules = BModule.class)</span><br><span class="line">public interface MainComponent &#123;</span><br><span class="line">    void infect(MainActivity a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Module</span><br><span class="line">public class BModule &#123;</span><br><span class="line"></span><br><span class="line">    @Provides</span><br><span class="line">    @UserScope</span><br><span class="line">    public B getb(C c)&#123;</span><br><span class="line">        return new B(c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上述案例中MainComponent中的B创建需要依赖与AppComponent中的CModule，所以在MainComponent中添加AppComponent依赖dependencies = AppComponent.class，并在AppComponent中将C暴露出来</p>
<p>初始化，一般将AppComponent的初始化放在Application中<br>build = DaggerAppComponent.builder().cModule(new CModule()).build();</p>
<p><em>MainActivity中的初始化</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DaggerMainComponent.builder()</span><br><span class="line">	.appComponent(App.build)</span><br><span class="line">	.bModule(new BModule())</span><br><span class="line">	.build()</span><br><span class="line">	.infect(this);</span><br></pre></td></tr></table></figure>
<p><em>自定义的Scope</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Scope</span><br><span class="line">@Retention(RUNTIME)</span><br><span class="line">public @interface UserScope &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>包含方式<br><img src="https://raw.githubusercontent.com/codepath/android_guides/master/images/dagger_subcomponent.png" alt="pic2"></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@UserScope</span><br><span class="line">@Subcomponent(modules = BModule.class)</span><br><span class="line">public interface MainComponent &#123;</span><br><span class="line">    void infect(MainActivity a);</span><br><span class="line">&#125;</span><br><span class="line">@Singleton</span><br><span class="line">@Component(modules = CModule.class)</span><br><span class="line">public interface AppComponent &#123;</span><br><span class="line">    MainComponent m(BModule b);</span><br><span class="line">&#125;</span><br><span class="line">DaggerAppComponent.builder()</span><br><span class="line">	.cModule(new CModule())</span><br><span class="line">	.build()</span><br><span class="line">	.m(new BModule())</span><br><span class="line">	.infect(this);</span><br></pre></td></tr></table></figure>
<ul>
<li>继承方式<br><img src="https://raw.githubusercontent.com/codepath/android_guides/master/images/subcomponent_builders.png" alt="pic2"><br>这种方式比较复杂，需要Dagger2版本在2.7及以上，我在实现过程中总是出现一些奇怪的问题，在这里我只把Dependency Injection with Dagger 2中的代码贴上，等过段时间再回来研究<br><img src="https://www.sisyphuser.cn/image/subcomponent_1.png" alt="1"><br><img src="https://www.sisyphuser.cn/image/subcomponent_2.png" alt="2"><br><img src="https://www.sisyphuser.cn/image/subcomponent_3.png" alt="3"></li>
</ul>
<p><strong>参考博客：</strong><br><a href="https://guides.codepath.com/android/Dependency-Injection-with-Dagger-2#proguard" target="_blank" rel="noopener">Dependency Injection with Dagger 2</a><br><a href="http://www.cnblogs.com/all88/p/5788556.html" target="_blank" rel="noopener">浅析Dagger2的使用</a><br><a href="http://www.2cto.com/kf/201604/499397.html" target="_blank" rel="noopener">关于依赖注入框架dagger2的使用和理解</a><br><a href="http://www.jianshu.com/p/cd2c1c9f68d4" target="_blank" rel="noopener">Android：dagger2让你爱不释手-基础依赖注入框架篇</a><br><a href="http://www.jianshu.com/p/1d42d2e6f4a5" target="_blank" rel="noopener">Android：dagger2让你爱不释手-重点概念讲解、融合篇</a><br><a href="http://www.jianshu.com/p/65737ac39c44" target="_blank" rel="noopener">Android：dagger2让你爱不释手-终结篇</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Dagger2</tag>
        <tag>依赖注入</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 介绍</title>
    <url>/2019/08/10/Docker/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Docker 是一个开源的应用容器引擎，可以更快地构建和部署新应用程序。Docker 容器将软件及其依赖关系整合到一个标准化的软件开发单元中，包括运行所需的一切：代码，运行时，系统工具和库。这可以保证应用程序始终运行相同，并使协作变得像共享容器映像一样简单。<br><img src="https://i.loli.net/2019/08/11/SuzLnUWgBemYjrf.png" alt="docker"><br><a id="more"></a></p>
<h2 id="Docker-的优势"><a href="#Docker-的优势" class="headerlink" title="Docker 的优势"></a>Docker 的优势</h2><p>对于开发人员来说 Docker 的优势主要是下面这几点：</p>
<ol>
<li>加载更快，不需要再浪费时间设置开发环境，启动新的实例即可运行代码。</li>
<li>通过将配置依赖打包到一个镜像中，可以消除工作环境不一致所带来的一系列 BUG。</li>
<li>灵活迁移开发应用程序。</li>
<li>减轻对应用程序安全性的担忧。</li>
</ol>
<h2 id="如何安装"><a href="#如何安装" class="headerlink" title="如何安装"></a>如何安装</h2><p>关于安装这里主要介绍一个离线安装的方法。</p>
<ol>
<li>下载一个对应的安装包。(<a href="https://download.docker.com/linux/static/stable/" target="_blank" rel="noopener">地址</a>)</li>
<li>解压 <code>tar xzvf /path/to/&lt;FILE&gt;.tar.gz</code></li>
<li>复制文件到可执行目录 <code>sudo cp docker/* /usr/bin/</code></li>
<li>启动 Docker 守护进程 <code>sudo dockerd &amp;</code></li>
<li>查看 Docker 是否安装成功 <code>sudo docker info</code></li>
</ol>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p><strong>一些常用的 Docker 命令记录</strong></p>
<table>
<thead>
<tr>
<th>功能</th>
<th>命令</th>
</tr>
</thead>
<tbody>
<tr>
<td>查看已安装的镜像</td>
<td><code>docker images</code></td>
</tr>
<tr>
<td>下载镜像</td>
<td><code>docker pull &lt;name&gt;:&lt;tag&gt;</code></td>
</tr>
<tr>
<td>删除镜像</td>
<td><code>docker rmi &lt;image_id&gt;</code></td>
</tr>
<tr>
<td>运行镜像</td>
<td><code>docker run &lt;image&gt;</code></td>
</tr>
<tr>
<td>停止容器</td>
<td><code>docker stop &lt;container&gt;</code></td>
</tr>
<tr>
<td>查看容器</td>
<td><code>docker ps</code></td>
</tr>
<tr>
<td>删除容器</td>
<td><code>docker rm &lt;container&gt;</code></td>
</tr>
<tr>
<td>删除全部已停止容器</td>
<td><code>docker container prune</code></td>
</tr>
<tr>
<td>将容器保存为镜像</td>
<td><code>docker commit &lt;container_id&gt; &lt;image&gt;:&lt;tag&gt;</code></td>
</tr>
<tr>
<td>镜像重命名</td>
<td><code>docker tag &lt;image_id&gt; &lt;new_name&gt;:&lt;tag&gt;</code></td>
</tr>
<tr>
<td>镜像导出</td>
<td><code>docker save -o &lt;file&gt; &lt;image&gt;:&lt;tag&gt;</code></td>
</tr>
<tr>
<td>镜像导入</td>
<td><code>docker load -i &lt;file&gt;</code></td>
</tr>
<tr>
<td>查看容器日志</td>
<td><code>docker logs &lt;container&gt;</code></td>
</tr>
<tr>
<td>进入运行中容器</td>
<td><code>docker exec -it &lt;container&gt; /bin/bash</code></td>
</tr>
</tbody>
</table>
<p><strong>一些 run 常用命令</strong></p>
<table>
<thead>
<tr>
<th>选项</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-d</td>
<td>容器后台运行，并返回ID</td>
</tr>
<tr>
<td>-i</td>
<td>以交互模式启动容器，常与 -t 同时使用</td>
</tr>
<tr>
<td>-t</td>
<td>给容器分配一个伪输入终端，常与 -i 同时使用</td>
</tr>
<tr>
<td>–name “name”</td>
<td>为容器指定一个别名</td>
</tr>
<tr>
<td>-e docker_host=127.0.0.1</td>
<td>设定环境变量</td>
</tr>
<tr>
<td>-m</td>
<td>设置容器使用内存最大值</td>
</tr>
<tr>
<td>-p [宿主端口]:[容器端口]</td>
<td>绑定端口映射</td>
</tr>
<tr>
<td>-v [宿主路径]:[容器路径]</td>
<td>挂载路径</td>
</tr>
<tr>
<td>-w [容器路径]</td>
<td>工作目录</td>
</tr>
<tr>
<td>–cpuset=”0-2” or –cpuset=”0,1,2”</td>
<td>绑定到指定cpu运行</td>
</tr>
<tr>
<td>–volumes-from [其他容器名]</td>
<td>将其他容器的数据卷添加到此容器</td>
</tr>
<tr>
<td>–link [其他容器名]:[在该容器中的别名]</td>
<td>添加链接到另一个容器</td>
</tr>
</tbody>
</table>
<h2 id="Dockerfile-的使用"><a href="#Dockerfile-的使用" class="headerlink" title="Dockerfile 的使用"></a>Dockerfile 的使用</h2><p>想要从一个基础镜像开始构建自定义镜像，可以一步步进行构建，也可以写一个配置文件快速构建。这个配置文件就是 Dockerfile。<br>一个简单的 Dockerfile<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FROM centos:7</span><br><span class="line"></span><br><span class="line">RUN yum install -y wget</span><br><span class="line"></span><br><span class="line">RUN cd /</span><br><span class="line"></span><br><span class="line">ADD jdk-8u152-linux-x64.tar.gz /</span><br><span class="line"></span><br><span class="line">RUN wget http://apache.stu.edu.tw/tomcat/tomcat-7/v7.0.82/bin/apache-tomcat-7.0.82.tar.gz</span><br><span class="line">RUN tar zxvf apache-tomcat-7.0.82.tar.gz</span><br><span class="line"></span><br><span class="line">ENV JAVA_HOME=/jdk1.8.0_152</span><br><span class="line">ENV PATH=$PATH:/jdk1.8.0_152/bin</span><br><span class="line">CMD ["/apache-tomcat-7.0.82/bin/catalina.sh", "run"]</span><br></pre></td></tr></table></figure></p>
<p>各个参数说明</p>
<ol>
<li>FROM<br> <code>FROM &lt;image&gt;:&lt;tag&gt;</code><br> 第一条必须为 <code>FROM</code> 指令，表示引用自哪个镜像</li>
<li>RUN<br> <code>RUN &lt;command&gt;</code><br> 在 shell 终端中运行命令</li>
<li>CMD<br> <code>CDM [&quot;para1&quot;,&quot;para2&quot;]</code><br> 指定容器的启动命令</li>
<li>EXPOSE<br> <code>EXPOSE &lt;port&gt; [&lt;port&gt;...]</code><br> 告诉 Docker 服务端容器暴露的端口号，供互联系统使用。在启动容器时需要通过 -P，Docker 主机会自动分配一个端口转发到指定的端口。</li>
<li>ENV<br> <code>ENV &lt;key&gt; &lt;value&gt;</code><br> 指定一个环境变量，并会在容器运行时保存</li>
<li>ADD<br> <code>ADD &lt;src&gt; &lt;dest&gt;</code><br> 复制指定的 <code>&lt;src&gt;</code> 到容器中的 <code>&lt;dest&gt;</code>。 其中 <code>&lt;src&gt;</code> 可以是Dockerfile所在目录的一个相对路径；也可以是一个 URL；还可以是一个 tar 文件（自动解压为目录）。</li>
<li>COPY<br> <code>COPY &lt;src&gt; &lt;dest&gt;</code><br> 复制指定的 <code>&lt;src&gt;</code> 到容器中的 <code>&lt;dest&gt;</code>。</li>
<li>VOLUME<br> <code>VOLUME [&quot;/data&quot;]</code><br> 创建一个可以从本地主机或其他容器挂载的挂载点，一般用来存放数据库和需要保持的数据等。</li>
<li>WORKDIR<br> <code>WORKDIR &lt;patj&gt;</code><br> 为后续的命令指定工作目录</li>
</ol>
<p>根据 Dockerfile 构建镜像命令<br><code>docker build -t &lt;name&gt;</code></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.docker.com/get-started" target="_blank" rel="noopener">Docker</a><br><a href="https://docs.docker.com/install/linux/docker-ce/binaries/" target="_blank" rel="noopener">Docker install</a><br><a href="https://www.jianshu.com/p/7c9e2247cfbd" target="_blank" rel="noopener">Docker 常用指令详解</a><br><a href="http://www.dockerinfo.net/dockerfile%E4%BB%8B%E7%BB%8D" target="_blank" rel="noopener">Dockerfile 介绍</a></p>
]]></content>
      <categories>
        <category>大后台</category>
      </categories>
      <tags>
        <tag>服务器</tag>
        <tag>部署</tag>
        <tag>虚拟化</tag>
      </tags>
  </entry>
  <entry>
    <title>EditText基础属性</title>
    <url>/2016/09/09/EditText%E5%9F%BA%E7%A1%80%E5%B1%9E%E6%80%A7/</url>
    <content><![CDATA[<h2 id="1-限制输入字符的长度"><a href="#1-限制输入字符的长度" class="headerlink" title="1.限制输入字符的长度"></a>1.限制输入字符的长度</h2><h3 id="1-在xml中设置"><a href="#1-在xml中设置" class="headerlink" title="(1)在xml中设置"></a>(1)在xml中设置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;EditText </span><br><span class="line">	android:maxLines=&quot;11&quot;/&gt;</span><br></pre></td></tr></table></figure>
<h3 id="2-在代码中设置"><a href="#2-在代码中设置" class="headerlink" title="(2)在代码中设置"></a>(2)在代码中设置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">editText.setFilters(new InputFilter[]&#123;new InputFilter.LengthFilter(11)&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="3-对超出的长度给出提示"><a href="#3-对超出的长度给出提示" class="headerlink" title="(3)对超出的长度给出提示"></a>(3)对超出的长度给出提示</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">editText.addTextChangedListener(new TextWatcher() &#123;</span><br><span class="line">			@Override</span><br><span class="line">			public void onTextChanged(CharSequence s, int start, int before, int count) &#123;</span><br><span class="line">				</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			@Override</span><br><span class="line">			public void beforeTextChanged(CharSequence s, int start, int count,</span><br><span class="line">					int after) &#123;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			@Override</span><br><span class="line">			public void afterTextChanged(Editable s) &#123;</span><br><span class="line">				if(s.length()&gt;11)&#123;</span><br><span class="line">					Toast.makeText(context, &quot;长度超出限制&quot;, Toast.LENGTH_LONG);</span><br><span class="line">					editText.setText(s.subSequence(0, s.length()-1));</span><br><span class="line">					editText.setSelection(editText.getText().length());   </span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="2-输入类型的限制"><a href="#2-输入类型的限制" class="headerlink" title="2.输入类型的限制"></a>2.输入类型的限制</h2><h3 id="1-限制只能输入指定类型"><a href="#1-限制只能输入指定类型" class="headerlink" title="(1)限制只能输入指定类型"></a>(1)限制只能输入指定类型</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">android:digits=&quot;0123456789xyzXYZ&quot;</span><br></pre></td></tr></table></figure>
<h3 id="2-特殊输入内容的限制"><a href="#2-特殊输入内容的限制" class="headerlink" title="(2)特殊输入内容的限制"></a>(2)特殊输入内容的限制</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">android:inputType=&quot;text&quot;</span><br></pre></td></tr></table></figure>
<p>其中intputType的属性有<br>    android:inputType=”textCapCharacters” 字母大写<br>    android:inputType=”textCapWords” 首字母大写<br>    android:inputType=”textCapSentences” 仅第一个字母大写<br>    android:inputType=”textAutoCorrect” 自动完成<br>    android:inputType=”textAutoComplete” 自动完成<br>    android:inputType=”textMultiLine” 多行输入<br>    android:inputType=”textImeMultiLine” 输入法多行（如果支持）<br>    android:inputType=”textNoSuggestions” 不提示<br>    android:inputType=”textUri” 网址<br>    android:inputType=”textEmailAddress” 电子邮件地址<br>    android:inputType=”textEmailSubject” 邮件主题<br>    android:inputType=”textShortMessage” 短讯<br>    android:inputType=”textLongMessage” 长信息<br>    android:inputType=”textPersonName” 人名<br>    android:inputType=”textPostalAddress” 地址<br>    android:inputType=”textPassword” 密码<br>    android:inputType=”textVisiblePassword” 可见密码<br>    android:inputType=”textWebEditText” 作为网页表单的文本<br>    android:inputType=”textFilter” 文本筛选过滤<br>    android:inputType=”textPhonetic” 拼音输入<br>    android:inputType=”number” 数字<br>    android:inputType=”numberSigned” 带符号数字格式<br>    android:inputType=”numberDecimal” 带小数点的浮点格式<br>    android:inputType=”phone” 拨号键盘<br>    android:inputType=”datetime” 时间日期<br>    android:inputType=”date” 日期键盘<br>    android:inputType=”time” 时间键盘</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>基础控件</tag>
        <tag>EditText</tag>
      </tags>
  </entry>
  <entry>
    <title>frp 内网穿透</title>
    <url>/2020/03/10/FRP/</url>
    <content><![CDATA[<h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>frp 是一个可用于内网穿透的高性能的反向代理应用，支持 tcp, udp 协议，为 http 和 https 应用协议提供了额外的能力，且尝试性支持了点对点穿透。项目地址 <code>https://github.com/fatedier/frp</code><br><a id="more"></a></p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>frp 分为服务端和客户端，需要对服务端和客户端分别进行配置。</p>
<h3 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h3><ul>
<li>下载<br><br>从 <code>https://github.com/fatedier/frp/releases</code> 下载对应的版本</li>
<li><p>配置参数<br><br>服务端配置文件为 <code>frps.ini</code></p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line"># 绑定到服务器的端口号</span><br><span class="line">bind_port = 7000</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./frps -c frps.ini</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h3><ul>
<li>下载 <br><br>注意要和服务端下载同一版本，否则可能会出现异常</li>
<li><p>参数配置<br><br>客户端的配置文件为 <code>frpc.ini</code></p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line"># 服务器地址、端口</span><br><span class="line">server_addr = 127.0.0.1</span><br><span class="line">server_port = 7000</span><br><span class="line"></span><br><span class="line">[ssh]</span><br><span class="line"># 本地穿透连接类型</span><br><span class="line">type = tcp</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line"># 本地穿透端口</span><br><span class="line">local_port = 22</span><br><span class="line"># 服务器绑定端口</span><br><span class="line">remote_port = 6000</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./frpc -c frpc.ini</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>服务器</tag>
        <tag>小工具</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>Git常用命令(上)</title>
    <url>/2018/03/27/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4(%E4%B8%8A)/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Git是一个优秀分布式版本控制系统，可以有效、高速的处理项目版本管理。在日常开发过程中经常会与之打交道，所以在下面记录了一些常用的Git命令。</p>
<a id="more"></a>
<h2 id="创建ssh的公钥和私钥"><a href="#创建ssh的公钥和私钥" class="headerlink" title="创建ssh的公钥和私钥"></a>创建ssh的公钥和私钥</h2><p>在git bush中输入<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;email@163.com&quot;</span><br></pre></td></tr></table></figure></p>
<p>之后会需要输入保存key个文件位置和密码，这些都可以直接回车，默认的可以位置在C://用户/user/.ssh<br>其中id_rsa.pub为公钥，id_rsa为私钥</p>
<h2 id="以GitHub为例上传公钥"><a href="#以GitHub为例上传公钥" class="headerlink" title="以GitHub为例上传公钥"></a>以GitHub为例上传公钥</h2><p><img src="https://www.sisyphuser.cn/image/github_set_ssh.png" align="middle"><br>再将公钥中的内容全部复制提交就可以了</p>
<h2 id="设置git提交时的个人信息"><a href="#设置git提交时的个人信息" class="headerlink" title="设置git提交时的个人信息"></a>设置git提交时的个人信息</h2><p>查看git基本信息配置<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config -l</span><br></pre></td></tr></table></figure></p>
<p>设置显示的用户名<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;Your Name&quot;</span><br></pre></td></tr></table></figure></p>
<p>设置显示的邮箱<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.email &quot;email@163.com&quot;</span><br></pre></td></tr></table></figure></p>
<h2 id="关联远程库"><a href="#关联远程库" class="headerlink" title="关联远程库"></a>关联远程库</h2><p>首先我们需要在GitHub上创建一个git库，这个很简单只要选择New repository然后按提示下一步就可以了。<br>现在有了一个远程库，需要将本地的文件夹与他关联起来。<br>注意在这里有两个远程库的地址 分别是”<a href="https://github.com...&quot;和&quot;git@github.com...&quot;。" target="_blank" rel="noopener">https://github.com...&quot;和&quot;git@github.com...&quot;。</a><br>这两者的区别是”<a href="https://github.com...&quot;在每次执行需要权限的操作时都需要输入用户名和密码，而&quot;git@github.com...&quot;则需要先配置好SSH这就是第二部的操作，所以我选择使用&quot;git@github.com...&quot;来关联远程库。" target="_blank" rel="noopener">https://github.com...&quot;在每次执行需要权限的操作时都需要输入用户名和密码，而&quot;git@github.com...&quot;则需要先配置好SSH这就是第二部的操作，所以我选择使用&quot;git@github.com...&quot;来关联远程库。</a><br>有两种关联的方法：</p>
<p> 1) 如果没有本地文件可以直接clone<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone git@github.com...</span><br></pre></td></tr></table></figure></p>
<p> 2) 如果有本地文件则可以在文件所在文件夹中执行<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure></p>
<p>创建本地库<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote add origin git@github.com...</span><br></pre></td></tr></table></figure></p>
<p>关联远程库</p>
<h2 id="添加一个文件"><a href="#添加一个文件" class="headerlink" title="添加一个文件"></a>添加一个文件</h2><p>需要新增或修改一个文件时需要执行两部操作：add和commit<br>add:将工作区添加一个新建或修改的文件到暂存区<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add &lt;filename&gt;</span><br></pre></td></tr></table></figure></p>
<p>添加特定的文件<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add --all</span><br><span class="line">git add -A</span><br></pre></td></tr></table></figure></p>
<p>添加所有的文件<br>commit:将暂存区的文件提交到版本库中<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git commit -m &quot;提交说明&quot;</span><br></pre></td></tr></table></figure></p>
<p>当然也可以把两部操作合并<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git commit -am &quot;提交说明&quot;</span><br></pre></td></tr></table></figure></p>
<p>但是这个只适用于添加文件修改，对于新增的文件并不能添加。</p>
<h2 id="关于-gitignore的使用"><a href="#关于-gitignore的使用" class="headerlink" title="关于.gitignore的使用"></a>关于.gitignore的使用</h2><p>.gitignore其实就是一个git的忽略文件。<br>一般的匹配规则有三种：</p>
<ol>
<li>/filename/ 忽略目标文件夹</li>
<li>*.class 忽略所有匹配的.class文件</li>
<li>Test.class 忽略精确匹配的Test.class文件</li>
</ol>
<p>当在.gitignore中声明了忽略文件后在git add –all中就会被跳过，也无法通过 git add 添加，但是可以使用 git add -f 强制添加。<br>值得注意的是当一个文件已经被添加了，在暂存区中存在时，即使在.gitignore中声明了忽略也对这个文件无效。解决的方法是使用<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git rm --cached -- &lt;filename&gt;</span><br></pre></td></tr></table></figure></p>
<p>在暂存区中移除该文件。</p>
<h2 id="工作区和暂存区"><a href="#工作区和暂存区" class="headerlink" title="工作区和暂存区"></a>工作区和暂存区</h2><p>对于工作区和暂存区简单的来说就是在add之前所有的变动操作都是在工作区，当add对文件生效后他就在暂存区了，commit提交的内容都只是暂存区的变更内容。<br>关于工作区、暂存区和版本库之间的操作：</p>
<ul>
<li>将工作区的更改保存到暂存区</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add</span><br></pre></td></tr></table></figure>
<ul>
<li>将暂存区的更改保存到版本库</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git commit</span><br></pre></td></tr></table></figure>
<ul>
<li>从暂存区中删除文件而工作区不做更改</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git rm --cached -- &lt;filename&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>将暂存区的全部/指定文件替换工作区的文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout . / git checkout -- &lt;filename&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>将版本库中全部/指定文件替换暂存区和工作区的文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout HEAD . / git checkout HEAD &lt;filename&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>将版本库中全部/指定文件替换暂存区的文件而工作区不做更改</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git reset HEAD . / git reset HEAD &lt;filename&gt;</span><br></pre></td></tr></table></figure>
<p>可以用一张图来直观地展示<br><img src="https://www.sisyphuser.cn/image/%E5%B7%A5%E4%BD%9C%E5%8C%BA_%E6%9A%82%E5%AD%98%E5%8C%BA.png" align="middle"></p>
<h2 id="一些查看Git状态的命令"><a href="#一些查看Git状态的命令" class="headerlink" title="一些查看Git状态的命令"></a>一些查看Git状态的命令</h2><ul>
<li>查看工作区修改的内容</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git diff</span><br></pre></td></tr></table></figure>
<ul>
<li><p>查看提交的日志</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看提交的日志精简</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git log --pretty=oneline</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看每一次的命令及对应改动的版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>参考：<br><a href="http://www.worldhello.net/2010/11/30/2166.html" target="_blank" rel="noopener">Git工作区、暂存区和版本库</a><br><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">廖雪峰Git教程</a></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>版本控制</tag>
      </tags>
  </entry>
  <entry>
    <title>Git常用命令(下)</title>
    <url>/2018/04/01/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4(%E4%B8%8B)/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在<a href="https://www.sisyphuser.com/2018/03/27/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4(%E4%B8%8A)" target="_blank" rel="noopener">Git常用命令（上）</a>中记录了一些添加提交文件的命令，而这篇将介绍一些关于版本回滚和分支管理的命令。</p>
<a id="more"></a>
<h2 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h2><p>当发现新提交的版本有问题或者需要查看之前版本时可以使用版本回退功能。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git reset --hard HEAD</span><br></pre></td></tr></table></figure></p>
<p>其中HEAD可以用提交时的版本号代替，可以是当前版本之前和之后的版本。<br>    这是一个危险操作，他会替换掉工作区、暂存区和本地库中的内容，工作区和暂存区的内容将无法找回，本地库中的内容可以通过<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git reset --hard &lt;版本号&gt;</span><br></pre></td></tr></table></figure></p>
<p>找回，版本号可以通过 git reflog 来查找。<br>使用 git reset –hard HEAD 回退后，在本地库中指针已经指向了对应的HEAD，需要把他同步到远程库。但是这时发现push到远程库失败， 原因是本地库比远程库的版本低（那是当然，刚才做了版本回退了啊），也不能执行pull，否则之前的操作就白费了。解决的办法是使用强制提交<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git push -f origin master</span><br></pre></td></tr></table></figure></p>
<p>除了用reset之外还可以使用revert进行回退<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git revert &lt;版本号&gt;</span><br></pre></td></tr></table></figure></p>
<p>reset与revert的区别在与reset 是把HEAD向后移动了一下，而revert是HEAD继续前进，只是新的commit的内容和要revert的内容正好相反，能够抵消要被revert的内容。</p>
<h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p>在多人协作的开发中，需要有一个规范的工作流程。关于工作流程可以参考<a href="http://www.ruanyifeng.com/blog/2015/12/git-workflow.html" target="_blank" rel="noopener">Git 工作流程</a>,下面将介绍一些关于工作流程中分支的用法。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git branch &lt;branchName&gt;</span><br></pre></td></tr></table></figure></p>
<p>创建分支<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout &lt;branchName&gt;</span><br></pre></td></tr></table></figure></p>
<p>切换分支<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout -b &lt;branchName&gt;</span><br></pre></td></tr></table></figure></p>
<p>创建并切换分支<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git branch -d &lt;branchName&gt;</span><br></pre></td></tr></table></figure></p>
<p>删除分支<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure></p>
<p>查看全部分支，在当前分支前加上*<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git merge &lt;branchName&gt;</span><br></pre></td></tr></table></figure></p>
<p>将指定分支合并到当前分支<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">it merge --no-ff -m &quot;提交信息&quot; &lt;branchName&gt;</span><br></pre></td></tr></table></figure></p>
<p>将指定分支合并到当前分支禁用 fast forward ,用这种方式提交会在当前分支生成一个合并分支的记录，方便之后的问题排查。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git rebase &lt;branchName&gt;</span><br></pre></td></tr></table></figure></p>
<p>并入分支，这个和merge执行后的结果一致，但是实现的原理不同。merge只是合并分支，合并后当前分支的历史不变，只会新增目标分支的新的提交。而rebase则是先找到分支的起点，再将目标分支对应起点之后的各版本提交，然后提交当前分支对应起点的各版本。显然这会改变当前分支的历史，将不属于该分支的版本加入到当前分支中，会增加排查问题的难度。<br>并入过程中可能会多次遇到冲突，可以在解决冲突后使用<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git rebase --continue</span><br></pre></td></tr></table></figure></p>
<p>依次解决。<br>rebase 需要遵循原则，即绝不要在公共的分支上使用它。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git log --graph --pretty=oneline --abbrev-commit</span><br></pre></td></tr></table></figure></p>
<p>查看分支合并情况    </p>
<h2 id="blame"><a href="#blame" class="headerlink" title="blame"></a>blame</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git blame &lt;fileName&gt;</span><br></pre></td></tr></table></figure>
<p>用来查询该文件的修改记录</p>
<h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><p>在每次发布版本或者新增重大功能时可以打上标签以方便以后的查询。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git tag &lt;tagName&gt;</span><br></pre></td></tr></table></figure></p>
<p>创建标签<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git tag -d &lt;tagName&gt;</span><br></pre></td></tr></table></figure></p>
<p>删除标签<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git push origin &lt;tagName&gt;</span><br></pre></td></tr></table></figure></p>
<p>将标签推送到远程库</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">廖雪峰Git教程</a><br><a href="https://my.oschina.net/fadoudou/blog/1480166" target="_blank" rel="noopener">远程仓库版本回退方法</a><br><a href="http://www.ruanyifeng.com/blog/2012/07/git.html" target="_blank" rel="noopener">Git分支管理策略</a><br><a href="https://github.com/geeeeeeeeek/git-recipes/wiki/5.1-%E4%BB%A3%E7%A0%81%E5%90%88%E5%B9%B6%EF%BC%9AMerge%E3%80%81Rebase-%E7%9A%84%E9%80%89%E6%8B%A9" target="_blank" rel="noopener">代码合并：Merge、Rebase 的选择</a></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>版本控制</tag>
      </tags>
  </entry>
  <entry>
    <title>Glide图片加载</title>
    <url>/2016/10/26/Glide%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD/</url>
    <content><![CDATA[<p>Glide是一款bumptech发布，并被Google推荐使用的图片加载库。项目地址是<a href="https://github.com/bumptech/glide" target="_blank" rel="noopener">https://github.com/bumptech/glide</a>，本文不会对Glide的内存占用和性能进行分析，只是介绍Glide的基本用法。</p>
<h2 id="导入库"><a href="#导入库" class="headerlink" title="导入库"></a>导入库</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">compile &apos;com.github.bumptech.glide:glide:3.7.0&apos;</span><br><span class="line">compile &apos;com.android.support:support-v4:19.1.0&apos;</span><br></pre></td></tr></table></figure>
<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Glide.with(context)		//关联activity或fragment的生命周期</span><br><span class="line">	.load(url)			//加载地址(url,资源id，本地图片file)</span><br><span class="line">	.placeholder(id)	//未加载时的占位图</span><br><span class="line">	.error(id)			//加载失败时的占位图</span><br><span class="line">	.into(ImageView);	//加载对象</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><p>Glide的配置是通过实现GlideModule接口来设置。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class MyGlideModule implements GlideModule &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void applyOptions(Context context, GlideBuilder builder) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void registerComponents(Context context, Glide glide) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后需要在AndroidManifest.xml中声明</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;meta-data</span><br><span class="line">    android:name=&quot;com.shangbang.store.base.MyGlideModule&quot;</span><br><span class="line">    android:value=&quot;GlideModule&quot; /&gt;</span><br></pre></td></tr></table></figure>
<p>由于Glide是通过反射将GlideModule实例化得，所以需要在混淆文件中加入<br>-keep public class * implements com.bumptech.glide.module.GlideModule</p>
<p>接下来介绍一些Glide的常用配置</p>
<ul>
<li><strong>配置图片本地缓存位置和本地缓存大小</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void applyOptions(final Context context, GlideBuilder builder) &#123;</span><br><span class="line">    builder.setDiskCache(new DiskCache.Factory() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public DiskCache build() &#123;</span><br><span class="line">         //缓存的文件夹</span><br><span class="line">            File cacheLocation = new File(context.getExternalCacheDir(), &quot;glide&quot;);</span><br><span class="line">            if (!cacheLocation.exists())</span><br><span class="line">                cacheLocation.mkdirs();</span><br><span class="line">            return DiskLruCacheWrapper.get(cacheLocation, 250 * 1024 * 1024);//本地缓存的大小</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>设置解码格式</strong><br>Glide默认的采用的使RGB_565，如果你对图片的质量要求较高可以采用ARGB_8888格式，缺点是ARGB_8888的内存占用是RGB_565的两倍。此外，ARGB_8888是支持透明格式的，而RGB_565不支持。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> public void applyOptions(final Context context, GlideBuilder builder) &#123;</span><br><span class="line">    builder.setDecodeFormat(DecodeFormat.PREFER_ARGB_8888);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="特殊要求的使用"><a href="#特殊要求的使用" class="headerlink" title="特殊要求的使用"></a>特殊要求的使用</h2><ul>
<li><strong>缓存策略</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> .diskCacheStrategy(Type)	//设置缓存到本地的策略</span><br><span class="line">DiskCacheStrategy.NONE		//不会缓存到本地</span><br><span class="line">DiskCacheStrategy.SOURCE	//只缓存原图</span><br><span class="line">DiskCacheStrategy.RESULT	//只缓存最终图像（默认）</span><br><span class="line">DiskCacheStrategy.ALL		//缓存所有图像</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>图片格式设置</strong><br>Glide中给了两种图片的放入格式，需要注意的是使用Glide的图片格式时就不要在ImageView中设置scaleType了，否则可能会使Glide的图片格式失效。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.centerCrop()		//自适应控件大小</span><br><span class="line">.fitCenter()		//适应图片大小</span><br></pre></td></tr></table></figure>
<p><img src="https://www.sisyphuser.cn/image/scaltype%281%29.png" alt="type"></p>
<ul>
<li><strong>加载优先级</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	.priority(TYPE)		//优先级由低到高</span><br><span class="line">Priority.LOW</span><br><span class="line">Priority.NORMAL</span><br><span class="line">Priority.HIGH</span><br><span class="line">Priority.IMMEDIATE</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>缩略图</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Glide.with(this)</span><br><span class="line">               .load(&quot;http://my.csdn.net/uploads/201205/06/1336311585_2632.gif&quot;)</span><br><span class="line">               .thumbnail(0.1f)</span><br><span class="line">               .into(iv);</span><br></pre></td></tr></table></figure>
<p>利用thumbnail(0.1f)来设置先加载0.1f的缩略图显示，然后再加载需要的图<br><strong><em>缩略图</em></strong><br><img src="https://www.sisyphuser.cn/image/thumb_1.png" alt><br><strong><em>原图</em></strong><br><img src="https://www.sisyphuser.cn/image/thumb_2.png" alt></p>
<ul>
<li><strong>自定义图片转化</strong><br>这里以制作圆形头像为例介绍.transform()的使用<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Glide.with(context)</span><br><span class="line">               .load(url)</span><br><span class="line">               .transform(new CircleTransform(context))</span><br><span class="line">               .into(imageView);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class CircleTransform extends BitmapTransformation &#123;</span><br><span class="line">    public CircleTransform(Context context) &#123;</span><br><span class="line">        super(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected Bitmap transform(BitmapPool pool, Bitmap toTransform, int outWidth, int outHeight) &#123;</span><br><span class="line">        return circleCrop(pool,toTransform);</span><br><span class="line">    &#125;</span><br><span class="line">    private  Bitmap circleCrop(BitmapPool pool, Bitmap source) &#123;</span><br><span class="line"></span><br><span class="line">        int size = Math.min(source.getWidth(), source.getHeight());</span><br><span class="line"></span><br><span class="line">        int width = (source.getWidth() - size) / 2;</span><br><span class="line">        int height = (source.getHeight() - size) / 2;</span><br><span class="line"></span><br><span class="line">        Bitmap bitmap = pool.get(size, size, Bitmap.Config.ARGB_8888);</span><br><span class="line">        if (bitmap == null) &#123;</span><br><span class="line">            bitmap = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Canvas canvas = new Canvas(bitmap);</span><br><span class="line">        Paint paint = new Paint();</span><br><span class="line">        BitmapShader shader =</span><br><span class="line">                new BitmapShader(source, BitmapShader.TileMode.CLAMP, BitmapShader.TileMode.CLAMP);</span><br><span class="line">        if (width != 0 || height != 0) &#123;</span><br><span class="line">            // source isn&apos;t square, move viewport to center</span><br><span class="line">            Matrix matrix = new Matrix();</span><br><span class="line">            matrix.setTranslate(-width, -height);</span><br><span class="line">            shader.setLocalMatrix(matrix);</span><br><span class="line">        &#125;</span><br><span class="line">        paint.setShader(shader);</span><br><span class="line">        paint.setAntiAlias(true);</span><br><span class="line"></span><br><span class="line">        float r = size / 2f;</span><br><span class="line">        canvas.drawCircle(r, r, r, paint);</span><br><span class="line"></span><br><span class="line">        return bitmap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String getId() &#123;</span><br><span class="line">        return getClass().getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://www.sisyphuser.cn/image/circle.png" alt></p>
<ul>
<li><strong>回调bitmap</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private SimpleTarget target = new SimpleTarget&lt;Bitmap&gt;( 250, 250 ) &#123; //250,250可不加，表示原图大小 </span><br><span class="line">	    @Override</span><br><span class="line">	    public void onResourceReady(Bitmap bitmap, GlideAnimation glideAnimation) &#123;</span><br><span class="line">	        imageView2.setImageBitmap( bitmap );</span><br><span class="line">	    &#125;</span><br><span class="line">	&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Glide</span><br><span class="line">	.with( context.getApplicationContext() ) // safer!</span><br><span class="line">	.load( url )</span><br><span class="line">	.asBitmap()</span><br><span class="line">	.into( target );</span><br></pre></td></tr></table></figure>
<p>利用这种方法可以直接获得bitmap，然后可以根据需要对Bitmap进行处理</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>第三方框架</tag>
        <tag>图片加载</tag>
        <tag>Glide</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTPS介绍</title>
    <url>/2018/07/20/HTTPS%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>HTTPS（全称：Hyper Text Transfer Protocol over Secure Socket Layer），是以安全为目标的HTTP通道，简单讲是HTTP的安全版。接下来我会简单介绍一下https的通讯过程。</p>
<a id="more"></a>
<hr>
<h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p>http默认使用80端口<br>https默认使用443端口<br>HTTPS 协议主要是为了保护用户隐私，防止流量劫持。<br>https其实就是一个添加了加密认证的http，应用到了非对称加密和对称加密。<br>关于非对称加密和对称加密的区别可以参考<a href="https://blog.csdn.net/shenggaofei/article/details/52333687" target="_blank" rel="noopener">这个</a>。</p>
<h3 id="握手过程"><a href="#握手过程" class="headerlink" title="握手过程"></a>握手过程</h3><p>整个握手的过程可由下图表示<br><img src="https://www.sisyphuser.cn/image/https.jpg" style="text-align: center; "></p>
<h3 id="每个步骤传递的数据"><a href="#每个步骤传递的数据" class="headerlink" title="每个步骤传递的数据"></a>每个步骤传递的数据</h3><pre><code>1.客户端发起请求，传输随机数、加密套件、支持的TLS协议版本等
2.服务端返回，随机数、选择一个支持的协议版本、加密证书
3.与CA验证证书有效性
4.客户端请求，生成随机数结合前两个随机数和约定的算法生成密钥，使用证书中的公钥加密传输生成的随机数
5.服务端，使用私钥获取加密传输中的随机数，用三个随机数和约定好的算法生成密钥，使用密钥用对称加密与客户端通讯验证
6.握手结束，使用密钥进行http加密通讯
</code></pre><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://developer.baidu.com/resources/online/doc/security/https-pratice-1.html" target="_blank" rel="noopener">大型网站的 HTTPS 实践（一）– HTTPS 协议和原理</a><br><a href="https://blog.csdn.net/hherima/article/details/52469674" target="_blank" rel="noopener">HTTPS协议详解(四)：TLS/SSL握手过程</a></p>
]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>网络通讯</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Object的clone方法</title>
    <url>/2017/03/07/Java%20Object%E7%9A%84clone%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>在Object中有clone()方法<br>protected Object clone() throws CloneNotSupportedException</p>
<p>clone()的作用是创建一个该对象的一个副本，并将对象的数据复制到该副本中</p>
<p>根据复制程度的不同，clone可以分为：<br><strong>浅拷贝</strong>：使用clone()即为浅拷贝，默认的拷贝方式是复制一个新的原对象，并赋予原对象相同的全局对象的值和引用。即原对象和复制对象的全局引用变量指向的是一个相同的对象空间。<br><strong>深拷贝</strong>：需要自己实现，即将原对象中的全局引用变量指向的对象也复制一份放入复制对象中。</p>
<a id="more"></a>
<p>这两个概念可能不太好理解，可以根据下面的案例来加深理解。</p>
<p>首先明确对Object clone的要求</p>
<ol>
<li>实现Cloneable接口，如果不实现该接口会在clone方法中抛出CloneNotSupportedException异常</li>
<li>需要重写clone方法，clone方法在Object中是protect的，不能被外部访问，需要重写并修改为public的访问权限。</li>
</ol>
<p><em>运行类</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Test&#123;</span><br><span class="line">    @Test</span><br><span class="line">    public void ttt() throws CloneNotSupportedException &#123;</span><br><span class="line">        A a=new A();</span><br><span class="line">        B b=new B();</span><br><span class="line">        a.setName(&quot;one&quot;);</span><br><span class="line">        a.setB(b);</span><br><span class="line">        b.setAge(1);</span><br><span class="line"></span><br><span class="line">        A ca= (A) a.clone();</span><br><span class="line">        a.setName(&quot;two&quot;);</span><br><span class="line">        a.getB().setAge(2);</span><br><span class="line"></span><br><span class="line">        System.out.print(&quot;a.name=&quot;+a.getName()+&quot;\n&quot;+</span><br><span class="line">        &quot;a.b.age=&quot;+a.getB().getAge()+&quot;\n&quot;+</span><br><span class="line">        &quot;ca.name=&quot;+ca.getName()+&quot;\n&quot;+</span><br><span class="line">        &quot;ca.b.age=&quot;+ca.getB().getAge());</span><br><span class="line">        //打印</span><br><span class="line">        /*</span><br><span class="line">        a.name=two</span><br><span class="line">        a.b.age=2</span><br><span class="line">        ca.name=one</span><br><span class="line">        ca.b.age=2</span><br><span class="line">        */</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class A implements Cloneable&#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private B b;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public B getB() &#123;</span><br><span class="line">        return b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setB(B b) &#123;</span><br><span class="line">        this.b = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Object clone() throws CloneNotSupportedException &#123;</span><br><span class="line">        return super.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class B implements Cloneable&#123;</span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Object clone() throws CloneNotSupportedException &#123;</span><br><span class="line">        return super.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的案例即为浅拷贝，可以看到ca为a的拷贝对象，但是两个对象的b指向的是同一个B的对象。</p>
<p>进行深拷贝：<br>需要修改A中的clone方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">public Object clone() throws CloneNotSupportedException &#123;</span><br><span class="line">    A o=null;</span><br><span class="line">    o=(A)super.clone();</span><br><span class="line">    if(o.b!=null)&#123;</span><br><span class="line">        o.b=(B)o.b.clone();</span><br><span class="line">    &#125;</span><br><span class="line">    return o;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在test中的打印结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a.name=two</span><br><span class="line">a.b.age=2</span><br><span class="line">ca.name=one</span><br><span class="line">ca.b.age=1</span><br></pre></td></tr></table></figure>
<p>另一种利用序列化来实现对象的深拷贝<br>需要序列化，首先要让A和B都实现Serializable接口<br>在A中添加深拷贝方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public Object deepClone() throws IOException, ClassNotFoundException &#123;</span><br><span class="line">    ByteArrayOutputStream  bo=new ByteArrayOutputStream();</span><br><span class="line">    ObjectOutputStream oo=new ObjectOutputStream(bo);</span><br><span class="line">    oo.writeObject(this);</span><br><span class="line">    ByteArrayInputStream bi=new ByteArrayInputStream(bo.toByteArray());</span><br><span class="line">    ObjectInputStream oi=new ObjectInputStream(bi);</span><br><span class="line">    return oi.readObject();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该方法先将可序列化对象a写入流中，再将对象从流中读出来重建对象</p>
<p><strong>参考博客：</strong><br><a href="http://www.cnblogs.com/gw811/archive/2012/10/07/2712252.html" target="_blank" rel="noopener">java.lang.Object.clone()分析</a><br><a href="http://blog.csdn.net/bigconvience/article/details/25025561" target="_blank" rel="noopener">Java Object对象之clone方法</a><br><a href="http://yangyangmyself.iteye.com/blog/1050674" target="_blank" rel="noopener">Object的clone()方法、深拷贝、浅拷贝</a></p>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>Object clone</tag>
      </tags>
  </entry>
  <entry>
    <title>Java内存回收</title>
    <url>/2019/08/18/Java%E5%86%85%E5%AD%98%E5%9B%9E%E6%94%B6/</url>
    <content><![CDATA[<h2 id="Java内存区域"><a href="#Java内存区域" class="headerlink" title="Java内存区域"></a>Java内存区域</h2><h3 id="方法区、元空间"><a href="#方法区、元空间" class="headerlink" title="方法区、元空间"></a>方法区、元空间</h3><p>各个线程共享的内存区域，用于储蓄已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。<br>方法区有时也被称为永久代。在 JDK1.8 及之后取消了永久代，取而代之的是元空间。在永久代中做调优是十分困难的，且效果不明显。永久代的空间大小受制于 JVM 本身内存限制，而元空间是直接使用机器的内存，只受系统内存限制。元空间默认最大大小为无限制。<br><a id="more"></a><br>一些参数：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">-XX:PermSize=N <span class="comment">//方法区初始大小</span></span><br><span class="line">-XX:MaxPermSize=N <span class="comment">//方法区的最大大小</span></span><br><span class="line"></span><br><span class="line">-XX:MetaspaceSize=N <span class="comment">//元空间的初始大小</span></span><br><span class="line">-XX:MaxMetaspaceSize=N <span class="comment">//原空间的最大大小</span></span><br></pre></td></tr></table></figure></p>
<h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><p>堆是 Java 虚拟机所管理的内存中最大的一块，是所有线程所共享的，此内存区域的唯一目的就是存放对象实例。堆是垃圾收集器管理的主要区域。在 HotSpot 中，大多数情况下内存被分为新生代和老年代，默认分配比例为 1:2。在新生代中又被分为一个 Eden 和两个 Survivor ，分配比例为 8:1:1。新生代中对象的年龄在经历一次 Minor GC 后年龄会+1，当年龄达到15（默认值）后会进入老年代。<br>一些参数：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">-XX:InitialHeapSize=N <span class="comment">//堆初始大小</span></span><br><span class="line">-Xms1024m <span class="comment">//简写值</span></span><br><span class="line">-XX:MaxHeapSize=N <span class="comment">//堆的最大值</span></span><br><span class="line">-Xmx1024m <span class="comment">//简写值</span></span><br><span class="line"></span><br><span class="line">-XX:MaxTenuringThreshold=<span class="number">15</span> <span class="comment">//新生代进入老年代的年龄</span></span><br></pre></td></tr></table></figure></p>
<h3 id="栈区"><a href="#栈区" class="headerlink" title="栈区"></a>栈区</h3><p>线程私有，用于存储局部变量表、操作数栈、动态链接、方法出口等信息。包含程序计数器、虚拟机栈和本地方法栈。</p>
<h2 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h2><p><strong>哪些对象需要回收？</strong></p>
<ol>
<li>引用计数算法<br>给对象一个引用计数器，每当有一个地方引用它时，计数器就加 1，当引用失效时就减 1。任何计数器为 0 的对象都是不被使用的对象。<br>缺点：难以解决循环引用问题。</li>
<li>可达性分析算法<br>通过一系列的“GC Roots”作为起点，从这些节点开始向下搜索，搜索所达到的路径称为引用链。当一个对象不在任何引用链中，则此对象是不被使用的对象。</li>
</ol>
<p><strong>什么时候回收？</strong><br>在 <em>可达性分析算法</em> 中从 GC Roots 搜索时，必须保证引用的一致性，以使对象的引用关系不再发生变化。这点就导致了 GC 必须停止所有的执行线程（Stop The World）。<br>在 HotSpot 中使用 OopMap 来记录调用信息。在代码中有 OopMap 记录的地方称为 SafePoint。当 GC 发生时，需要让所有线程先跑到 SafePoint 再执行 GC 操作。</p>
<p><strong>如何回收？</strong></p>
<ol>
<li>标记-清除算法<br>同名字一样，这个方式分为“标记”和“清除”两个阶段，首先对不被使用的对象添加一个标记，之后对所有标记到的对象进行统一回收。<br>缺点：<ul>
<li>标记和清除两个阶段的效率都不高</li>
<li>在回收之后会产生大量不连续的内存碎片，导致以后难以储存较大的对象</li>
</ul>
</li>
<li>复制算法<br>将对象分为两块，当一块对象用完了，就将还在使用的对象复制到另一块对象上去。较 <em>标记-清除算法</em> 有更高的效率<br>缺点：每次只能使用一块内存，使内存的利用率变低了。</li>
<li>标记-整理算法<br>前半部分和 <em>标记-清除算法</em> 一样，但后续将所有存活的对象移向一端，清除了内存碎片。</li>
<li>分代收集算法<br>根据对象的不同存活周期，一般把对象分为新生代和老年代，根据各个年代的特点采用不同的收集算法。<br>对于新生代，每次都有大量对象死去，故采用<em>复制算法</em>。<br>对于老年代，对象存活率高，采用 <em>标记-清除</em> 或 <em>标记-整理</em> 算法。</li>
</ol>
<h2 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h2><p>如果说收集算法是内存回收的方法论，那么垃圾收集器就是内存回收的具体实现。</p>
<ol>
<li>Serial<br>一个最基本、发展历史最悠久的收集器。采用单线程的收集方式，且在收集时必须暂停其他所有的工作线程，直到收集结束。在 Client 模式下有较好效果。</li>
<li>ParNew<br>ParNew 收集器就是 Serial 的多线程版本，能与 CMS 配合工作。</li>
<li>Parallel Scavenge<br>吞吐量优先的收集器。（吞吐量=用户代码运行时间/（用户代码运行时间+垃圾收集时间））</li>
<li>Serial Old<br>Serial 的老年代版本</li>
<li>Parallel Old<br>Parallel Scavenge 的老年代版本，JDK1.7、JDK1.8 中以 Parallel Scavenge + Parallel Old 为默认的新生代、老年代回收器。</li>
<li>CMS<br>以最短回收停顿时间为目的，对 CPU 资源敏感</li>
<li>G1<br>JDK1.9 中的默认垃圾收集器，G1 的主要关注点在于达到可控的停顿时间，在这个基础上尽可能提高吞吐量。G1 中每个块也会充当 Eden、Survivor、Old 三种角色，但是它们不是固定的，这使得内存使用更加地灵活。</li>
</ol>
<h2 id="内存分配策略"><a href="#内存分配策略" class="headerlink" title="内存分配策略"></a>内存分配策略</h2><p>在 HotSpot 中，大多数情况下内存被分为新生代和老年代，默认分配比例为 1:2。在新生代中又被分为一个 Eden 和两个 Survivor ，分配比例为 8:1:1。<br>一个新的对象一般会在新生代 Eden 区中分配。当 Eden 区没有足够空间进行分配时，将发起一次 Minor GC。<br>对于大对象(大量连续内存空间的Java对象)，会直接进入老年代。<br>长期存活的对象(默认熬过 15 次 Minor GC)，会进入老年代。<br>如果在 Survivor 中相同年龄的对象超过了 Survivor 的一般，这些对象将会直接进入老年代。</p>
<h2 id="JDK命令行"><a href="#JDK命令行" class="headerlink" title="JDK命令行"></a>JDK命令行</h2><p>一些用于监视虚拟机状态和故障处理的命令</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>jps</td>
<td>显示系统内所有虚拟机进程</td>
</tr>
<tr>
<td>jstat</td>
<td>用于收集虚拟机各方面运行数据</td>
</tr>
<tr>
<td>jinfo</td>
<td>显示虚拟机配置信息</td>
</tr>
<tr>
<td>jmap</td>
<td>生成虚拟机内存转储快照（heapdump文件）</td>
</tr>
<tr>
<td>jhat</td>
<td>用于分析 heapdump 文件</td>
</tr>
<tr>
<td>jstack</td>
<td>显示虚拟机线程快照</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>大后台</category>
      </categories>
      <tags>
        <tag>JVM</tag>
        <tag>GC</tag>
        <tag>性能优化</tag>
      </tags>
  </entry>
  <entry>
    <title>MVP模式</title>
    <url>/2016/09/23/MVP%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>MVP是一种MVC的变形，相比MVC它大大减少了Activity的责任将主要的逻辑操作集中在Presenter层中，从而使得MVP的代码结构变得更清晰。</p>
<h2 id="MVP结构"><a href="#MVP结构" class="headerlink" title="MVP结构"></a>MVP结构</h2><p>MVP主要由Model、View、Presenter三部分构成。<br>Model:负责数据的处理，即数据的获取、存储、解析、分发、修改等操作；<br>View:即Activity和Fragment，负责页面的绘制，刷新；<br>Presenter:负责连接Model层和View层，从Model中获取数据然后控制View刷新页面，是主要逻辑操作的地方。</p>
<p>这里借用<a href="https://github.com/konmik/konmik.github.io/wiki/Introduction-to-Model-View-Presenter-on-Android" target="_blank" rel="noopener">此文</a>的一张图片来表示Model、View和Presenter三者的关系<br><img src="https://www.sisyphuser.cn/image/mvp_mvp.png" alt="mvp"></p>
<a id="more"></a>
<h2 id="MVP案例"><a href="#MVP案例" class="headerlink" title="MVP案例"></a>MVP案例</h2><p>这是一个简单的菜谱App，主要包括列表和详情，下面以列表页威力展示一下MVP的运用。</p>
<p>列表页视图:<br><img src="https://www.sisyphuser.cn/image/mvp_app.png" alt="App"></p>
<p>项目结构:<br><img src="https://www.sisyphuser.cn/image/mvp_object.png" alt="object"></p>
<p>(1)Model层<br>这里的Model主要负责从网络获取数据<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public interface ITypeListModel &#123;</span><br><span class="line">    void loadList(String url, Map&lt;String,String&gt; paraMap, TypeListListener listener);</span><br><span class="line">    void cancle();</span><br><span class="line"></span><br><span class="line">    interface TypeListListener&#123;</span><br><span class="line">        void loadSuccess(String json,Map&lt;String,String&gt; hMap);</span><br><span class="line">        void loadFail(Exception e,Map&lt;String,String&gt; hMap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class TypeListModel implements ITypeListModel &#123;</span><br><span class="line"></span><br><span class="line">    private RequestCall call;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void loadList(String url, final Map&lt;String, String&gt; paraMap, final ITypeListModel.TypeListListener listener) &#123;</span><br><span class="line">        call= OkHttpUtils.post()</span><br><span class="line">                .url(url)</span><br><span class="line">                .params(paraMap)</span><br><span class="line">                .build();</span><br><span class="line">        call.execute(new StringCallback() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onError(Call call, Exception e, int id) &#123;</span><br><span class="line">                listener.loadFail(e,paraMap);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onResponse(String response, int id) &#123;</span><br><span class="line">                listener.loadSuccess(response,paraMap);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void cancle() &#123;</span><br><span class="line">        if(call!=null)</span><br><span class="line">            call.cancel();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>(2)View层<br>View层管理点击页面上控件的状态和控件的点击事件<br>我将View和Presenter的两个接口都放在了Contract中方便管理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">interface View&#123;</span><br><span class="line"></span><br><span class="line">    void showLoading();</span><br><span class="line"></span><br><span class="line">    void hideLoading();</span><br><span class="line"></span><br><span class="line">    void showLoadFail();</span><br><span class="line"></span><br><span class="line">    void hideLoadFail();</span><br><span class="line"></span><br><span class="line">    void showContent();</span><br><span class="line"></span><br><span class="line">    void hideContent();</span><br><span class="line"></span><br><span class="line">    void toastMessage(String message);</span><br><span class="line"></span><br><span class="line">    void setContentData(List&lt;FoodTypeGroup&gt; list);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class FoodTypeActivity extends AppCompatActivity implements FoodTypeContract.View, View.OnClickListener, ExpandableListView.OnChildClickListener &#123;</span><br><span class="line"></span><br><span class="line">    @Bind(R.id.tv_head_back)</span><br><span class="line">    View tvBack;</span><br><span class="line">    @Bind(R.id.tv_head_title)</span><br><span class="line">    TextView tvTitle;</span><br><span class="line">    @Bind(R.id.elv_content)</span><br><span class="line">    ExpandableListView elvContent;</span><br><span class="line">    @Bind(R.id.progressBar)</span><br><span class="line">    View progressBar;</span><br><span class="line">    @Bind(R.id.tv_fail)</span><br><span class="line">    View tvFail;</span><br><span class="line"></span><br><span class="line">    private FoodTypeAdapter adapter;</span><br><span class="line">    private List&lt;FoodTypeGroup&gt; adapterList;</span><br><span class="line">    private FoodTypeContract.Presenter foodTypePresenter;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_food_type);</span><br><span class="line">        ButterKnife.bind(this);</span><br><span class="line">        foodTypePresenter=new FoodTypePresenter(this);</span><br><span class="line">        initView();</span><br><span class="line">        initAdapter();</span><br><span class="line">        foodTypePresenter.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onDestroy() &#123;</span><br><span class="line">        super.onDestroy();</span><br><span class="line">        foodTypePresenter.onDestroy();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void initView() &#123;</span><br><span class="line">        tvBack.setVisibility(View.GONE);</span><br><span class="line">        tvTitle.setText(&quot;菜品分类&quot;);</span><br><span class="line">        tvFail.setOnClickListener(this);</span><br><span class="line">        elvContent.setOnChildClickListener(this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void initAdapter()&#123;</span><br><span class="line">        adapterList=new ArrayList&lt;&gt;();</span><br><span class="line">        adapter=new FoodTypeAdapter(this,adapterList);</span><br><span class="line">        elvContent.setAdapter(adapter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onClick(View view) &#123;</span><br><span class="line">        switch (view.getId())&#123;</span><br><span class="line">            case R.id.tv_fail://重新加载</span><br><span class="line">                foodTypePresenter.start();</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean onChildClick(ExpandableListView expandableListView, View view, int i, int i1, long l) &#123;</span><br><span class="line">        Intent intent=new Intent(this,TypeListActivity.class);</span><br><span class="line">        intent.putExtra(&quot;id&quot;,adapterList.get(i).getList().get(i1).getId());</span><br><span class="line">        intent.putExtra(&quot;type&quot;,adapterList.get(i).getList().get(i1).getName());</span><br><span class="line">        startActivity(intent);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void showLoading() &#123;</span><br><span class="line">        progressBar.setVisibility(View.VISIBLE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void hideLoading() &#123;</span><br><span class="line">        progressBar.setVisibility(View.GONE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void showLoadFail() &#123;</span><br><span class="line">        tvFail.setVisibility(View.VISIBLE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void hideLoadFail() &#123;</span><br><span class="line">        tvFail.setVisibility(View.GONE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void showContent() &#123;</span><br><span class="line">        elvContent.setVisibility(View.VISIBLE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void hideContent() &#123;</span><br><span class="line">        elvContent.setVisibility(View.GONE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void toastMessage(String message)&#123;</span><br><span class="line">        ToastUtil.showToast(this,message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void setContentData(List&lt;FoodTypeGroup&gt; list) &#123;</span><br><span class="line">        adapterList.clear();</span><br><span class="line">        adapterList.addAll(list);</span><br><span class="line">        adapter.notifyDataSetChanged();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>(3)Presenter层<br>从View中接收到获取列表请求后调用Model获取列表数据，根据列表数据的状态控制View作不同的显示</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">interface Presenter extends BasePresenter&#123;</span><br><span class="line">    @Override</span><br><span class="line">    void start();</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    void onDestroy();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class FoodTypePresenter implements FoodTypeContract.Presenter&#123;</span><br><span class="line">    private FoodTypeContract.View foodTypeView;</span><br><span class="line">    private IFoodTypeModel iFoodTypeModel;</span><br><span class="line">    public FoodTypePresenter(FoodTypeContract.View foodTypeView)&#123;</span><br><span class="line">        this.foodTypeView=foodTypeView;</span><br><span class="line">        iFoodTypeModel=new FoodTypeModel();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void start() &#123;</span><br><span class="line">        foodTypeView.hideContent();</span><br><span class="line">        foodTypeView.hideLoadFail();</span><br><span class="line">        foodTypeView.showLoading();</span><br><span class="line">        final Map&lt;String,String&gt; paraMap=new HashMap&lt;&gt;();</span><br><span class="line">        paraMap.put(&quot;key&quot;,BaseUrl.KEY);</span><br><span class="line">        iFoodTypeModel.loadList(BaseUrl.FOODTYPE, paraMap, new IFoodTypeModel.FoodTypeListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void loadSuccess(String json) &#123;</span><br><span class="line">                LoadSuccess.onSuccess(json, new LoadSuccess.LoadSuccessCallBack() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void code200(JSONObject json) throws JSONException &#123;</span><br><span class="line">                        if(foodTypeView!=null) &#123;</span><br><span class="line">                            List&lt;FoodTypeGroup&gt; list = JSON.parseArray(json.getJSONArray(&quot;result&quot;).toString(), FoodTypeGroup.class);</span><br><span class="line">                            foodTypeView.hideLoading();</span><br><span class="line">                            foodTypeView.showContent();</span><br><span class="line">                            foodTypeView.setContentData(list);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void codeOther(String errorMessage) &#123;</span><br><span class="line">                        if(foodTypeView!=null) &#123;</span><br><span class="line">                            foodTypeView.hideLoading();</span><br><span class="line">                            foodTypeView.showLoadFail();</span><br><span class="line">                            foodTypeView.toastMessage(errorMessage);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void loadFail(Exception e) &#123;</span><br><span class="line">                L.e(&quot;NET&quot;,e.getMessage());</span><br><span class="line">                if (foodTypeView!=null) &#123;</span><br><span class="line">                    foodTypeView.hideLoading();</span><br><span class="line">                    foodTypeView.showLoadFail();</span><br><span class="line">                    foodTypeView.toastMessage(&quot;网络连接异常&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onDestroy()&#123;</span><br><span class="line">        iFoodTypeModel.cancle();</span><br><span class="line">        foodTypeView=null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p><a href="https://github.com/NevLight/Fish" target="_blank" rel="noopener">https://github.com/NevLight/Fish</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>MVP</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 挂载 OneDrive 和 GoogleDrive</title>
    <url>/2020/03/12/OneDrive%E5%92%8CGoogleDrive%E6%8C%82%E8%BD%BD/</url>
    <content><![CDATA[<h2 id="引"><a href="#引" class="headerlink" title="引"></a>引</h2><p>刚刚新购了一台服务器，由于预算不足没有太好的配置，硬盘的容量也只有区区 20G。再考虑到上一次换服务器时服务器中数据迁移的种种痛苦，故考虑给服务器挂一块网盘，一来可以增大硬盘容量，二来对一些重要的数据保存在网盘中比服务器中相对安全些。<br><a id="more"></a></p>
<h2 id="安装-rclone"><a href="#安装-rclone" class="headerlink" title="安装 rclone"></a>安装 rclone</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl https://rclone.org/install.sh | sudo bash</span><br></pre></td></tr></table></figure>
<h2 id="配置-rclone"><a href="#配置-rclone" class="headerlink" title="配置 rclone"></a>配置 rclone</h2><h3 id="GoogleDrive-配置"><a href="#GoogleDrive-配置" class="headerlink" title="GoogleDrive 配置"></a>GoogleDrive 配置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~ rclone config</span><br><span class="line">2020/03/11 01:41:00 NOTICE: Config file &quot;/root/.config/rclone/rclone.conf&quot; not found - using defaults</span><br><span class="line">No remotes found - make a new one</span><br><span class="line">n) New remote</span><br><span class="line">s) Set configuration password</span><br><span class="line">q) Quit config</span><br><span class="line">n/s/q&gt; n</span><br><span class="line">name&gt; googledrive</span><br><span class="line">Type of storage to configure.</span><br><span class="line">Enter a string value. Press Enter for the default (&quot;&quot;).</span><br><span class="line">Choose a number from below, or type in your own value</span><br><span class="line"> 1 / 1Fichier</span><br><span class="line">   \ &quot;fichier&quot;</span><br><span class="line"> 2 / Alias for an existing remote</span><br><span class="line">   \ &quot;alias&quot;</span><br><span class="line"> 3 / Amazon Drive</span><br><span class="line">   \ &quot;amazon cloud drive&quot;</span><br><span class="line"> 4 / Amazon S3 Compliant Storage Provider (AWS, Alibaba, Ceph, Digital Ocean, Dreamhost, IBM COS, Minio, etc)</span><br><span class="line">   \ &quot;s3&quot;</span><br><span class="line"> 5 / Backblaze B2</span><br><span class="line">   \ &quot;b2&quot;</span><br><span class="line"> 6 / Box</span><br><span class="line">   \ &quot;box&quot;</span><br><span class="line"> 7 / Cache a remote</span><br><span class="line">   \ &quot;cache&quot;</span><br><span class="line"> 8 / Citrix Sharefile</span><br><span class="line">   \ &quot;sharefile&quot;</span><br><span class="line"> 9 / Dropbox</span><br><span class="line">   \ &quot;dropbox&quot;</span><br><span class="line">10 / Encrypt/Decrypt a remote</span><br><span class="line">   \ &quot;crypt&quot;</span><br><span class="line">11 / FTP Connection</span><br><span class="line">   \ &quot;ftp&quot;</span><br><span class="line">12 / Google Cloud Storage (this is not Google Drive)</span><br><span class="line">   \ &quot;google cloud storage&quot;</span><br><span class="line">13 / Google Drive</span><br><span class="line">   \ &quot;drive&quot;</span><br><span class="line">14 / Google Photos</span><br><span class="line">   \ &quot;google photos&quot;</span><br><span class="line">15 / Hubic</span><br><span class="line">   \ &quot;hubic&quot;</span><br><span class="line">16 / In memory object storage system.</span><br><span class="line">   \ &quot;memory&quot;</span><br><span class="line">17 / JottaCloud</span><br><span class="line">   \ &quot;jottacloud&quot;</span><br><span class="line">18 / Koofr</span><br><span class="line">   \ &quot;koofr&quot;</span><br><span class="line">19 / Local Disk</span><br><span class="line">   \ &quot;local&quot;</span><br><span class="line">20 / Mail.ru Cloud</span><br><span class="line">   \ &quot;mailru&quot;</span><br><span class="line">21 / Mega</span><br><span class="line">   \ &quot;mega&quot;</span><br><span class="line">22 / Microsoft Azure Blob Storage</span><br><span class="line">   \ &quot;azureblob&quot;</span><br><span class="line">23 / Microsoft OneDrive</span><br><span class="line">   \ &quot;onedrive&quot;</span><br><span class="line">24 / OpenDrive</span><br><span class="line">   \ &quot;opendrive&quot;</span><br><span class="line">25 / Openstack Swift (Rackspace Cloud Files, Memset Memstore, OVH)</span><br><span class="line">   \ &quot;swift&quot;</span><br><span class="line">26 / Pcloud</span><br><span class="line">   \ &quot;pcloud&quot;</span><br><span class="line">27 / Put.io</span><br><span class="line">   \ &quot;putio&quot;</span><br><span class="line">28 / QingCloud Object Storage</span><br><span class="line">   \ &quot;qingstor&quot;</span><br><span class="line">29 / SSH/SFTP Connection</span><br><span class="line">   \ &quot;sftp&quot;</span><br><span class="line">30 / Sugarsync</span><br><span class="line">   \ &quot;sugarsync&quot;</span><br><span class="line">31 / Transparently chunk/split large files</span><br><span class="line">   \ &quot;chunker&quot;</span><br><span class="line">32 / Union merges the contents of several remotes</span><br><span class="line">   \ &quot;union&quot;</span><br><span class="line">33 / Webdav</span><br><span class="line">   \ &quot;webdav&quot;</span><br><span class="line">34 / Yandex Disk</span><br><span class="line">   \ &quot;yandex&quot;</span><br><span class="line">35 / http Connection</span><br><span class="line">   \ &quot;http&quot;</span><br><span class="line">36 / premiumize.me</span><br><span class="line">   \ &quot;premiumizeme&quot;</span><br><span class="line">Storage&gt; 13</span><br><span class="line">** See help for drive backend at: https://rclone.org/drive/ **</span><br><span class="line"></span><br><span class="line">Google Application Client Id</span><br><span class="line">Setting your own is recommended.</span><br><span class="line">See https://rclone.org/drive/#making-your-own-client-id for how to create your own.</span><br><span class="line">If you leave this blank, it will use an internal key which is low performance.</span><br><span class="line">Enter a string value. Press Enter for the default (&quot;&quot;).</span><br><span class="line">client_id&gt; </span><br><span class="line">Google Application Client Secret</span><br><span class="line">Setting your own is recommended.</span><br><span class="line">Enter a string value. Press Enter for the default (&quot;&quot;).</span><br><span class="line">client_secret&gt; </span><br><span class="line">Scope that rclone should use when requesting access from drive.</span><br><span class="line">Enter a string value. Press Enter for the default (&quot;&quot;).</span><br><span class="line">Choose a number from below, or type in your own value</span><br><span class="line"> 1 / Full access all files, excluding Application Data Folder.</span><br><span class="line">   \ &quot;drive&quot;</span><br><span class="line"> 2 / Read-only access to file metadata and file contents.</span><br><span class="line">   \ &quot;drive.readonly&quot;</span><br><span class="line">   / Access to files created by rclone only.</span><br><span class="line"> 3 | These are visible in the drive website.</span><br><span class="line">   | File authorization is revoked when the user deauthorizes the app.</span><br><span class="line">   \ &quot;drive.file&quot;</span><br><span class="line">   / Allows read and write access to the Application Data folder.</span><br><span class="line"> 4 | This is not visible in the drive website.</span><br><span class="line">   \ &quot;drive.appfolder&quot;</span><br><span class="line">   / Allows read-only access to file metadata but</span><br><span class="line"> 5 | does not allow any access to read or download file content.</span><br><span class="line">   \ &quot;drive.metadata.readonly&quot;</span><br><span class="line">scope&gt; 1</span><br><span class="line">ID of the root folder</span><br><span class="line">Leave blank normally.</span><br><span class="line"></span><br><span class="line">Fill in to access &quot;Computers&quot; folders (see docs), or for rclone to use</span><br><span class="line">a non root folder as its starting point.</span><br><span class="line"></span><br><span class="line">Note that if this is blank, the first time rclone runs it will fill it</span><br><span class="line">in with the ID of the root folder.</span><br><span class="line"></span><br><span class="line">Enter a string value. Press Enter for the default (&quot;&quot;).</span><br><span class="line">root_folder_id&gt; </span><br><span class="line">Service Account Credentials JSON file path </span><br><span class="line">Leave blank normally.</span><br><span class="line">Needed only if you want use SA instead of interactive login.</span><br><span class="line">Enter a string value. Press Enter for the default (&quot;&quot;).</span><br><span class="line">service_account_file&gt; </span><br><span class="line">Edit advanced config? (y/n)</span><br><span class="line">y) Yes</span><br><span class="line">n) No (default)</span><br><span class="line">y/n&gt; n</span><br><span class="line">Remote config</span><br><span class="line">Use auto config?</span><br><span class="line"> * Say Y if not sure</span><br><span class="line"> * Say N if you are working on a remote or headless machine</span><br><span class="line">y) Yes (default)</span><br><span class="line">n) No</span><br><span class="line">y/n&gt; n</span><br><span class="line">Please go to the following link: https://accounts.google.com/o/oauth2/auth?access_type=offline&amp;client_id=202264815644.apps.googleusercontent.com&amp;redirect_uri=urn%3Aietf%3Awg%3Aoauth%3A2.0%3Aoob&amp;response_type=code&amp;scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive&amp;state=QLOvmP5J6Dg7KgqWzK3UIA</span><br><span class="line">Log in and authorize rclone for access</span><br><span class="line">Enter verification code&gt; # googledrive 验证码</span><br><span class="line">Configure this as a team drive?</span><br><span class="line">y) Yes</span><br><span class="line">n) No (default)</span><br><span class="line">y/n&gt; n</span><br><span class="line">--------------------</span><br><span class="line">[googledrive]</span><br><span class="line">type = drive</span><br><span class="line">scope = drive</span><br><span class="line">token = &#123;&#125;</span><br><span class="line">--------------------</span><br><span class="line">y) Yes this is OK (default)</span><br><span class="line">e) Edit this remote</span><br><span class="line">d) Delete this remote</span><br><span class="line">y/e/d&gt; y</span><br><span class="line">Current remotes:</span><br><span class="line"></span><br><span class="line">Name                 Type</span><br><span class="line">====                 ====</span><br><span class="line">googledrive          drive</span><br><span class="line"></span><br><span class="line">e) Edit existing remote</span><br><span class="line">n) New remote</span><br><span class="line">d) Delete remote</span><br><span class="line">r) Rename remote</span><br><span class="line">c) Copy remote</span><br><span class="line">s) Set configuration password</span><br><span class="line">q) Quit config</span><br><span class="line">e/n/d/r/c/s/q&gt; q</span><br></pre></td></tr></table></figure>
<h3 id="OneDrive-配置"><a href="#OneDrive-配置" class="headerlink" title="OneDrive 配置"></a>OneDrive 配置</h3><ul>
<li><p>在 Windows 端配置，注意 crlone 版本需要和 Linux 端一致。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Users\Administrator&gt;rclone config</span><br><span class="line">No remotes found - make a new one</span><br><span class="line">n) New remote</span><br><span class="line">s) Set configuration password</span><br><span class="line">q) Quit config</span><br><span class="line">n/s/q&gt; n</span><br><span class="line">name&gt; onedrive</span><br><span class="line">Type of storage to configure.</span><br><span class="line">Enter a string value. Press Enter for the default (&quot;&quot;).</span><br><span class="line">Choose a number from below, or type in your own value</span><br><span class="line"> 1 / 1Fichier</span><br><span class="line">   \ &quot;fichier&quot;</span><br><span class="line"> 2 / Alias for an existing remote</span><br><span class="line">   \ &quot;alias&quot;</span><br><span class="line"> 3 / Amazon Drive</span><br><span class="line">   \ &quot;amazon cloud drive&quot;</span><br><span class="line"> 4 / Amazon S3 Compliant Storage Provider (AWS, Alibaba, Ceph, Digital Ocean, Dreamhost, IBM COS, Minio, etc)</span><br><span class="line">   \ &quot;s3&quot;</span><br><span class="line"> 5 / Backblaze B2</span><br><span class="line">   \ &quot;b2&quot;</span><br><span class="line"> 6 / Box</span><br><span class="line">   \ &quot;box&quot;</span><br><span class="line"> 7 / Cache a remote</span><br><span class="line">   \ &quot;cache&quot;</span><br><span class="line"> 8 / Citrix Sharefile</span><br><span class="line">   \ &quot;sharefile&quot;</span><br><span class="line"> 9 / Dropbox</span><br><span class="line">   \ &quot;dropbox&quot;</span><br><span class="line">10 / Encrypt/Decrypt a remote</span><br><span class="line">   \ &quot;crypt&quot;</span><br><span class="line">11 / FTP Connection</span><br><span class="line">   \ &quot;ftp&quot;</span><br><span class="line">12 / Google Cloud Storage (this is not Google Drive)</span><br><span class="line">   \ &quot;google cloud storage&quot;</span><br><span class="line">13 / Google Drive</span><br><span class="line">   \ &quot;drive&quot;</span><br><span class="line">14 / Google Photos</span><br><span class="line">   \ &quot;google photos&quot;</span><br><span class="line">15 / Hubic</span><br><span class="line">   \ &quot;hubic&quot;</span><br><span class="line">16 / In memory object storage system.</span><br><span class="line">   \ &quot;memory&quot;</span><br><span class="line">17 / JottaCloud</span><br><span class="line">   \ &quot;jottacloud&quot;</span><br><span class="line">18 / Koofr</span><br><span class="line">   \ &quot;koofr&quot;</span><br><span class="line">19 / Local Disk</span><br><span class="line">   \ &quot;local&quot;</span><br><span class="line">20 / Mail.ru Cloud</span><br><span class="line">   \ &quot;mailru&quot;</span><br><span class="line">21 / Mega</span><br><span class="line">   \ &quot;mega&quot;</span><br><span class="line">22 / Microsoft Azure Blob Storage</span><br><span class="line">   \ &quot;azureblob&quot;</span><br><span class="line">23 / Microsoft OneDrive</span><br><span class="line">   \ &quot;onedrive&quot;</span><br><span class="line">24 / OpenDrive</span><br><span class="line">   \ &quot;opendrive&quot;</span><br><span class="line">25 / Openstack Swift (Rackspace Cloud Files, Memset Memstore, OVH)</span><br><span class="line">   \ &quot;swift&quot;</span><br><span class="line">26 / Pcloud</span><br><span class="line">   \ &quot;pcloud&quot;</span><br><span class="line">27 / Put.io</span><br><span class="line">   \ &quot;putio&quot;</span><br><span class="line">28 / QingCloud Object Storage</span><br><span class="line">   \ &quot;qingstor&quot;</span><br><span class="line">29 / SSH/SFTP Connection</span><br><span class="line">   \ &quot;sftp&quot;</span><br><span class="line">30 / Sugarsync</span><br><span class="line">   \ &quot;sugarsync&quot;</span><br><span class="line">31 / Transparently chunk/split large files</span><br><span class="line">   \ &quot;chunker&quot;</span><br><span class="line">32 / Union merges the contents of several remotes</span><br><span class="line">   \ &quot;union&quot;</span><br><span class="line">33 / Webdav</span><br><span class="line">   \ &quot;webdav&quot;</span><br><span class="line">34 / Yandex Disk</span><br><span class="line">   \ &quot;yandex&quot;</span><br><span class="line">35 / http Connection</span><br><span class="line">   \ &quot;http&quot;</span><br><span class="line">36 / premiumize.me</span><br><span class="line">   \ &quot;premiumizeme&quot;</span><br><span class="line">Storage&gt; 23</span><br><span class="line">** See help for onedrive backend at: https://rclone.org/onedrive/ **</span><br><span class="line"></span><br><span class="line">Microsoft App Client Id</span><br><span class="line">Leave blank normally.</span><br><span class="line">Enter a string value. Press Enter for the default (&quot;&quot;).</span><br><span class="line">client_id&gt;</span><br><span class="line">Microsoft App Client Secret</span><br><span class="line">Leave blank normally.</span><br><span class="line">Enter a string value. Press Enter for the default (&quot;&quot;).</span><br><span class="line">client_secret&gt;</span><br><span class="line">Edit advanced config? (y/n)</span><br><span class="line">y) Yes</span><br><span class="line">n) No (default)</span><br><span class="line">y/n&gt; y</span><br><span class="line">Chunk size to upload files with - must be multiple of 320k (327,680 bytes).</span><br><span class="line"></span><br><span class="line">Above this size files will be chunked - must be multiple of 320k (327,680 bytes). Note</span><br><span class="line">that the chunks will be buffered into memory.</span><br><span class="line">Enter a size with suffix k,M,G,T. Press Enter for the default (&quot;10M&quot;).</span><br><span class="line">chunk_size&gt;</span><br><span class="line">The ID of the drive to use</span><br><span class="line">Enter a string value. Press Enter for the default (&quot;&quot;).</span><br><span class="line">drive_id&gt;</span><br><span class="line">The type of the drive ( personal | business | documentLibrary )</span><br><span class="line">Enter a string value. Press Enter for the default (&quot;&quot;).</span><br><span class="line">drive_type&gt;</span><br><span class="line">Set to make OneNote files show up in directory listings.</span><br><span class="line"></span><br><span class="line">By default rclone will hide OneNote files in directory listings because</span><br><span class="line">operations like &quot;Open&quot; and &quot;Update&quot; won&apos;t work on them.  But this</span><br><span class="line">behaviour may also prevent you from deleting them.  If you want to</span><br><span class="line">delete OneNote files or otherwise want them to show up in directory</span><br><span class="line">listing, set this option.</span><br><span class="line">Enter a boolean value (true or false). Press Enter for the default (&quot;false&quot;).</span><br><span class="line">expose_onenote_files&gt;</span><br><span class="line">This sets the encoding for the backend.</span><br><span class="line"></span><br><span class="line">See: the [encoding section in the overview](/overview/#encoding) for more info.</span><br><span class="line">Enter a encoder.MultiEncoder value. Press Enter for the default (&quot;Slash,LtGt,DoubleQuote,Colon,Question,Asterisk,Pipe,Hash,Percent,BackSlash,Del,Ctl,LeftSpace,LeftTilde,RightSpace,RightPeriod,InvalidUtf8,Dot&quot;).</span><br><span class="line">encoding&gt;</span><br><span class="line">Remote config</span><br><span class="line">Use auto config?</span><br><span class="line"> * Say Y if not sure</span><br><span class="line"> * Say N if you are working on a remote or headless machine</span><br><span class="line">y) Yes (default)</span><br><span class="line">n) No</span><br><span class="line">y/n&gt; y</span><br><span class="line">If your browser doesn&apos;t open automatically go to the following link: http://127.0.0.1:53682/auth?state=1ZPaYBke7yo8Brx8bHp6Pw</span><br><span class="line">Log in and authorize rclone for access</span><br><span class="line">Waiting for code...</span><br><span class="line">Got code</span><br><span class="line">Choose a number from below, or type in an existing value</span><br><span class="line"> 1 / OneDrive Personal or Business</span><br><span class="line">   \ &quot;onedrive&quot;</span><br><span class="line"> 2 / Root Sharepoint site</span><br><span class="line">   \ &quot;sharepoint&quot;</span><br><span class="line"> 3 / Type in driveID</span><br><span class="line">   \ &quot;driveid&quot;</span><br><span class="line"> 4 / Type in SiteID</span><br><span class="line">   \ &quot;siteid&quot;</span><br><span class="line"> 5 / Search a Sharepoint site</span><br><span class="line">   \ &quot;search&quot;</span><br><span class="line">Your choice&gt; 1</span><br><span class="line">Found 1 drives, please select the one you want to use:</span><br><span class="line">0:  (personal) id=xxxx</span><br><span class="line">Chose drive to use:&gt; 0</span><br><span class="line">Found drive &apos;root&apos; of type &apos;personal&apos;, URL: https://onedrive.live.com/?cid=xxxx</span><br><span class="line">Is that okay?</span><br><span class="line">y) Yes (default)</span><br><span class="line">n) No</span><br><span class="line">y/n&gt; y</span><br><span class="line">--------------------</span><br><span class="line">[onedrive]</span><br><span class="line">type = onedrive</span><br><span class="line">token = &#123;&quot;access_token&quot;:&quot;&quot;&#125;</span><br><span class="line">drive_id = xxxxx</span><br><span class="line">drive_type = personal</span><br><span class="line">--------------------</span><br><span class="line">y) Yes this is OK (default)</span><br><span class="line">e) Edit this remote</span><br><span class="line">d) Delete this remote</span><br><span class="line">y/e/d&gt; y</span><br><span class="line">Current remotes:</span><br><span class="line"></span><br><span class="line">Name                 Type</span><br><span class="line">====                 ====</span><br><span class="line">onedrive             onedrive</span><br><span class="line"></span><br><span class="line">e) Edit existing remote</span><br><span class="line">n) New remote</span><br><span class="line">d) Delete remote</span><br><span class="line">r) Rename remote</span><br><span class="line">c) Copy remote</span><br><span class="line">s) Set configuration password</span><br><span class="line">q) Quit config</span><br><span class="line">e/n/d/r/c/s/q&gt; q</span><br></pre></td></tr></table></figure>
</li>
<li><p>Linux 端配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  ~ rclone config</span><br><span class="line">Current remotes:</span><br><span class="line"></span><br><span class="line">Name                 Type</span><br><span class="line">====                 ====</span><br><span class="line">googledrive          drive</span><br><span class="line"></span><br><span class="line">e) Edit existing remote</span><br><span class="line">n) New remote</span><br><span class="line">d) Delete remote</span><br><span class="line">r) Rename remote</span><br><span class="line">c) Copy remote</span><br><span class="line">s) Set configuration password</span><br><span class="line">q) Quit config</span><br><span class="line">e/n/d/r/c/s/q&gt; n</span><br><span class="line">name&gt; onedrive</span><br><span class="line">Type of storage to configure.</span><br><span class="line">Enter a string value. Press Enter for the default (&quot;&quot;).</span><br><span class="line">Choose a number from below, or type in your own value</span><br><span class="line"> 1 / 1Fichier</span><br><span class="line">   \ &quot;fichier&quot;</span><br><span class="line"> 2 / Alias for an existing remote</span><br><span class="line">   \ &quot;alias&quot;</span><br><span class="line"> 3 / Amazon Drive</span><br><span class="line">   \ &quot;amazon cloud drive&quot;</span><br><span class="line"> 4 / Amazon S3 Compliant Storage Provider (AWS, Alibaba, Ceph, Digital Ocean, Dreamhost, IBM COS, Minio, etc)</span><br><span class="line">   \ &quot;s3&quot;</span><br><span class="line"> 5 / Backblaze B2</span><br><span class="line">   \ &quot;b2&quot;</span><br><span class="line"> 6 / Box</span><br><span class="line">   \ &quot;box&quot;</span><br><span class="line"> 7 / Cache a remote</span><br><span class="line">   \ &quot;cache&quot;</span><br><span class="line"> 8 / Citrix Sharefile</span><br><span class="line">   \ &quot;sharefile&quot;</span><br><span class="line"> 9 / Dropbox</span><br><span class="line">   \ &quot;dropbox&quot;</span><br><span class="line">10 / Encrypt/Decrypt a remote</span><br><span class="line">   \ &quot;crypt&quot;</span><br><span class="line">11 / FTP Connection</span><br><span class="line">   \ &quot;ftp&quot;</span><br><span class="line">12 / Google Cloud Storage (this is not Google Drive)</span><br><span class="line">   \ &quot;google cloud storage&quot;</span><br><span class="line">13 / Google Drive</span><br><span class="line">   \ &quot;drive&quot;</span><br><span class="line">14 / Google Photos</span><br><span class="line">   \ &quot;google photos&quot;</span><br><span class="line">15 / Hubic</span><br><span class="line">   \ &quot;hubic&quot;</span><br><span class="line">16 / In memory object storage system.</span><br><span class="line">   \ &quot;memory&quot;</span><br><span class="line">17 / JottaCloud</span><br><span class="line">   \ &quot;jottacloud&quot;</span><br><span class="line">18 / Koofr</span><br><span class="line">   \ &quot;koofr&quot;</span><br><span class="line">19 / Local Disk</span><br><span class="line">   \ &quot;local&quot;</span><br><span class="line">20 / Mail.ru Cloud</span><br><span class="line">   \ &quot;mailru&quot;</span><br><span class="line">21 / Mega</span><br><span class="line">   \ &quot;mega&quot;</span><br><span class="line">22 / Microsoft Azure Blob Storage</span><br><span class="line">   \ &quot;azureblob&quot;</span><br><span class="line">23 / Microsoft OneDrive</span><br><span class="line">   \ &quot;onedrive&quot;</span><br><span class="line">24 / OpenDrive</span><br><span class="line">   \ &quot;opendrive&quot;</span><br><span class="line">25 / Openstack Swift (Rackspace Cloud Files, Memset Memstore, OVH)</span><br><span class="line">   \ &quot;swift&quot;</span><br><span class="line">26 / Pcloud</span><br><span class="line">   \ &quot;pcloud&quot;</span><br><span class="line">27 / Put.io</span><br><span class="line">   \ &quot;putio&quot;</span><br><span class="line">28 / QingCloud Object Storage</span><br><span class="line">   \ &quot;qingstor&quot;</span><br><span class="line">29 / SSH/SFTP Connection</span><br><span class="line">   \ &quot;sftp&quot;</span><br><span class="line">30 / Sugarsync</span><br><span class="line">   \ &quot;sugarsync&quot;</span><br><span class="line">31 / Transparently chunk/split large files</span><br><span class="line">   \ &quot;chunker&quot;</span><br><span class="line">32 / Union merges the contents of several remotes</span><br><span class="line">   \ &quot;union&quot;</span><br><span class="line">33 / Webdav</span><br><span class="line">   \ &quot;webdav&quot;</span><br><span class="line">34 / Yandex Disk</span><br><span class="line">   \ &quot;yandex&quot;</span><br><span class="line">35 / http Connection</span><br><span class="line">   \ &quot;http&quot;</span><br><span class="line">36 / premiumize.me</span><br><span class="line">   \ &quot;premiumizeme&quot;</span><br><span class="line">Storage&gt; 23</span><br><span class="line">** See help for onedrive backend at: https://rclone.org/onedrive/ **</span><br><span class="line"></span><br><span class="line">Microsoft App Client Id</span><br><span class="line">Leave blank normally.</span><br><span class="line">Enter a string value. Press Enter for the default (&quot;&quot;).</span><br><span class="line">client_id&gt; </span><br><span class="line">Microsoft App Client Secret</span><br><span class="line">Leave blank normally.</span><br><span class="line">Enter a string value. Press Enter for the default (&quot;&quot;).</span><br><span class="line">client_secret&gt; </span><br><span class="line">Edit advanced config? (y/n)</span><br><span class="line">y) Yes</span><br><span class="line">n) No (default)</span><br><span class="line">y/n&gt; n</span><br><span class="line">Remote config</span><br><span class="line">Use auto config?</span><br><span class="line"> * Say Y if not sure</span><br><span class="line"> * Say N if you are working on a remote or headless machine</span><br><span class="line">y) Yes (default)</span><br><span class="line">n) No</span><br><span class="line">y/n&gt; n</span><br><span class="line">For this to work, you will need rclone available on a machine that has a web browser available.</span><br><span class="line">Execute the following on your machine (same rclone version recommended) :</span><br><span class="line">        rclone authorize &quot;onedrive&quot;</span><br><span class="line">Then paste the result below:</span><br><span class="line">result&gt; &#123;&quot;access_token&quot;:&quot;&quot;&#125; # windows 端获取的 token</span><br><span class="line">Choose a number from below, or type in an existing value</span><br><span class="line"> 1 / OneDrive Personal or Business</span><br><span class="line">   \ &quot;onedrive&quot;</span><br><span class="line"> 2 / Root Sharepoint site</span><br><span class="line">   \ &quot;sharepoint&quot;</span><br><span class="line"> 3 / Type in driveID</span><br><span class="line">   \ &quot;driveid&quot;</span><br><span class="line"> 4 / Type in SiteID</span><br><span class="line">   \ &quot;siteid&quot;</span><br><span class="line"> 5 / Search a Sharepoint site</span><br><span class="line">   \ &quot;search&quot;</span><br><span class="line">Your choice&gt; 1</span><br><span class="line">Found 1 drives, please select the one you want to use:</span><br><span class="line">0:  (personal) id=xxx</span><br><span class="line">Chose drive to use:&gt; 0</span><br><span class="line">Found drive &apos;root&apos; of type &apos;personal&apos;, URL: https://onedrive.live.com/?cid=xxx</span><br><span class="line">Is that okay?</span><br><span class="line">y) Yes (default)</span><br><span class="line">n) No</span><br><span class="line">y/n&gt; y</span><br><span class="line">--------------------</span><br><span class="line">y) Yes this is OK (default)</span><br><span class="line">e) Edit this remote</span><br><span class="line">d) Delete this remote</span><br><span class="line">y/e/d&gt; y</span><br><span class="line">Current remotes:</span><br><span class="line"></span><br><span class="line">Name                 Type</span><br><span class="line">====                 ====</span><br><span class="line">googledrive          drive</span><br><span class="line">onedrive             onedrive</span><br><span class="line"></span><br><span class="line">e) Edit existing remote</span><br><span class="line">n) New remote</span><br><span class="line">d) Delete remote</span><br><span class="line">r) Rename remote</span><br><span class="line">c) Copy remote</span><br><span class="line">s) Set configuration password</span><br><span class="line">q) Quit config</span><br><span class="line">e/n/d/r/c/s/q&gt; q</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rclone mount googledrive: /mnt/google-drive --allow-other --allow-non-empty --vfs-cache-mode writes &amp;</span><br><span class="line"></span><br><span class="line">rclone mount onedrive: /mnt/one-drive --allow-other --allow-non-empty --vfs-cache-mode writes &amp;</span><br></pre></td></tr></table></figure>
<p>可能出现异常 <code>error: failed to mount FUSE fs: fusermount: exec: &quot;fusermount&quot;: executable file not found in $PATH</code> <br><br>需要安装 <code>yum install fuse</code></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>服务器</tag>
        <tag>网络</tag>
        <tag>网络磁盘</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis基础</title>
    <url>/2019/03/10/Redis%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Redis由key-value组成的存储系统，其中value可以是string,hash,list,set,sorted set。</p>
<a id="more"></a>
<p>下载地址: <a href="https://github.com/MicrosoftArchive/redis/releases" target="_blank" rel="noopener">Windows</a> <a href="https://redis.io/download" target="_blank" rel="noopener">Linux</a></p>
<h2 id="配置参数"><a href="#配置参数" class="headerlink" title="配置参数"></a>配置参数</h2><p>获取某一个参数 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">config get &#123;config_name&#125;</span><br></pre></td></tr></table></figure>
<p>获取全部参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">config get *</span><br></pre></td></tr></table></figure>
<p>编辑参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">config set &#123;config_name&#125; &#123;config_value&#125;</span><br></pre></td></tr></table></figure>
<p>具体参数含义可以参考<a href="http://www.runoob.com/redis/redis-conf.html" target="_blank" rel="noopener">这里</a></p>
<h2 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h2><ul>
<li>安装</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum intall redis</span><br></pre></td></tr></table></figure>
<ul>
<li>用命令启动redis</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./redis-server</span><br></pre></td></tr></table></figure>
<ul>
<li><p>后台启动redis</p>
<ol>
<li>修改/etc/redis.conf配置文件,将 daemonize no 改为 daemonize yes</li>
<li><code>./redis-server /etc/redis.conf</code>启动redis </li>
</ol>
</li>
<li><p>关闭redis</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./redis-cli shutdown</span><br></pre></td></tr></table></figure>
<ul>
<li>允许远程访问Redis服务器<ol>
<li>修改 /etc/redis.conf 配置文件, bind 0.0.0.0 </li>
<li>修改配置文件的 requirepass password , 添加密码</li>
<li>重启redis服务</li>
</ol>
</li>
</ul>
<h2 id="五种数据库类型"><a href="#五种数据库类型" class="headerlink" title="五种数据库类型"></a>五种数据库类型</h2><ul>
<li><p>字符串(string)</p>
<p>可以是字符串、整数或浮点数</p>
<ol>
<li>set: 设置存储值</li>
<li>get: 获取存储值</li>
<li>del: 删除指定的键值 </li>
</ol>
<p><img src="https://i.loli.net/2019/03/07/5c8087761ae5d.png" alt="1551926933656.png"></p>
</li>
<li><p>列表(list)</p>
<p>一个字符串的链表</p>
<ol>
<li>rpush: 右侧插入</li>
<li>lpush: 左侧插入</li>
<li>lrange: 列出指定位置区间的值</li>
<li>lindex: 查询指定位置上的值</li>
<li>rpop: 右侧弹出</li>
<li>lpop: 左侧弹出</li>
</ol>
<p><img src="https://i.loli.net/2019/03/07/5c80917684017.png" alt="1551929628124.png"></p>
</li>
<li><p>集合(set)</p>
<p>一个字符串的无序不重复的集合</p>
<ol>
<li>sadd: 添加到集合</li>
<li>smember: 查询所有元素</li>
<li>sismember: 检查指定元素是否在</li>
<li>srem: 移除指定元素 </li>
</ol>
<p><img src="https://i.loli.net/2019/03/07/5c808ff156d67.png" alt="1551929303860.png"></p>
</li>
<li><p>散列(hash)</p>
<p>包含键值对的无序散列</p>
<ol>
<li>hset: 设置键值</li>
<li>hget: 获取值</li>
<li>hgetall: 获取全部键值</li>
<li>hdel: 删除键值</li>
</ol>
<p><img src="https://i.loli.net/2019/03/07/5c8097a914db8.png" alt="1551931282840.png"></p>
</li>
<li><p>有序集合(zset)</p>
<p>有序的set</p>
<ol>
<li>zadd: 添加元素</li>
<li>zrange: 列出区间内元素</li>
<li>zrangebyscore: 列出score区间内元素</li>
<li>zrem: 移除元素</li>
</ol>
<p><img src="https://i.loli.net/2019/03/07/5c80b0666c1c8.png" alt="1551937623412.png"></p>
</li>
</ul>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://www.runoob.com/redis/redis-tutorial.html" target="_blank" rel="noopener">菜鸟教程</a></p>
<p>《Redis实战》</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>数据库</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>RxJava的简单使用</title>
    <url>/2016/09/09/RxJava%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="为什么要用RxJava"><a href="#为什么要用RxJava" class="headerlink" title="为什么要用RxJava"></a>为什么要用RxJava</h2><p>最近发现越来越多的项目开始使用RxJava，那么他到底有什么优势呢。总结来说有两点：<br>1.代码简洁、逻辑清晰，避免了处理复杂逻辑时的大量代码嵌套<br>2.线程自由控制，能够多次自由地切换线程，满足复杂异步操作的需求</p>
<h2 id="RxJava的使用"><a href="#RxJava的使用" class="headerlink" title="RxJava的使用"></a>RxJava的使用</h2><h4 id="RxJava的主要组成是两个核心类Observables-被观察者、事件源-，Subscribers-观察者-实现完核心类后用subscribe-将两着订阅起来"><a href="#RxJava的主要组成是两个核心类Observables-被观察者、事件源-，Subscribers-观察者-实现完核心类后用subscribe-将两着订阅起来" class="headerlink" title="RxJava的主要组成是两个核心类Observables(被观察者、事件源)，Subscribers(观察者),实现完核心类后用subscribe()将两着订阅起来"></a>RxJava的主要组成是两个核心类Observables(被观察者、事件源)，Subscribers(观察者),实现完核心类后用subscribe()将两着订阅起来</h4><h3 id="要使用RxJava首先引入两个依赖"><a href="#要使用RxJava首先引入两个依赖" class="headerlink" title="要使用RxJava首先引入两个依赖"></a>要使用RxJava首先引入两个依赖</h3><p>compile ‘io.reactivex:rxandroid:1.2.1’<br>compile ‘io.reactivex:rxjava:1.1.6’<br>接下来贴出几个小例子来简单演示RxJava的使用<br><a id="more"></a><br><strong>最基础的使用</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//创建事件源</span><br><span class="line">       Observable&lt;String&gt; myObservable = Observable.create(</span><br><span class="line">               new Observable.OnSubscribe&lt;String&gt;() &#123;</span><br><span class="line">                   @Override</span><br><span class="line">                   public void call(Subscriber&lt;? super String&gt; sub) &#123;</span><br><span class="line">                       sub.onNext(&quot;Hello, world!&quot;);</span><br><span class="line">                       sub.onCompleted();</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">       );</span><br><span class="line">//创建观察者</span><br><span class="line">       Subscriber&lt;String&gt; mySubscriber = new Subscriber&lt;String&gt;() &#123;</span><br><span class="line">           @Override</span><br><span class="line">           public void onNext(String s) &#123;</span><br><span class="line">               Toast.makeText(SecondActivity.this, s ,Toast.LENGTH_SHORT).show();</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           @Override</span><br><span class="line">           public void onCompleted() &#123;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           @Override</span><br><span class="line">           public void onError(Throwable e) &#123;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br><span class="line">//订阅</span><br><span class="line">       myObservable.subscribe(mySubscriber);</span><br></pre></td></tr></table></figure></p>
<p><strong>简化写法</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Observable&lt;String&gt; myObservable = Observable.just(&quot;hellow simple&quot;);</span><br><span class="line">Action1&lt;String&gt; onNextAction=new Action1&lt;String&gt;() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void call(String s) &#123;</span><br><span class="line">        Toast.makeText(SecondActivity.this, s, Toast.LENGTH_SHORT).show();</span><br><span class="line">        Log.i(&quot;tag&quot;,s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Action1&lt;Throwable&gt; onError=new Action1&lt;Throwable&gt;() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void call(Throwable throwable) &#123;</span><br><span class="line">        Toast.makeText(SecondActivity.this, &quot;error&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line">        Log.i(&quot;tag&quot;,&quot;error&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Action0 onCompleted=new Action0() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void call() &#123;</span><br><span class="line">        Toast.makeText(SecondActivity.this, &quot;completed&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line">        Log.i(&quot;tag&quot;,&quot;completed&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">myObservable.subscribe(onNextAction,onError,onCompleted);</span><br></pre></td></tr></table></figure></p>
<p>RxJava还提供了简化写法，Observable.just()可以有多个Object参数，相当于实现了多次onNext(Object o)和一次onCompleted()。</p>
<p><strong>操作符的使用</strong><br>大量的操作符是RxJava实现逻辑清晰的关键，他能将复杂的逻辑操作分散开来，使每一步的结果都清晰可见。<br>接下来介绍几个常用的操作符</p>
<p><em>map</em><br>对于事件作进一步处理,用于一对一的转化<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Observable&lt;String&gt; myObservable = Observable.just(&quot;hellow simple&quot;);</span><br><span class="line">       Observable&lt;String&gt; myObservableMap=myObservable.map(new Func1&lt;String, String&gt;() &#123;</span><br><span class="line">           @Override</span><br><span class="line">           public String call(String s) &#123;</span><br><span class="line">               return s+&quot;-xu&quot;;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">       Action1&lt;String&gt; onNextAction=new Action1&lt;String&gt;() &#123;</span><br><span class="line">           @Override</span><br><span class="line">           public void call(String s) &#123;</span><br><span class="line">               Toast.makeText(SecondActivity.this, s, Toast.LENGTH_SHORT).show();</span><br><span class="line">               Log.i(&quot;tag&quot;,s);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br><span class="line">       myObservableMap.subscribe(onNextAction);</span><br></pre></td></tr></table></figure></p>
<p><em>from</em><br>from标签相当于调用了多次onNext(Object o)一次onCompleted()<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from标签相当于调用了多次onNext(Object o)一次onCompleted()</span><br><span class="line">       String[] words = &#123;&quot;a&quot;, &quot;b&quot;, &quot;c&quot;&#125;;</span><br><span class="line">       Observable&lt;String&gt; observable = Observable.from(words);</span><br><span class="line">       observable.subscribe(new Action1&lt;String&gt;() &#123;</span><br><span class="line">           @Override</span><br><span class="line">           public void call(String s) &#123;</span><br><span class="line">               Log.i(&quot;form&quot;, s);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;, new Action1&lt;Throwable&gt;() &#123;</span><br><span class="line">           @Override</span><br><span class="line">           public void call(Throwable throwable) &#123;</span><br><span class="line">               Log.i(&quot;from&quot;, &quot;error&quot;);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;, new Action0() &#123;</span><br><span class="line">           @Override</span><br><span class="line">           public void call() &#123;</span><br><span class="line">               Log.i(&quot;from&quot;,&quot;complete&quot;);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br></pre></td></tr></table></figure></p>
<p><em>flatMap</em><br>与map不同的flatMap是用于一对多的转化<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list=new ArrayList&lt;&gt;();</span><br><span class="line">       list.add(&quot;a&quot;);</span><br><span class="line">       list.add(&quot;b&quot;);</span><br><span class="line">       list.add(&quot;c&quot;);</span><br><span class="line">       Observable&lt;List&lt;String&gt;&gt; observable=Observable.just(list);</span><br><span class="line">       observable.flatMap(new Func1&lt;List&lt;String&gt;, Observable&lt;String&gt;&gt;() &#123;</span><br><span class="line">           @Override</span><br><span class="line">           public Observable&lt;String&gt; call(List&lt;String&gt; strings) &#123;</span><br><span class="line">               return Observable.from(strings);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;).subscribe(new Action1&lt;String&gt;() &#123;</span><br><span class="line">           @Override</span><br><span class="line">           public void call(String s) &#123;</span><br><span class="line">               Log.i(&quot;tag&quot;,s);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br></pre></td></tr></table></figure></p>
<p><strong>线程控制</strong><br>几种线程的位置:</p>
<ul>
<li>Schedulers.immediate(): 直接在当前线程运行，相当于不指定线程。这是默认的 Scheduler。</li>
<li>Schedulers.newThread(): 总是启用新线程，并在新线程执行操作。</li>
<li>Schedulers.io(): I/O 操作（读写文件、读写数据库、网络信息交互等）所使用的 Scheduler。行为模式和 newThread() 差不多，区别在于 io() 的内部实现是是用一个无数量上限的线程池，可以重用空闲的线程，因此多数情况下 io() 比 newThread() 更有效率。不要把计算工作放在 io() 中，可以避免创建不必要的线程。</li>
<li>Schedulers.computation(): 计算所使用的 Scheduler。这个计算指的是 CPU 密集型计算，即不会被 I/O 等操作限制性能的操作，例如图形的计算。这个 Scheduler 使用的固定的线程池，大小为 CPU 核数。不要把 I/O 操作放在 computation() 中，否则 I/O 操作的等待时间会浪费 CPU。</li>
<li>AndroidSchedulers.mainThread()，它指定的操作将在 Android 主线程运行</li>
</ul>
<p>变化线程操纵<br>subscribeOn(Scheduler.io());事件产生的线程,作用在Observable.just(1, 2, 3, 4)，即Observable生成时，位置放在哪都可以，但只能调用一次<br>observeOn(AndroidSchedulers.mainThread());事件消费的线程,用于Observable生成后的操作，可以多次调用实现线程的多次切换<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Observable&lt;String&gt; observable=Observable.just(&quot;thread&quot;);</span><br><span class="line">observable.subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread()).map(new Func1&lt;String, String&gt;() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public String call(String s) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Thread.sleep(1000);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        Log.i(&quot;thread&quot;,Thread.currentThread().getId()+&quot;map1___&quot;+System.currentTimeMillis());</span><br><span class="line">        return s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).observeOn(Schedulers.io()).map(new Func1&lt;String,String&gt;() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public String call(String s) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Thread.sleep(1000);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        Log.i(&quot;thread&quot;,Thread.currentThread().getId()+&quot;map2___&quot;+System.currentTimeMillis());</span><br><span class="line">        return s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).map(new Func1&lt;String,String&gt;() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public String call(String s) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Thread.sleep(1000);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        Log.i(&quot;thread&quot;,Thread.currentThread().getId()+&quot;map3___&quot;+System.currentTimeMillis());</span><br><span class="line">        return s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).observeOn(AndroidSchedulers.mainThread()).subscribe(new Action1&lt;String&gt;() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void call(String s) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Thread.sleep(1000);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        Log.i(&quot;thread&quot;, Thread.currentThread().getId() + &quot;main___&quot;+System.currentTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, new Action1&lt;Throwable&gt;() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void call(Throwable throwable) &#123;</span><br><span class="line">        Log.i(&quot;thread&quot;,&quot;wrong0&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<hr>
<p>关于RxJava的功能还有很多我还未使用到，如果想要对RxJava有更多的了解可以参考以下几篇文章<br><a href="http://gank.io/post/560e15be2dca930e00da1083" target="_blank" rel="noopener">给 Android 开发者的 RxJava 详解</a><br><a href="http://blog.csdn.net/lzyzsd/article/details/41833541/" target="_blank" rel="noopener">深入浅出RxJava</a><br><a href="https://github.com/lzyzsd/awesome-rxjava" target="_blank" rel="noopener">Awesome-RxJava</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>第三方框架</tag>
        <tag>RxJava</tag>
      </tags>
  </entry>
  <entry>
    <title>幂等性</title>
    <url>/2020/03/06/Springboot%20%E5%B9%82%E7%AD%89%E6%80%A7/</url>
    <content><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a><strong>问题</strong></h2><p>现在有一个用户注册的功能，需求是用户名不能相同，注册逻辑如下<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">(String name, String phone)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    Users users = usersMapper.selectByCompanyName(name);</span><br><span class="line">    <span class="keyword">if</span>(users != <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"用户名已存在"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    users = <span class="keyword">new</span> Users();</span><br><span class="line">    users.setCompanyName(name);</span><br><span class="line">    users.setPhone(phone);</span><br><span class="line">    usersMapper.insertSelective(users);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>出现的后果是当前端在短时间内多次调用一个接口并且传相同参数时，会造成数据库中插入多条重复数据。<br><br><a id="more"></a></p>
<div style="text-align: center;"><br>    <img src="https://i.loli.net/2020/03/04/reW8jQSuyGTCtHn.png"><br></div>

<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a><strong>解决办法</strong></h2><h3 id="前端限制"><a href="#前端限制" class="headerlink" title="前端限制"></a><strong>前端限制</strong></h3><p>既然是前端多次点击引起的，那就在前端限制用户的多次点击。例如在按钮点击一次后置为不可用，在服务器返回后再将按钮状态恢复。<br><br>但是这种方法也只是临时的，因为不能保证前端一定会按规则传。同时此类情况也可能会出现在其他多用户同时操作的情况下。所以需要在前端限制的同时在后端也做限制。</p>
<h3 id="数据库唯一索引-unique"><a href="#数据库唯一索引-unique" class="headerlink" title="数据库唯一索引 unique"></a><strong>数据库唯一索引 unique</strong></h3><p>后台限制，首先想到的是既然后果是数据库中有脏数据，那就从数据库中做限制，给用户名加上唯一索引。<br><br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`users`</span> </span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> <span class="string">`name`</span>(<span class="string">`company_name`</span>) <span class="keyword">USING</span> BTREE;</span><br></pre></td></tr></table></figure></p>
<p>加入限制后数据库脏数据就不会被插入，取而代之的是报出 SQL 异常。但是对于注册之外的其他场景（比如普通表单提交）没有唯一键可做判断，还是需要一种方法防止前端对同一数据多次提交。</p>
<h3 id="幂等性"><a href="#幂等性" class="headerlink" title="幂等性"></a><strong>幂等性</strong></h3><p>在编程中幂等是指任意多次执行产生的影响与一次执行产生的影响相同。<br><br>只要接口实现了幂等，就能防止前端多次提交接口导致的一系列问题。一些实现幂等的策略：</p>
<ul>
<li>唯一索引（防止新增脏数据）</li>
<li>乐观锁（对于更新数据的情景，设计 version 来保证更新的幂等）</li>
<li>悲观锁（在需要修改、新增的表中加锁，但这样通常会导致性能问题）</li>
<li>token 令牌（分为两个阶段，第一阶段生成一个 token 返回给前端并存入 Redis， 第二阶段，一个请求过来后先验证并移除 token，再做逻辑处理）</li>
<li>缓冲区（将请求存为一个缓冲管道，后续使用异步任务处理管道中的数据。）</li>
</ul>
<h2 id="Springboot-中应用"><a href="#Springboot-中应用" class="headerlink" title="Springboot 中应用"></a><strong>Springboot 中应用</strong></h2><p>下面写一个 Springboot 中用 <code>token令牌</code> 实现幂等的试例。<br></p>
<ul>
<li><p>设置 redis 连接依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置 redis 参数文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Redis服务器地址</span><br><span class="line">redis.host=127.0.0.1</span><br><span class="line"># Redis服务器连接端口</span><br><span class="line">redis.port=6379</span><br><span class="line"># Redis服务器连接密码（默认为空）</span><br><span class="line">redis.password=null</span><br><span class="line">redis.timeout=30000</span><br><span class="line"># 连接池最大连接数（使用负值表示没有限制）</span><br><span class="line">redis.maxTotal=30</span><br><span class="line"># 连接池中的最大空闲连接</span><br><span class="line">redis.maxIdle=10</span><br><span class="line">redis.numTestsPerEvictionRun=1024</span><br><span class="line">redis.timeBetweenEvictionRunsMillis=30000</span><br><span class="line">redis.minEvictableIdleTimeMillis=1800000</span><br><span class="line">redis.softMinEvictableIdleTimeMillis=10000</span><br><span class="line"># 连接池最大阻塞等待时间（使用负值表示没有限制）</span><br><span class="line">redis.maxWaitMillis=1500</span><br><span class="line">redis.testOnBorrow=true</span><br><span class="line">redis.testWhileIdle=true</span><br><span class="line">redis.blockWhenExhausted=false</span><br><span class="line">redis.JmxEnabled=true</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加 JedisPool 依赖注入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@PropertySource</span>(<span class="string">"classpath:redis.properties"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;redis.host&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String host;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;redis.port&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;redis.timeout&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> timeout;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;redis.maxIdle&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxIdle;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;redis.maxWaitMillis&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxWaitMillis;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;redis.blockWhenExhausted&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> Boolean blockWhenExhausted;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;redis.JmxEnabled&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> Boolean JmxEnabled;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JedisPool <span class="title">jedisPoolFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        JedisPoolConfig jedisPoolConfig = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">        jedisPoolConfig.setMaxIdle(maxIdle);</span><br><span class="line">        jedisPoolConfig.setMaxWaitMillis(maxWaitMillis);</span><br><span class="line">        <span class="comment">// 连接耗尽时是否阻塞, false报异常,true阻塞直到超时, 默认true</span></span><br><span class="line">        jedisPoolConfig.setBlockWhenExhausted(blockWhenExhausted);</span><br><span class="line">        <span class="comment">// 是否启用pool的jmx管理功能, 默认true</span></span><br><span class="line">        jedisPoolConfig.setJmxEnabled(JmxEnabled);</span><br><span class="line">        JedisPool jedisPool = <span class="keyword">new</span> JedisPool(jedisPoolConfig, host, port, timeout);</span><br><span class="line">        <span class="keyword">return</span> jedisPool;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取 token 令牌接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">JedisPool jedisPool;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/token"</span>)</span><br><span class="line"><span class="function">String <span class="title">requestGetToken</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 生成唯一 UUID ，存入redis库</span></span><br><span class="line">    String token = UUID.randomUUID().toString();</span><br><span class="line">    Jedis jedis = jedisPool.getResource();</span><br><span class="line">    jedis.set(token, token);</span><br><span class="line">    jedis.expire(token,OUT_TIME);</span><br><span class="line">    jedis.close();</span><br><span class="line">    <span class="keyword">return</span> token;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>请求提交方法注解<br></p>
</li>
</ul>
<p>申明注解<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ApiIdempotent &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>检查 token 是否合法<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IdempotentAop</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JedisPool jedisPool;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"@annotation(idempotent)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doBeforeMethod</span><span class="params">(ApiIdempotent idempotent)</span> </span>&#123;</span><br><span class="line">        beforeCheckToken();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"@within(idempotent)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doBeforeClass</span><span class="params">(ApiIdempotent idempotent)</span> </span>&#123;</span><br><span class="line">        beforeCheckToken();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">beforeCheckToken</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ServletRequestAttributes attributes =</span><br><span class="line">                (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class="line">        HttpServletRequest request = attributes.getRequest();</span><br><span class="line">        String token = request.getHeader(<span class="string">"token"</span>);</span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.isEmpty(token))&#123;</span><br><span class="line">            Jedis jedis = jedisPool.getResource();</span><br><span class="line">            Long delCount = jedis.del(token);</span><br><span class="line">            <span class="keyword">if</span>(delCount &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IdempotentException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>Controller 使用<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiIdempotent</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/register"</span>)</span><br><span class="line"><span class="function">String <span class="title">userRegister</span><span class="params">(@RequestParam(<span class="string">"name"</span>)</span> String name,</span></span><br><span class="line"><span class="function">                    @<span class="title">RequestParam</span><span class="params">(<span class="string">"phone"</span>)</span> String phone) <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    userServer.addUser(name, phone);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/wangzaiplus/p/10931335.html" target="_blank" rel="noopener">springboot + redis + 注解 + 拦截器 实现接口幂等性校验</a><br><br><a href="https://www.cnblogs.com/javalyy/p/8882144.html" target="_blank" rel="noopener">深入理解幂等性</a></p>
]]></content>
      <categories>
        <category>大后台</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>功能需求</tag>
      </tags>
  </entry>
  <entry>
    <title>SurfaceView的使用</title>
    <url>/2018/03/04/SurfaceView%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在Android中更新UI操作都需要在主线程中操作。但是SurfaceView例外，他可以在子线程中更新View，这使他可以做一些复杂的动画更新而不必担心造成主线程的阻塞。接下来就开始介绍一下SurfaceView的使用。</p>
<a id="more"></a>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>SurfaceView通过SurfaceHolder.Callback来通知SurfaceView的创建和销毁<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">surfaceView.holder.addCallback(object :SurfaceHolder.Callback&#123;</span><br><span class="line">	//改变</span><br><span class="line">	override fun surfaceChanged(holder: SurfaceHolder?, p1: Int, p2: Int, p3: Int) &#123;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	//销毁</span><br><span class="line">	override fun surfaceDestroyed(holder: SurfaceHolder?) &#123;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	//创建</span><br><span class="line">	override fun surfaceCreated(holder: SurfaceHolder?) &#123;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>在SurfaceView创建完成之后就可以对其进行绘制了，而他的绘制是可以放在子线程中的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//获取画布</span><br><span class="line">val canvas=surfaceView.holder.lockCanvas()</span><br><span class="line">//提交画布</span><br><span class="line">surfaceView.holder.unlockCanvasAndPost(canvas)</span><br></pre></td></tr></table></figure>
<h2 id="创建动画"><a href="#创建动画" class="headerlink" title="创建动画"></a>创建动画</h2><p>下面就是一个使用SurfaceView创建动画的简单示例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class MainActivity : Activity() &#123;</span><br><span class="line">	var surfaceView: SurfaceView? = null</span><br><span class="line">	var mPath = Path()</span><br><span class="line">	var mPaint = Paint(Paint.ANTI_ALIAS_FLAG)</span><br><span class="line">	var mCanvas: Canvas? = null</span><br><span class="line"></span><br><span class="line">    override fun onCreate(savedInstanceState: Bundle?) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState)</span><br><span class="line">        surfaceView = findViewById(R.id.surface_view)</span><br><span class="line">	    surfaceView.holder.addCallback(object:SurfaceHolder.Callback&#123;</span><br><span class="line">			override fun surfaceChanged(holder: SurfaceHolder?, p1: Int, p2: Int, p3: Int) &#123;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			override fun surfaceDestroyed(holder: SurfaceHolder?) &#123;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			override fun surfaceCreated(holder: SurfaceHolder?) &#123;</span><br><span class="line">                mPaint.color = Color.BLACK</span><br><span class="line">                mPaint.style = Paint.Style.STROKE</span><br><span class="line">                mPaint.strokeWidth = 10f</span><br><span class="line">                mPaint.strokeCap = Paint.Cap.ROUND</span><br><span class="line">                mPaint.strokeJoin = Paint.Join.ROUND</span><br><span class="line">                mPath.moveTo(0f, 100f)</span><br><span class="line">                Thread(Runnable &#123;</span><br><span class="line">                    kotlin.run &#123;</span><br><span class="line">                        draw(0)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;).start()</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private fun draw(x: Int) &#123;</span><br><span class="line">        if (x &gt; 1080) &#123;</span><br><span class="line">            return</span><br><span class="line">        &#125;</span><br><span class="line">        val y = (50 * Math.sin(x * Math.PI / 180) + 100).toInt()</span><br><span class="line">        mPath.lineTo(x + 3f, y.toFloat())</span><br><span class="line">        try &#123;</span><br><span class="line">            mCanvas = holder.svView.holder.lockCanvas()</span><br><span class="line">            mCanvas?.drawColor(Color.WHITE)</span><br><span class="line">            mCanvas?.drawPath(mPath, mPaint)</span><br><span class="line">        &#125; catch (e: Exception) &#123;</span><br><span class="line">            e.printStackTrace()</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            if (mCanvas != null)</span><br><span class="line">                holder.svView.holder.unlockCanvasAndPost(mCanvas)</span><br><span class="line">        &#125;</span><br><span class="line">        draw(x + 3)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="其他用途"><a href="#其他用途" class="headerlink" title="其他用途"></a>其他用途</h2><p>SurfaceView还可以和MediaPlayer一起使用实现视频播放，以下就是简单的示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class MainActivity : Activity() &#123;</span><br><span class="line">	var surfaceView: SurfaceView? = null</span><br><span class="line">    val url = &quot;https://apd-fec3435b8e24a9f3815c886baf4b7682.v.smtcdns.com/om.tc.qq.com/A3h5f3r8PilbVshgbDGWN3dyaZ8zUFk92BfD1Npo4MBA/h0560ixm63g.mp4?sdtfrom=v1103&amp;guid=2cd4a548b5a2146345f8214435e93e24&amp;vkey=10A496F49B3530CF50C56B617F6DB75C6A69850F6E8AD27EF01C74C9B06E07A95E952146937CD25966DF570C447F3AA1570F392682DEEDA0953F1CA68941B5C3FD7552C0D4DC7666322C5B6EF983BCB32A09AD04252FD6CB536BBBB81CC1BAD7CB31E90E1D341D675E08ED216DCA77E0D868B2EE67C3D6F5&amp;platform=2&quot;</span><br><span class="line">    val player = MediaPlayer() </span><br><span class="line"></span><br><span class="line">    override fun onCreate(savedInstanceState: Bundle?) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState)</span><br><span class="line">        surfaceView = findViewById(R.id.surface_view)</span><br><span class="line">        Thread(Runnable &#123;</span><br><span class="line">            player.setDataSource(this, Uri.parse(url))</span><br><span class="line">            player.prepare()</span><br><span class="line">        &#125;).start()        </span><br><span class="line">	    surfaceView.holder.addCallback(object:SurfaceHolder.Callback&#123;</span><br><span class="line">			override fun surfaceChanged(holder: SurfaceHolder?, p1: Int, p2: Int, p3: Int) &#123;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			override fun surfaceDestroyed(holder: SurfaceHolder?) &#123;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			override fun surfaceCreated(holder: SurfaceHolder?) &#123;</span><br><span class="line">				player.setDisplay(holder)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;)</span><br><span class="line">		player.setOnPreparedListener(object : MediaPlayer.OnPreparedListener &#123;</span><br><span class="line">            override fun onPrepared(p0: MediaPlayer?) &#123;</span><br><span class="line">                player.start()</span><br><span class="line">                player.isLooping = true</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://developer.android.com/reference/android/view/SurfaceView.html" target="_blank" rel="noopener">SurfaceView</a><br><a href="http://www.cnblogs.com/devinzhang/archive/2012/02/03/2337559.html" target="_blank" rel="noopener">Android之SurfaceView使用总结</a><br><a href="http://blog.csdn.net/huaxun66/article/details/53083498" target="_blank" rel="noopener">Android SurfaceView的使用</a><br><a href="https://www.cnblogs.com/yxx123/p/5720907.html" target="_blank" rel="noopener">android中使用surfaceview＋MediaPlayer播放视频</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>基础控件</tag>
        <tag>SurfaceView</tag>
      </tags>
  </entry>
  <entry>
    <title>TextView自动换行</title>
    <url>/2019/01/13/TextView%E8%87%AA%E5%8A%A8%E6%8D%A2%E8%A1%8C/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>TextView可以说是在Android中最常用的控件之一了。但是Text View中也有很多的坑，其中之一就是自动换行。</p>
<a id="more"></a>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p><img align="middle" width="350px" src="https://www.sisyphuser.cn/images/see/TextView%E8%87%AA%E5%8A%A8%E6%8D%A2%E8%A1%8C_1.jpg"><br><br>上面是网易新闻的列表截图，可以看到，“韩媒：中国已经抄袭了我们34个综”后面就进行换行了，给后面留下了较多的空白。像这种图片较多，每行之间间隔较大的列表来说也不是很明显。<br>但像下面这种就显得比较难看了。<br><img align="middle" width="350px" src="https://www.sisyphuser.cn/images/see/TextView%E8%87%AA%E5%8A%A8%E6%8D%A2%E8%A1%8C_2.jpg"><br></p>
<h3 id="初步解决方案"><a href="#初步解决方案" class="headerlink" title="初步解决方案"></a>初步解决方案</h3><p>想到的思路是自己重写TextView的onDraw方法，只有到文字超出控件宽度时才换行。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class AlignText extends TextView &#123;</span><br><span class="line"></span><br><span class="line">    private float textSize;</span><br><span class="line">    private int textColor;</span><br><span class="line">    private int paddingRight;</span><br><span class="line">    private int paddingLeft;</span><br><span class="line">    private float lineSpacing;</span><br><span class="line">    private Paint paint;</span><br><span class="line"></span><br><span class="line">    public AlignText(Context context, @Nullable AttributeSet attrs) &#123;</span><br><span class="line">        super(context, attrs);</span><br><span class="line">        textSize = getTextSize();</span><br><span class="line">        textColor = getCurrentTextColor();</span><br><span class="line">        paddingLeft = getPaddingLeft();</span><br><span class="line">        paddingRight = getPaddingRight();</span><br><span class="line">        lineSpacing = getLineSpacingExtra();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected void onDraw(Canvas canvas) &#123;</span><br><span class="line">        if (paint == null) &#123;</span><br><span class="line">            paint = getPaint();</span><br><span class="line">            paint.setAntiAlias(true);</span><br><span class="line">            paint.setColor(textColor);</span><br><span class="line">        &#125;</span><br><span class="line">        int textShowWidth = getWidth() - paddingRight - paddingLeft;</span><br><span class="line">        int lineCount = 1;</span><br><span class="line">        String sContent = this.getText().toString();</span><br><span class="line">        char[] textCharArray = sContent.toCharArray();</span><br><span class="line">        float drawWidth = 0;</span><br><span class="line">        float charWidth = 0;</span><br><span class="line">        for (int i = 0; i &lt; textCharArray.length; i++) &#123;</span><br><span class="line">            if (textCharArray[i] == &apos;\n&apos;) &#123;</span><br><span class="line">                lineCount++;</span><br><span class="line">                drawWidth = 0;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            charWidth = paint.measureText(textCharArray, i, 1);</span><br><span class="line">            if (textShowWidth - drawWidth &lt; charWidth) &#123;</span><br><span class="line">                lineCount++;</span><br><span class="line">                drawWidth = 0;</span><br><span class="line">            &#125;</span><br><span class="line">            float x=drawWidth + paddingLeft;</span><br><span class="line">            float y = (lineCount) * textSize + ((lineSpacing + textSize/8)* (lineCount - 1));</span><br><span class="line">            canvas.drawText(textCharArray, i, 1, x, y, paint);</span><br><span class="line">            drawWidth += charWidth;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="存在的不足"><a href="#存在的不足" class="headerlink" title="存在的不足"></a>存在的不足</h3><p>由上节代码可以看到，AlignText是在计算每一个字符的长度后判断是否需要换行。但是当一段文字中出现中英文或者标点符号时，由于不同的字符之间的宽度不同，在一段文字右侧也不能够完全对齐。</p>
<p><img align="middle" src="https://www.sisyphuser.cn/images/see/TextView%E8%87%AA%E5%8A%A8%E6%8D%A2%E8%A1%8C_3.jpg"><br></p>
<h3 id="思考完善"><a href="#思考完善" class="headerlink" title="思考完善"></a>思考完善</h3><p>要解决上面提到的问题，我想到了两种方法：</p>
<ol>
<li>由于单个汉字所占用空间是最大的，所以将所有的单个字符的宽度都设置为统一的宽度。</li>
<li>将最后的空白分配到之前的每一个字符的间隔之间。</li>
</ol>
<p>方案一：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected void onDraw(Canvas canvas)&#123;</span><br><span class="line">    if (paint == null) &#123;</span><br><span class="line">        paint = getPaint();</span><br><span class="line">        paint.setAntiAlias(true);</span><br><span class="line">        paint.setColor(textColor);</span><br><span class="line">    &#125;</span><br><span class="line">    int textShowWidth = getWidth() - paddingRight - paddingLeft;</span><br><span class="line">    int lineCount = 1;</span><br><span class="line">    String sContent = this.getText().toString();</span><br><span class="line">    char[] textCharArray = sContent.toCharArray();</span><br><span class="line">    float drawWidth = 0;</span><br><span class="line">    float charWidth = paint.measureText(&quot;啊&quot;);</span><br><span class="line">    for (int i = 0; i &lt; textCharArray.length; i++) &#123;</span><br><span class="line">        if (textCharArray[i] == &apos;\n&apos;) &#123;</span><br><span class="line">            lineCount++;</span><br><span class="line">            drawWidth = 0;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        if (textShowWidth - drawWidth &lt; charWidth) &#123;</span><br><span class="line">            lineCount++;</span><br><span class="line">            drawWidth = 0;</span><br><span class="line">        &#125;</span><br><span class="line">        float x=drawWidth + paddingLeft;</span><br><span class="line">        float y = (lineCount) * textSize + ((lineSpacing + textSize/8)* (lineCount - 1));</span><br><span class="line">        canvas.drawText(textCharArray, i, 1, x, y, paint);</span><br><span class="line">        drawWidth += charWidth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">```  </span><br><span class="line">效果</span><br><span class="line">&lt;img align=&quot;middle&quot; src=&quot;https://www.sisyphuser.cn/images/see/TextView%E8%87%AA%E5%8A%A8%E6%8D%A2%E8%A1%8C_4.jpg&quot;/&gt;&lt;/br&gt;</span><br><span class="line"></span><br><span class="line">方案二：</span><br></pre></td></tr></table></figure></p>
<p>protected void onDraw(Canvas canvas){<br>    if (paint == null) {<br>        paint = getPaint();<br>        paint.setAntiAlias(true);<br>        paint.setColor(textColor);<br>    }<br>    int textShowWidth = getWidth() - paddingRight - paddingLeft;<br>    int lineCount = 1;<br>    String sContent = this.getText().toString();<br>    char[] textCharArray = sContent.toCharArray();<br>    float drawWidth = 0;<br>    float charWidth = 0;<br>    int start = 0;<br>    int end = 0;<br>    for (int i = 0; i &lt; textCharArray.length; i++) {<br>        end++;<br>        if(i==textCharArray.length-1){<br>            float x = paddingLeft;<br>            float y = (lineCount) <em> textSize + ((lineSpacing + textSize / 8) </em> (lineCount - 1));<br>            canvas.drawText(textCharArray, start, end - start, x, y, paint);<br>        }<br>        if (textCharArray[i] == ‘\n’) {<br>            if (end-1 &gt; start) {<br>                float x = paddingLeft;<br>                float y = (lineCount) <em> textSize + ((lineSpacing + textSize / 8) </em> (lineCount - 1));<br>                canvas.drawText(textCharArray, start, end - start, x, y, paint);<br>            }<br>            lineCount++;<br>            drawWidth = 0;<br>            start=i+1;<br>            continue;<br>        }<br>        charWidth = paint.measureText(textCharArray, i, 1);<br>        if (textShowWidth - drawWidth &lt; charWidth) {<br>            float addSpacing = (textShowWidth - drawWidth)/(end-2-start);<br>            float x = paddingLeft;<br>            float y = (lineCount) <em> textSize + ((lineSpacing + textSize/8)</em> (lineCount - 1));</p>
<pre><code>        int innerDrawWidth=0;
        for(int j= 0;j&lt;end-1-start;j++) {
            canvas.drawText(textCharArray, start+j, 1, x+innerDrawWidth+j*addSpacing, y, paint);
            float tempCharWidth=paint.measureText(textCharArray, start+j, 1);
            innerDrawWidth+=tempCharWidth;
        }

        lineCount++;
        drawWidth = 0;
        start=i;
    }
    drawWidth += charWidth;
}
</code></pre><p>}<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">效果</span><br><span class="line">&lt;img align=&quot;middle&quot; src=&quot;https://www.sisyphuser.cn/images/see/TextView%E8%87%AA%E5%8A%A8%E6%8D%A2%E8%A1%8C_6.jpg&quot;/&gt;&lt;/br&gt;</span><br><span class="line"></span><br><span class="line">### emoji问题</span><br><span class="line"></span><br><span class="line">在解决完对齐问题后发现了一个bug。原本能显示的emoji表情由于每次分开绘制字符变成了两个乱码符号。</span><br><span class="line">从[Emoji的编码以及常见问题处理](https://segmentfault.com/a/1190000007594620?utm_source=tuicool&amp;utm_medium=referral)中了解到一个emoji占了两个长度，而我把它截断了自然就显示乱码了。&lt;/br&gt;</span><br><span class="line">解决方案：对emoji的两个字符一起绘制，emoji的编码为(&apos;u&apos;\ud83c[\udf00-\udfff] | &apos;u&apos;\ud83d[\udc00-\ude4f\ude80-\udeff] | &apos;u&apos;[\u2600-\u2B55])</span><br></pre></td></tr></table></figure></p>
<p>protected void onDraw(Canvas canvas){<br>    if (paint == null) {<br>        paint = getPaint();<br>        paint.setAntiAlias(true);<br>        paint.setColor(textColor);<br>    }<br>    int textShowWidth = getWidth() - paddingRight - paddingLeft;<br>    int lineCount = 1;<br>    String sContent = this.getText().toString();<br>    char[] textCharArray = sContent.toCharArray();<br>    float drawWidth = 0;<br>    float charWidth = 0;<br>    int start = 0;<br>    int end = 0;<br>    int defaultCount = 1;<br>    for (int i = 0; i &lt; textCharArray.length; i+=defaultCount) {<br>        end+=defaultCount;<br>        Log.i(“ssss”,String.valueOf(textCharArray[i])+defaultCount);<br>        if (textCharArray[i] == ‘\n’) {<br>            if (end-1 &gt; start) {<br>                float x = paddingLeft;<br>                float y = (lineCount) <em> textSize + ((lineSpacing + textSize / 8) </em> (lineCount - 1));<br>                canvas.drawText(textCharArray, start, end - start, x, y, paint);<br>            }<br>            lineCount++;<br>            drawWidth = 0;<br>            start=i+1;<br>            defaultCount = 1;<br>            continue;<br>        }</p>
<pre><code>    int index=(int)textCharArray[i];
    if(i&lt;textCharArray.length-1
            &amp;&amp;(index == 0xd83c
            ||index == 0xd83d
            || (index &gt;= 0x2600 &amp;&amp; index &lt;= 0x2B55))) {
        defaultCount = 2;
    }else{
        defaultCount = 1;
    }
    charWidth = paint.measureText(textCharArray, i, defaultCount);
    if (textShowWidth - drawWidth &lt; charWidth) {
        float addSpacing = (textShowWidth - drawWidth)/(end-2-start);
        float x = paddingLeft;
        float y = (lineCount) * textSize + ((lineSpacing + textSize/8)* (lineCount - 1));

        int innerDrawWidth=0;
        int innerDefaultCount = 1;
        for(int j= 0;j&lt;end-1-start;j+= innerDefaultCount) {
            int innerIndex=(int)textCharArray[start+j];
            if(i&lt;textCharArray.length-1
                    &amp;&amp;(innerIndex == 0xd83c
                    ||innerIndex == 0xd83d
                    || (innerIndex &gt;= 0x2600 &amp;&amp; innerIndex &lt;= 0x2B55))){
                innerDefaultCount = 2;
            }else{
                innerDefaultCount = 1;
            }
            canvas.drawText(textCharArray, start+j, innerDefaultCount, x+innerDrawWidth+j*addSpacing, y, paint);
            float tempCharWidth=paint.measureText(textCharArray, start+j, innerDefaultCount);
            innerDrawWidth+=tempCharWidth;
        }

        lineCount++;
        drawWidth = 0;
        start=i;
    }
    if(i==textCharArray.length-defaultCount){
        float x = paddingLeft;
        float y = (lineCount) * textSize + ((lineSpacing + textSize / 8) * (lineCount - 1));
        canvas.drawText(textCharArray, start, textCharArray.length - start, x, y, paint);
    }
    drawWidth += charWidth;
}
</code></pre><p>}<br><code>`</code></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Toolbar的使用</title>
    <url>/2016/09/21/Toolbar%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在Android Studio中默认工程继承AppCompatActivity而不是Activity。<br><img src="https://www.sisyphuser.cn/image/toolbar.png" alt="AppCompatActivity"><br>从AppCompatActivity的源码中可以看到，它是继承自FragmentActivity的而它的另一个作用是代替了过时的ActionBarActivity，即用Toolbar代替ActionBar。接下来就介绍一下Toolbar的使用。</p>
<a id="more"></a>
<p>导入依赖包<br>compile ‘com.android.support:appcompat-v7:24.1.1’</p>
<h2 id="xml中设置"><a href="#xml中设置" class="headerlink" title="xml中设置"></a>xml中设置</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;android.support.design.widget.AppBarLayout</span><br><span class="line">	android:layout_width=&quot;match_parent&quot;</span><br><span class="line">	android:layout_height=&quot;wrap_content&quot;&gt;</span><br><span class="line">	&lt;android.support.v7.widget.Toolbar </span><br><span class="line">	xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</span><br><span class="line">		android:id=&quot;@+id/tool&quot;</span><br><span class="line">		android:layout_width=&quot;match_parent&quot;</span><br><span class="line">		android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">		android:background=&quot;?attr/colorPrimary&quot;</span><br><span class="line">		android:minHeight=&quot;?attr/actionBarSize&quot;</span><br><span class="line">		android:theme=&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;</span><br><span class="line">		app:popupTheme=&quot;@style/ThemeOverlay.AppCompat.Light&quot;/&gt;</span><br><span class="line">&lt;/android.support.design.widget.AppBarLayout&gt;</span><br></pre></td></tr></table></figure>
<h2 id="在Activity中设置Toolbar"><a href="#在Activity中设置Toolbar" class="headerlink" title="在Activity中设置Toolbar"></a>在Activity中设置Toolbar</h2><h3 id="基本设置"><a href="#基本设置" class="headerlink" title="基本设置"></a>基本设置</h3><p>1.设置标题<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">setTitle(&quot;title&quot;);</span><br><span class="line">setSupportActionBar(toolbar);</span><br></pre></td></tr></table></figure></p>
<p>默认标题是靠右对齐，如果要居中或对标题样式有特殊需求可以在xml中的Toolbar标签中加入<textview>并配置其属性<br>2.设置返回按钮<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tool.setNavigationIcon(R.mipmap.back);</span><br><span class="line">       tool.setNavigationOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">           @Override</span><br><span class="line">           public void onClick(View view) &#123;</span><br><span class="line">               Snackbar.make(getWindow().getDecorView(),&quot;back&quot;,Snackbar.LENGTH_SHORT).show();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br></pre></td></tr></table></figure></textview></p>
<p>3.设置logo<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tool.setLogo(R.mipmap.logo);</span><br></pre></td></tr></table></figure></p>
<p>4.设置副标题<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tool.setSubtitle(&quot;subtitle&quot;);</span><br></pre></td></tr></table></figure></p>
<p>设置完以上参数的样式如下<br><img src="https://www.sisyphuser.cn/image/toolbar2.png" alt="样式"></p>
<h3 id="menu设置"><a href="#menu设置" class="headerlink" title="menu设置"></a>menu设置</h3><p>1.menu基本设置<br>在代码中设置获取menu<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">  public boolean onCreateOptionsMenu(Menu menu) &#123;</span><br><span class="line">      getMenuInflater().inflate(R.menu.food_type_menu,menu);</span><br><span class="line">      return true;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Override</span><br><span class="line">  public boolean onOptionsItemSelected(MenuItem item) &#123;</span><br><span class="line">      //各个item点击事件</span><br><span class="line">      return true;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>
<p> 在menu中设置menu样式<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> &lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</span><br><span class="line">    &gt;</span><br><span class="line">    &lt;item</span><br><span class="line">        android:id=&quot;@+id/menu_group&quot;</span><br><span class="line">        android:title=&quot;item1&quot;</span><br><span class="line">        android:icon=&quot;@mipmap/ic_launcher&quot;</span><br><span class="line">        app:showAsAction=&quot;always&quot; /&gt;</span><br><span class="line">    &lt;item</span><br><span class="line">        android:id=&quot;@+id/menu_clear&quot;</span><br><span class="line">        android:title=&quot;item1&quot;</span><br><span class="line">        app:showAsAction=&quot;never&quot; /&gt;</span><br><span class="line">    &lt;item</span><br><span class="line">        android:id=&quot;@+id/menu_refresh&quot;</span><br><span class="line">        android:title=&quot;item2&quot;</span><br><span class="line">        app:showAsAction=&quot;never&quot; /&gt;</span><br><span class="line">&lt;/menu&gt;</span><br></pre></td></tr></table></figure></p>
<p>其中showAsAction属性共有五个值：ifRoom、never、always、withText、collapseActionView，可以混合使用。<br>ifRoom    会显示在Item中，但是如果已经有4个或者4个以上的Item时会隐藏在溢出列表中。当然个数并不仅仅局限于4个，依据屏幕的宽窄而定<br>never    永远不会显示。只会在溢出列表中显示，而且只显示标题，所以在定义item的时候，最好把标题都带上。<br>always    无论是否溢出，总会显示。<br>withText    withText值示意Action bar要显示文本标题。Action bar会尽可能的显示这个标题，但是，如果图标有效并且受到Action bar空间的限制，文本标题有可能显示不全。<br>collapseActionView      声明了这个操作视窗应该被折叠到一个按钮中，当用户选择这个按钮时，这个操作视窗展开。否则，这个操作视窗在默认的情况下是可见的，并且即便在用于不适用的时候，也要占据操作栏的有效空间。<br>一般要配合ifRoom一起使用才会有效果。</p>
<p>最终效果<br><img src="https://www.sisyphuser.cn/image/toolbar3.png" alt></p>
<p><img src="https://www.sisyphuser.cn/image/toolbar4.png" alt></p>
<p>2.menu样式<br>默认的样式是白底黑字，可以通过设置Toolbar中的theme来改变样式<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--&lt;style name=&quot;MenuStyle&quot; parent=&quot;@style/ThemeOverlay.AppCompat.Light&quot;&gt;--&gt;</span><br><span class="line">&lt;style name=&quot;MenuStyle&quot; parent=&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;&gt;</span><br><span class="line">    &lt;item name=&quot;android:textColorPrimary&quot;&gt;#ffffff&lt;/item&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p>
<p>以上两个parent，ThemeOverlay.AppCompat.Light为白色背景ThemeOverlay.AppCompat.Dark.ActionBar为黑色背景，android:textColorPrimary设置字体颜色<br>3.PopupMenu<br>PopupMenu是一个轻量话的控件，与PopupWindow相比少了很多自定义的属性，这里我将PopupWindow作为一个Menu的展开来使用<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PopupMenu popup=new PopupMenu(this,findViewById(R.id.menu_group));</span><br><span class="line">popup.getMenuInflater().inflate(R.menu.food_type_menu_item,popup.getMenu());</span><br><span class="line">popup.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public boolean onMenuItemClick(MenuItem item) &#123;</span><br><span class="line">        switch (item.getItemId())&#123;</span><br><span class="line">            case R.id.item1:</span><br><span class="line">                ToastUtil.showToast(FoodTypeActivity.this,&quot;item1&quot;);</span><br><span class="line">                break;</span><br><span class="line">            case R.id.item2:</span><br><span class="line">                ToastUtil.showToast(FoodTypeActivity.this,&quot;item2&quot;);</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">popup.show();</span><br></pre></td></tr></table></figure></p>
<p><img src="https://www.sisyphuser.cn/image/toolbar5.png" alt></p>
<p>如果需要改变PopupMenu的字体颜色和背景颜色就需要在该window对应的Activity中改变它的style<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style name=&quot;PpupmenuStyle&quot; parent=&quot;@style/AppTheme&quot;&gt;</span><br><span class="line">	&lt;item name=&quot;android:textColorPrimary&quot;&gt;#ffffff&lt;/item&gt;</span><br><span class="line">    &lt;item name=&quot;android:colorBackground&quot;&gt;#000000&lt;/item&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p>
<p>在AndroidManifest中设置style<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;activity android:name=&quot;.view.FoodTypeActivity&quot; android:theme=&quot;@style/PpupmenuStyle&quot;/&gt;</span><br></pre></td></tr></table></figure></p>
<p>默认PopupMenu是只显示title不显示icon的，可以自己重写PopupMenu并修改相关属性来使之显示icon<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">	Field field = popup.getClass().getDeclaredField(&quot;mPopup&quot;);</span><br><span class="line">	field.setAccessible(true);</span><br><span class="line">	MenuPopupHelper mHelper = (MenuPopupHelper) field.get(popup);</span><br><span class="line">	mHelper.setForceShowIcon(true);</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">	e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><img src="https://www.sisyphuser.cn/image/toolbar6.png" alt></p>
<h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>以上就是关于Toolbar的一些东西，虽然常用的都是自定义的title，但还是有必要了解一下官方给的方案。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>基础控件</tag>
        <tag>Toolbar</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker Compose</title>
    <url>/2019/08/11/docker-compose/</url>
    <content><![CDATA[<h2 id="Docker-Compose是什么"><a href="#Docker-Compose是什么" class="headerlink" title="Docker Compose是什么"></a>Docker Compose是什么</h2><p>Docker Compose 是一个用于定义和运行多容器 Docker 应用程序的工具。它是在 Docker 的基础上轻松、高效地管理容器。<br><img src="https://i.loli.net/2019/08/11/J1zlcveRIrQCB2P.png" alt="docker-compose"></p>
<a id="more"></a>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Docker Compose 的下载安装非常简单。<br>在<a href="https://github.com/docker/compose" target="_blank" rel="noopener">地址</a>下载后<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mv docker-compose /usr/bin/</span><br><span class="line">chmod +x /usr/bin/docker-compose</span><br></pre></td></tr></table></figure></p>
<h2 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h2><p><code>docker-compose.yml</code> 是一个启动的配置文件。<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  web:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">"java:latest"</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"80:8080"</span></span><br><span class="line"><span class="attr">    links:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">java</span></span><br><span class="line"><span class="attr">  java:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">"work_app:latest"</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"/root/docker/:/tmp"</span></span><br><span class="line"><span class="attr">    command:</span> <span class="string">["java","-jar","/tmp/app.jar"]</span></span><br><span class="line"><span class="attr">    links:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">db</span></span><br><span class="line"><span class="attr">    depends_on:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">db</span></span><br><span class="line"><span class="attr">  db:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">"mysql:latest"</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"3306:3306"</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"/root/docker/mysql/datadir:/var/lib/mysql"</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">"always"</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="attr">      MYSQL_ROOT_PASSWORD:</span> <span class="string">"123456"</span></span><br></pre></td></tr></table></figure></p>
<p><strong>参数及作用</strong></p>
<table>
<thead>
<tr>
<th>参数</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>image</td>
<td>指定创建容器的镜像</td>
</tr>
<tr>
<td>command</td>
<td>容器启动后执行的命令</td>
</tr>
<tr>
<td>container_name</td>
<td>指定容器的别名</td>
</tr>
<tr>
<td>ports</td>
<td>指定端口映射</td>
</tr>
<tr>
<td>voumes</td>
<td>指定目录挂载</td>
</tr>
<tr>
<td>links</td>
<td>指定连接的容器</td>
</tr>
<tr>
<td>depends_on</td>
<td>指定依赖的容器</td>
</tr>
<tr>
<td>environment</td>
<td>设置环境变量</td>
</tr>
<tr>
<td>working_dir</td>
<td>设置工作目录</td>
</tr>
<tr>
<td>restart</td>
<td>停止后是否重启</td>
</tr>
</tbody>
</table>
<h2 id="docker-compose-命令"><a href="#docker-compose-命令" class="headerlink" title="docker-compose 命令"></a>docker-compose 命令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span>启动</span><br><span class="line">docker-compose up</span><br><span class="line"><span class="meta">#</span>后台启动</span><br><span class="line">docker-compose up -d</span><br><span class="line"><span class="meta">#</span>停止</span><br><span class="line">docker-compose stop</span><br><span class="line"><span class="meta">#</span>停止并移除</span><br><span class="line">docker-compose down</span><br></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.jianshu.com/p/2217cfed29d7" target="_blank" rel="noopener">Docker Compose配置文件详解</a><br><a href="https://docs.docker.com/compose/" target="_blank" rel="noopener">Docker Compose</a></p>
]]></content>
      <categories>
        <category>大后台</category>
      </categories>
      <tags>
        <tag>服务器</tag>
        <tag>部署</tag>
        <tag>虚拟化</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx安装和配置</title>
    <url>/2019/05/28/nginx/</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Nginx是俄罗斯人编写的十分轻量级的HTTP服务器。Nginx以事件驱动的方式编写，所以有非常好的性能，同时也是一个非常高效的反向代理、负载平衡服务器。下面将会介绍一下Nginx的安装和基本配置。</p>
<a id="more"></a>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span> 安装依赖</span><br><span class="line">yum -y install gcc gcc-c++ make libtool zlib zlib-devel openssl openssl-devel pcre pcre-devel</span><br><span class="line"><span class="meta">#</span> 安装nginx</span><br><span class="line">yum -y install nginx</span><br></pre></td></tr></table></figure>
<h3 id="简单的命令"><a href="#简单的命令" class="headerlink" title="简单的命令"></a>简单的命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span> 启动服务</span><br><span class="line">nginx</span><br><span class="line"><span class="meta">#</span> 重启</span><br><span class="line">nginx -s reload</span><br><span class="line"><span class="meta">#</span> 关闭</span><br><span class="line">nginx -s stop</span><br></pre></td></tr></table></figure>
<h3 id="nginx-conf配置文件"><a href="#nginx-conf配置文件" class="headerlink" title="nginx.conf配置文件"></a>nginx.conf配置文件</h3><p>默认配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">user nginx;		#默认用户和用户组</span><br><span class="line">worker_processes auto;		#允许生成的进程数</span><br><span class="line">error_log /var/log/nginx/error.log;		#指定日志路径</span><br><span class="line">pid /run/nginx.pid;		#指定nginx运行文件存放地址</span><br><span class="line"></span><br><span class="line">include /usr/share/nginx/modules/*.conf;</span><br><span class="line"></span><br><span class="line">events&#123;</span><br><span class="line">    worker_connections 1024;	#最大连接数</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http&#123;</span><br><span class="line">    log_format main '$remote_addr - $remote_user [$time_local] "$request" '</span><br><span class="line">                      '$status $body_bytes_sent "$http_referer" '</span><br><span class="line">                      '"$http_user_agent" "$http_x_forwarded_for"';</span><br><span class="line">	access_log /var/log/nginx/access.log main;</span><br><span class="line">	</span><br><span class="line">	sendfile			on;		#允许 sendfile 方式传输文件</span><br><span class="line">	tcp_nopush			on;		</span><br><span class="line">	tcp_nodelay			on;</span><br><span class="line">	keepalive_timeout	65;		#连接超时时间</span><br><span class="line">	types_hash_max_size	2048;</span><br><span class="line">	</span><br><span class="line">	include			/etc/nginx/mime.types;</span><br><span class="line">	default_type	application/octet-stream;</span><br><span class="line">	include			/etc/nginx/conf.d/*.conf;</span><br><span class="line">	</span><br><span class="line">	server &#123;</span><br><span class="line">        listen		80 default_server;	#监听的端口</span><br><span class="line">        listen		[::]:80 default_server;</span><br><span class="line">        server_name	_;		#监听的地址</span><br><span class="line">        root		/usr/share/nginx/html; #根目录位置(可以放在location中)</span><br><span class="line">       #index		index.html index.htm;  #路径下默认的访问文件名(可以放在location中)</span><br><span class="line">        </span><br><span class="line">        include		/etc/nginx/default.d/*.conf;</span><br><span class="line">        </span><br><span class="line">        location / &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        error_page 404 /404.html;</span><br><span class="line">        	location = /40x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        error_page 500 502 503 504 /50x.html;</span><br><span class="line">        	location = /50x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="server"><a href="#server" class="headerlink" title="server"></a>server</h3><p>http服务上支持若干虚拟主机。每个虚拟主机一个对应的server配置项，配置项里面包含该虚拟主机相关的配置。可以设置不同的监听地址和监听端口。</p>
<h3 id="location"><a href="#location" class="headerlink" title="location"></a>location</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">location  = / &#123;</span><br><span class="line"><span class="meta">  #</span> 精确匹配 / ，主机名后面不能带任何字符串</span><br><span class="line">  [ configuration A ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location  / &#123;</span><br><span class="line"><span class="meta">  #</span> 因为所有的地址都以 / 开头，所以这条规则将匹配到所有请求</span><br><span class="line"><span class="meta">  #</span> 但是正则和最长字符串会优先匹配</span><br><span class="line">  [ configuration B ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location /documents/ &#123;</span><br><span class="line"><span class="meta">  #</span> 匹配任何以 /documents/ 开头的地址，匹配符合以后，还要继续往下搜索</span><br><span class="line"><span class="meta">  #</span> 只有后面的正则表达式没有匹配到时，这一条才会采用这一条</span><br><span class="line">  [ configuration C ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~ /documents/Abc &#123;</span><br><span class="line"><span class="meta">  #</span> 匹配任何以 /documents/Abc 开头的地址，匹配符合以后，还要继续往下搜索</span><br><span class="line"><span class="meta">  #</span> 只有后面的正则表达式没有匹配到时，这一条才会采用这一条</span><br><span class="line">  [ configuration CC ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ^~ /images/ &#123;</span><br><span class="line"><span class="meta">  #</span> 匹配任何以 /images/ 开头的地址，匹配符合以后，停止往下搜索正则，采用这一条。</span><br><span class="line">  [ configuration D ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~* \.(gif|jpg|jpeg)$ &#123;</span><br><span class="line"><span class="meta">  #</span> 匹配所有以 gif,jpg或jpeg 结尾的请求</span><br><span class="line"><span class="meta">  #</span> 然而，所有请求 /images/ 下的图片会被 config D 处理，因为 ^~ 到达不了这一条正则</span><br><span class="line">  [ configuration E ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location /images/ &#123;</span><br><span class="line"><span class="meta">  #</span> 字符匹配到 /images/，继续往下，会发现 ^~ 存在</span><br><span class="line">  [ configuration F ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location /images/abc &#123;</span><br><span class="line"><span class="meta">  #</span> 最长字符匹配到 /images/abc，继续往下，会发现 ^~ 存在</span><br><span class="line"><span class="meta">  #</span> F与G的放置顺序是没有关系的</span><br><span class="line">  [ configuration G ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~ /images/abc/ &#123;</span><br><span class="line"><span class="meta">  #</span> 只有去掉 config D 才有效：先最长匹配 config G 开头的地址，继续往下搜索，匹配到这一条正则，采用</span><br><span class="line">    [ configuration H ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一些匹配符号的含义</p>
<ul>
<li>已 = 开头表示精确匹配</li>
<li>^~ 表示以某个url开头的地址</li>
<li>~ 表示区分大小写的正则匹配</li>
<li>~*表示不区分大小写的正则匹配</li>
<li>/通用匹配</li>
</ul>
<p>优先级</p>
<ol>
<li>location =</li>
<li>location 完整路径</li>
<li>location ^~ 路径</li>
<li>location ~,~* 路径</li>
<li>location 部分起始路径</li>
<li>location /</li>
</ol>
<h3 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h3><p><a href="https://www.cnblogs.com/tianhei/p/7726505.html" target="_blank" rel="noopener">nginx配置ssl证书实现https访问</a></p>
<p><a href="http://seanlook.com/2015/05/17/nginx-install-and-config/" target="_blank" rel="noopener">nginx服务器安装及配置文件详解</a></p>
<p><a href="http://seanlook.com/2015/05/17/nginx-location-rewrite/" target="_blank" rel="noopener">nginx配置location总结及rewrite规则写法</a></p>
<p><a href="http://www.cnblogs.com/knowledgesea/p/5175711.html" target="_blank" rel="noopener">Nginx配置详解</a></p>
]]></content>
      <categories>
        <category>大后台</category>
      </categories>
      <tags>
        <tag>服务器</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Python爬虫入门</title>
    <url>/2016/11/24/python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><p>这几天闲的无聊想做一个爬虫来爬取一些‘正经’网站，首先选择用python作为爬虫的语言。但是没有接触过python怎么办呢，只能从头开始学了。<a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000" target="_blank" rel="noopener">python学习地址</a>这个是廖大神写的一个python入门，个人感觉写的非常不错，在粗略的学习了一遍之后感觉可以开始我的爬虫之旅了。</p>
<a id="more"></a>
<h3 id="静态网页爬虫"><a href="#静态网页爬虫" class="headerlink" title="静态网页爬虫"></a>静态网页爬虫</h3><p>目标：抓取<a href="http://tieba.baidu.com/p/2166231880中妹子的图片保存在本地" target="_blank" rel="noopener">http://tieba.baidu.com/p/2166231880中妹子的图片保存在本地</a><br>接下来分析一下我们需要做的事</p>
<ul>
<li>获取网页html代码</li>
<li>将html中的图片地址提取出来</li>
<li>根据图片地址获取图片内容</li>
<li>将图片保存在本地</li>
</ul>
<p>话不多少，直接上代码<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from urllib import request</span><br><span class="line">from html.parser import HTMLParser</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">class MyHtml(HTMLParser):</span><br><span class="line">    path=os.path.join(os.path.abspath(&apos;.&apos;),&apos;pic&apos;)</span><br><span class="line">    if not os.path.exists(path):</span><br><span class="line">        os.mkdir(path)</span><br><span class="line">    def handle_starttag(self,tag,attrs):</span><br><span class="line">        if tag==&apos;img&apos; and attrs[0][0]==&apos;pic_type&apos; and attrs[0][1]==&apos;0&apos;:</span><br><span class="line">            print(attrs[2][1])</span><br><span class="line">            with request.urlopen(attrs[2][1]) as picdate:</span><br><span class="line">                with open(os.path.join(self.path,attrs[2][1][-10:]),&apos;wb&apos;) as fd:</span><br><span class="line">                    fd.write(picdate.read())</span><br><span class="line">with request.urlopen(&apos;http://tieba.baidu.com/p/2166231880&apos;) as f:</span><br><span class="line">    if f.status==200:</span><br><span class="line">        parser=MyHtml()</span><br><span class="line">        parser.feed(f.read().decode(&apos;utf-8&apos;))</span><br><span class="line">    else:</span><br><span class="line">        print (&apos;url error&apos;)</span><br></pre></td></tr></table></figure></p>
<p>这一部分都比较简单，用urllib获取到页面信息后，通过HTMLParser对有用的信息进行提取，然后再使用urllib加载图片保存到本地</p>
<h3 id="获取含有js的复杂网页"><a href="#获取含有js的复杂网页" class="headerlink" title="获取含有js的复杂网页"></a>获取含有js的复杂网页</h3><p>通过上一个例子我们已经对爬虫的爬取过程有了一个初步的了解，接下来我们需要接受更大的世界了。<br>目标:<a href="https://mm.taobao.com/search_tstar_model.htm?spm=719.1001036.1998606017.2.pA4hNo" target="_blank" rel="noopener">https://mm.taobao.com/search_tstar_model.htm?spm=719.1001036.1998606017.2.pA4hNo</a><br>首先想到的是通过之前的经验，先获取html再从html中加载图片信息。<br><img src="https://www.sisyphuser.cn/image/mmhtml.png" alt="html"><br>但是通过查看网页的源码后就发现，原来网页上的那么多的妹子的图片居然一张也没有在源码中显示。看来原来爬取静态网页的方法已经不适用了，我们要使用其他的手段了。</p>
<p>分析出现上述结果是因为网页上的图片项都是通过js添加进去的，那么我们有两种方法来解决这个问题：</p>
<ol>
<li>分析js代码，找出添加的内容</li>
<li>先让js运行，我们从js处理完毕的html中获取我们想要的信息</li>
</ol>
<p>这里我们选择第二种方法，为了让js运行就需要一些工具<br>selenium+PhantomJS<br>selenium是一个自动化测试工具，可以同过 pip install selenium 来安装<br>PhantomJS其实就是一个浏览器，只是它没有界面，我们的js就是依赖它来执行的。<a href="http://phantomjs.org/download.html从这个地址下载，把其中的phantomjs.exe文件放在python目录下（确保你的python目录已经在环境变量中配置好了）" target="_blank" rel="noopener">http://phantomjs.org/download.html从这个地址下载，把其中的phantomjs.exe文件放在python目录下（确保你的python目录已经在环境变量中配置好了）</a></p>
<p>还有一个非常实用的爬虫工具需要安装pip install beautifulsoup4，这个是用来提取html元素的。如果不是很了解可以参考<a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html" target="_blank" rel="noopener">这篇</a>文章<br>好了，准备工作都做好了，可以开工了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from urllib import request</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">from selenium import webdriver</span><br><span class="line">import os</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">class MyHtml():</span><br><span class="line">	def __init__(self):</span><br><span class="line">		self.host=&apos;https://mm.taobao.com/search_tstar_model.htm?spm=719.1001036.1998606017.2.pA4hNo&apos;</span><br><span class="line">		self.path=os.path.join(os.path.abspath(&apos;.&apos;),&apos;mm&apos;)</span><br><span class="line">		if not os.path.exists(self.path):</span><br><span class="line">			os.mkdir(self.path)</span><br><span class="line">		self.browser=webdriver.PhantomJS()</span><br><span class="line">		self.count=0</span><br><span class="line"></span><br><span class="line">	def start(self,n=False):</span><br><span class="line">		if not n:</span><br><span class="line">		    print(self.host)</span><br><span class="line">		    self.browser.get(self.host)</span><br><span class="line">		print(&apos;第&apos;+str(self.count)+&apos;项&apos;)</span><br><span class="line">		self.soup=BeautifulSoup(self.browser.page_source)</span><br><span class="line">		for li in self.soup.find_all(&apos;li&apos;,class_=&apos;item&apos;):</span><br><span class="line">			self.img=li.find(&apos;img&apos;)</span><br><span class="line">			if self.img.has_attr(&apos;data-ks-lazyload&apos;):</span><br><span class="line">				self.src=&apos;https:&apos;+self.img[&apos;data-ks-lazyload&apos;]</span><br><span class="line">			else:</span><br><span class="line">				self.src=&apos;https:&apos;+self.img[&apos;src&apos;]</span><br><span class="line">			print(self.src)</span><br><span class="line">			self.name=str(li.find(&apos;span&apos;,class_=&apos;name&apos;).string)</span><br><span class="line">			try:</span><br><span class="line">				with request.urlopen(self.src) as pic:</span><br><span class="line">					if pic.status==200:</span><br><span class="line">						with open(os.path.join(self.path,self.name+&apos;.jpg&apos;),&apos;wb&apos;) as pici:</span><br><span class="line">							pici.write(pic.read())</span><br><span class="line">			except BaseException:</span><br><span class="line">				print(&apos;这个地址有问题&apos;)</span><br><span class="line">		if self.count&lt;10:#数据太多这里只取前十项</span><br><span class="line">			self.browser.find_element_by_class_name(&apos;page-next&apos;).click()</span><br><span class="line">			# time.sleep(3)</span><br><span class="line">			self.start(True)</span><br><span class="line">		self.count=self.count+1</span><br><span class="line"></span><br><span class="line">if &apos;__main__&apos;==__name__:</span><br><span class="line">	MyHtml().start()</span><br></pre></td></tr></table></figure>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>到这里我们已经知道了python爬虫的入门用法。但是我们发现这个爬虫的效率太低，这时可以用多线程提高爬虫效率。当同一个ip在一个网站访问频率太高时可能会出现验证码，这时需要做访问延迟和使用代理ip。爬虫路还很长，还有许多知识需要学习。</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>css 标签记录</title>
    <url>/2019/04/19/web%E8%8F%9C%E9%B8%9F%E4%B9%8Bcss/</url>
    <content><![CDATA[<p>记录一些常用的 css 标签<br><a id="more"></a></p>
 <figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*css设置标签的样式*/</span></span><br><span class="line">&lt;style type="text/css"&gt;</span><br><span class="line"><span class="selector-tag">span</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--在html中写入css--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color:red;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--引用外部css样式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"style.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>就近原则：那个 css 样式设置离元素近，就采用哪种样式</li>
</ul>
 <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*类选择器,类名前面个加.*/</span></span><br><span class="line"><span class="selector-class">.className</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
 <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*ID选择器，ID名称前加#*/</span></span><br><span class="line"><span class="selector-id">#idName</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
 <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*子选择器(第一代后代)，在标签、类、ID选择器后添加 &gt;选择器*/</span></span><br><span class="line"><span class="selector-class">.className</span>&gt;<span class="selector-tag">span</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>:<span class="number">1px</span> solid red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
 <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*后代选择器(所有后代),在标签、类、ID选择器后添加 (空格)选择器*/</span></span><br><span class="line"><span class="selector-class">.className</span> <span class="selector-tag">span</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>:<span class="number">1px</span> solid red</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
 <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*通用选择器，匹配所有元素*/</span></span><br><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
 <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*伪类选择器，给标签的某种状态设置样式*/</span></span><br><span class="line"><span class="comment">/*设置鼠标滑过a标签的样式*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
 <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*分组选择，给多组设置同一种样式*/</span></span><br><span class="line"><span class="selector-tag">a</span>,<span class="selector-class">.className</span>,<span class="selector-id">#id</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>css 的某些样式的某些特性具有继承性，如 p 标签的 color 属性</p>
</li>
<li><p>权重：标签选择器 1 ，类选择器 10，ID选择器100</p>
</li>
</ul>
 <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*插入important 浏览器采用当前样式*/</span></span><br><span class="line"><span class="selector-tag">p</span>&#123;<span class="attribute">color</span>:red<span class="meta">!important</span>;&#125;</span><br></pre></td></tr></table></figure>
 <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*设置字体样式,大小，颜色,粗体,斜体，下划线，删除线，缩进，行高，字母间距离，单词间距离，位置左中右*/</span></span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">font-family</span>:Microsoft Yahei;</span><br><span class="line">	<span class="attribute">font-size</span>:<span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">    <span class="attribute">font-weight</span>:bold;</span><br><span class="line">    <span class="attribute">font-style</span>:italic;</span><br><span class="line">    <span class="attribute">text-decoration</span>:underline;</span><br><span class="line">    <span class="attribute">text-decoration</span>:line-through;</span><br><span class="line">    <span class="attribute">text-indent</span>:<span class="number">2em</span>;</span><br><span class="line">    <span class="attribute">line-height</span>:<span class="number">2em</span>;</span><br><span class="line">    <span class="attribute">letter-spacing</span>:<span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">word-spacing</span>:<span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>:left,center,right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>常用块状元素：</p>
<ul>
<li>div , p , h1…h6 , ol , ul , dl , table , address , blockquote , form</li>
<li>a{display:block;} 将元素设置为块状元素</li>
<li>特点：<ul>
<li>每个块级元素都从新的一行开始，其后的元素也另起一行</li>
<li>元素的高度、宽度、行高、顶边距、底边距都可设置</li>
<li>元素宽度在不设置的情况下为父容器的100%</li>
</ul>
</li>
</ul>
</li>
<li><p>常用内联元素：</p>
<ul>
<li>a , span , br , i , em , strong , label , q , var , cire , code</li>
<li>div{display:inline;}将元素设置为内联元素</li>
<li>特点：<ul>
<li>和其他的元素在一行上</li>
<li>宽度、高度、顶边距、底边距不可设置</li>
<li>元素宽度就是内容宽度，不可改变</li>
</ul>
</li>
</ul>
</li>
<li><p>常用内联块状元素：</p>
<ul>
<li>img , input</li>
<li>a{display:inline-block;}将元素设置为内联块状元素</li>
<li>特点：<ul>
<li>和其他元素在一行上</li>
<li>宽度、高度、顶边距、底边距都可设置</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*盒模型边距*/</span></span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">border-width</span>:<span class="number">12px</span>;<span class="comment">/*边距大小*/</span></span><br><span class="line">    <span class="attribute">border-style</span>:solid;<span class="comment">/*边距样式，dashed虚线，dotted点线，solid实线*/</span></span><br><span class="line">    <span class="attribute">boder-color</span>:red;<span class="comment">/*颜色*/</span></span><br><span class="line">    <span class="comment">/*简写*/</span></span><br><span class="line">    <span class="attribute">border</span>:<span class="number">12px</span> solid red;</span><br><span class="line">    <span class="comment">/*单独设置一边*/</span></span><br><span class="line">    <span class="attribute">border-left</span>:<span class="number">1</span>;</span><br><span class="line">    <span class="attribute">border-top</span>:<span class="number">2</span>;</span><br><span class="line">    <span class="attribute">border-right</span>:<span class="number">3</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>:<span class="number">4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*填充 顺序为上、右、下、左*/</span></span><br><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">padding</span>:<span class="number">10px</span> <span class="number">2px</span> <span class="number">10px</span> <span class="number">2px</span>&#125;</span><br><span class="line"><span class="comment">/*边距 顺序为上、右、下、左*/</span></span><br><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">margin</span>:<span class="number">10px</span> <span class="number">2px</span> <span class="number">10px</span> <span class="number">2px</span>&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>css的3种基本布局模型: </p>
<ul>
<li><p>Flow 流动模型(网页默认布局)</p>
<ul>
<li>块状元素会自上而下按顺序垂直布局</li>
<li>内联元素从左至右水平布局</li>
</ul>
</li>
<li><p>Layer 浮动模型</p>
<ul>
<li>float:left/right, 可以使块级元素并排显示</li>
</ul>
</li>
<li><p>Float 层模式</p>
<ul>
<li><p>绝对定位(position:absolute)：相对于最近一个有定位属性的位置，浮动在元素之上</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">	<span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="attribute">right</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>相对定位(position:relative)：产生定位属性，元素相对于以前的位置产生了偏移，但是元素以前的位置还是保留着</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">	<span class="attribute">position</span>:relative;</span><br><span class="line">    <span class="attribute">right</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>固定定位(position:fixed)：与absolute类似，但是是相对网页窗口固定</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">	<span class="attribute">position</span>:fixed;</span><br><span class="line">    <span class="attribute">right</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
<li><p>可以使用 text-align:center 来实现子元素的居中，但当子元素是块状元素时不适用，使用 margin:auto 使其居中</p>
</li>
<li><p>水平居中的方法</p>
<ul>
<li>加入 table(包括 tbody , tr , td ) 标签作为父元素，table标签默认长度自适应</li>
<li>将块级元素改为 inline 类型，设置 text-align:center</li>
<li>通过给父元素设置<a href="http://www.imooc.com/code/2071" target="_blank" rel="noopener"> float</a>，然后给父元素设置 <a href="http://www.imooc.com/code/2074" target="_blank" rel="noopener">position:relative</a> 和 left:50%，子元素设置 position:relative 和 left: -50% 来实现水平居中。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Web前端</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>web</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML 标签记录</title>
    <url>/2019/04/19/web%E8%8F%9C%E9%B8%9F%E4%B9%8Bhtml/</url>
    <content><![CDATA[<p>记录一些常用的 HTML 标签<br><a id="more"></a></p>
<ul>
<li><p><code>&lt;title&gt; 在 &lt;head&gt; 中，标题栏文字</code></p>
</li>
<li><p><code>&lt;em&gt;斜体字&lt;/em&gt;</code></p>
</li>
<li><p><code>&lt;strong&gt;粗体字&lt;/strong&gt;</code></p>
</li>
<li><p><code>&lt;span&gt;无语义标签，用作单独设置样式&lt;/span&gt;</code></p>
</li>
<li><p><code>&lt;p&gt;段落标签&lt;/p&gt;</code> 在前后都会有空白</p>
</li>
<li><p><code>&lt;q&gt;引用，会自动加上双引号&lt;/q&gt;</code></p>
</li>
<li><p><code>&lt;blockquote&gt;引用，大段文本引用&lt;/blockquote&gt;</code></p>
</li>
<li><p><code>&lt;br&gt;换行符</code></p>
</li>
<li><p>&amp;nbsp；空格</p>
</li>
<li><p><code>&lt;hr&gt; 分隔横线</code></p>
</li>
<li><p><code>&lt;address&gt;定义地址，默认表现为斜体&lt;/address&gt;</code></p>
</li>
<li><p><code>&lt;code&gt;定义一行代码，样式改变&lt;/code&gt;</code></p>
</li>
<li><p><code>&lt;pre&gt;保留标签内的回车和空格&lt;/pre&gt;</code></p>
</li>
</ul>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">		无序列表，有黑点，没有序号</span><br><span class="line">	<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">		有序列表，前面有序号</span><br><span class="line">	<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--表格以table开始--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--tbody使表格能一块块地显示--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--显示行--&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--表头--&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">th</span>&gt;</span>head<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--显示单元格--&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">td</span>&gt;</span>content<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">summary</span>=<span class="string">"摘要，不显示方便搜索引擎查看"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">caption</span>&gt;</span>表格的标题<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p><code>&lt;a href=&quot;跳转的网址&quot; title=&quot;鼠标滑过显示&quot;&gt;页面显示&lt;/a&gt;</code></p>
</li>
<li><p><code>&lt;a href=&quot;网址&quot; target=&quot;_blank&quot;&gt;在新窗口中打开&lt;/a&gt;</code></p>
</li>
<li><p><code>&lt;a href=&quot;mailto:abc@163.com?cc=抄送地址&amp;bcc=秘密抄送地址&amp;subject=主题&amp;body=neirong&quot;&gt;打开outlook发邮件&lt;/a&gt;</code></p>
</li>
<li><p><code>&lt;img alt=&quot;图片加载失败显示&quot; src=&quot;图片地址&quot; title=&quot;鼠标滑过显示内容&quot;&gt;</code></p>
</li>
<li><p><code>&lt;form method=&quot;get/post&quot; action=&quot;请求地址&quot;&gt;&lt;/form&gt;</code></p>
</li>
<li><p><code>&lt;input type=&quot;输入类型&quot; name=&quot;上传参数名&quot; value=&quot;默认值&quot;&gt;</code> </p>
<ul>
<li>type: text,文本框输入；password,密码输入</li>
</ul>
</li>
<li><p><code>&lt;textarea  rows=&quot;行数&quot; cols=&quot;列数&quot;&gt;文本域&lt;/textarea&gt;</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"in_id"</span>&gt;</span>名称关联<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"in_id"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--label标签下的字段关联对应id标签，相当于对应标签的内容--&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p><code>&lt;input type=&quot;radio/checkbox&quot; value=&quot;选中提交的值&quot; name=&quot;字段名称&quot; checked=&quot;checked&quot;&gt;单选/多选&lt;/input&gt;</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!---multiple代表多选--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">multiple</span>=<span class="string">"multiple"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">selected</span>=<span class="string">"selected"</span>&gt;</span>下拉框选择<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p><code>&lt;input type=&quot;submit&quot; value=&quot;显示的文字&quot;/&gt;</code></p>
</li>
<li><p><code>&lt;input type=&quot;reset&quot; value=&quot;重置&quot;/&gt;</code></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Web前端</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>web</tag>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>关于键盘的一切</title>
    <url>/2016/09/09/%E5%85%B3%E4%BA%8E%E9%94%AE%E7%9B%98%E7%9A%84%E4%B8%80%E5%88%87/</url>
    <content><![CDATA[<h2 id="1-windowSoftInputMode设置"><a href="#1-windowSoftInputMode设置" class="headerlink" title="1.windowSoftInputMode设置"></a>1.windowSoftInputMode设置</h2><p>windowSoftInputMode的参数分为两种<br> <strong>限定进入Activity时键盘的状态(弹出还是隐藏)</strong><br>    stateUnspecified：未指定的默认状态<br>    stateUnchanged    ：不改变键盘的状态——与上一个界面的键盘状态相同<br>    stateHidden    ：隐藏键盘<br>    stateAlwaysHidden：隐藏键盘——进入下一个界面后返回还是隐藏键盘<br>    stateVisible    ：显示键盘<br>    stateAlwaysVisible：显示键盘——进入下一个界面后返回还是显示键盘<br> <strong>设置键盘弹出时页面布局的改变的状态</strong><br>    adjustUnspecified：未指定的默认状态，自动适配屏幕<br>    adjustResize    ：Activity的主窗口总是会被调整大小，从而保证软键盘显示空间，键盘作为布局的一部分来展示<br>    adjustPan    ：利用布局移动来保证输入框在视野范围内<br><a id="more"></a></p>
<h2 id="2-动态显示-隐藏键盘"><a href="#2-动态显示-隐藏键盘" class="headerlink" title="2.动态显示/隐藏键盘"></a>2.动态显示/隐藏键盘</h2><p><strong>显示键盘</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">editText.setFocusableInTouchMode(<span class="keyword">true</span>);</span><br><span class="line">editText.requestFocus();</span><br><span class="line">InputMethodManager inputManager =(InputMethodManager)editText.getContext().getSystemService(Context.INPUT_METHOD_SERVICE);</span><br><span class="line">inputManager.showSoftInput(editText, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>
<p><strong>隐藏键盘</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">InputMethodManager inputManager =(InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);</span><br><span class="line">inputManager.hideSoftInputFromWindow(getCurrentFocus().getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS);</span><br></pre></td></tr></table></figure>
<h2 id="3-键盘高度的监听"><a href="#3-键盘高度的监听" class="headerlink" title="3.键盘高度的监听"></a>3.键盘高度的监听</h2><p>当系统提供的adjustResize和adjustPan    不能满足页面布局设计的需求时可以通过监听键盘高度来动态改变布局<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> View decorView=  getWindow().getDecorView(); </span><br><span class="line">decorView.getViewTreeObserver().addOnGlobalLayoutListener(<span class="keyword">new</span> ViewTreeObserver.OnGlobalLayoutListener() &#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onGlobalLayout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		Rect rect=<span class="keyword">new</span> Rect();</span><br><span class="line">		decorView.getWindowVisibleDisplayFrame(rect);</span><br><span class="line">		<span class="keyword">int</span> displayHeight=rect.bottom;</span><br><span class="line">		<span class="keyword">int</span> height=decorView.getHeight();</span><br><span class="line">		<span class="keyword">int</span> keyboardHeight=height-displayHeight;</span><br><span class="line">		Log.i(<span class="string">"KEYBOARD"</span>,<span class="string">"键盘的高度是"</span>+keyboardHeight);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h2 id="4-改变键盘回车键显示和功能"><a href="#4-改变键盘回车键显示和功能" class="headerlink" title="4.改变键盘回车键显示和功能"></a>4.改变键盘回车键显示和功能</h2><p>有时候需要改变键盘回车键来实现搜索、发送、完成等功能。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//        et.setImeOptions(EditorInfo.IME_ACTION_DONE);//完成</span><br><span class="line">//        et.setImeOptions(EditorInfo.IME_ACTION_SEND);//发送</span><br><span class="line">//        et.setImeOptions(EditorInfo.IME_ACTION_SEARCH);//搜索</span><br><span class="line">//        et.setImeOptions(EditorInfo.IME_ACTION_GO);//前往</span><br><span class="line">//        et.setImeOptions(EditorInfo.IME_ACTION_NEXT);//下一项</span><br><span class="line">//        et.setImeOptions(EditorInfo.IME_ACTION_NONE);//默认</span><br><span class="line">//        et.setImeOptions(EditorInfo.IME_ACTION_PREVIOUS);//上一项</span><br><span class="line">        et.setImeOptions(EditorInfo.IME_ACTION_UNSPECIFIED);//未指明</span><br><span class="line">        et.setOnKeyListener(new View.OnKeyListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public boolean onKey(View view, int i, KeyEvent keyEvent) &#123;</span><br><span class="line">                if(i == KeyEvent.KEYCODE_ENTER &amp;&amp; keyEvent.getAction() == KeyEvent.ACTION_UP)&#123;</span><br><span class="line">                    Toast.makeText(MainActivity.this, &quot;按下了回车键&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line">                    return true;</span><br><span class="line">                &#125;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>最后，改变键盘回车键必须是singleLine的EditText才能实现</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>基础控件</tag>
        <tag>键盘</tag>
      </tags>
  </entry>
  <entry>
    <title>基于RxJava的RxBus</title>
    <url>/2017/03/08/%E5%9F%BA%E4%BA%8ERxJava%E7%9A%84RxBus/</url>
    <content><![CDATA[<p>RxBus是一个基于RxJava和RxAndroid的事件通讯工具</p>
<a id="more"></a>
<p>首先需要导入RxJava，RxAndroid库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">compile &apos;io.reactivex:rxandroid:1.2.1&apos;</span><br><span class="line">compile &apos;io.reactivex:rxjava:1.1.6&apos;</span><br></pre></td></tr></table></figure>
<p>RxBus基本代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class RxBus &#123;</span><br><span class="line">    private static volatile RxBus defaultInstance;</span><br><span class="line"></span><br><span class="line">    private Subject&lt;Object,Object&gt; bus;</span><br><span class="line">    public RxBus()&#123;</span><br><span class="line">        bus=new SerializedSubject&lt;&gt;(PublishSubject.create());</span><br><span class="line">    &#125;</span><br><span class="line">    //单例</span><br><span class="line">    public static RxBus getInstance()&#123;</span><br><span class="line">        if(defaultInstance==null)&#123;</span><br><span class="line">            synchronized(RxBus.class)&#123;</span><br><span class="line">                if(defaultInstance==null)&#123;</span><br><span class="line">                    defaultInstance=new RxBus();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return defaultInstance;</span><br><span class="line">    &#125;</span><br><span class="line">    //发送一个事件</span><br><span class="line">    public void post(Object o)&#123;</span><br><span class="line">        bus.onNext(o);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public &lt;T&gt; Observable&lt;T&gt; toObservable(Class&lt;T&gt; eventType)&#123;</span><br><span class="line">        return bus.ofType(eventType);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用</p>
<p> <strong>1. 发出事件</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Student s=new Student();</span><br><span class="line">s.setName(&quot;sss&quot;);</span><br><span class="line">RxBus.getInstance().post(s);</span><br></pre></td></tr></table></figure>
<p><strong>2.消费事件</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">subscribe = RxBus.getInstance().toObservable(Student.class)</span><br><span class="line">		//在io线程进行订阅，可以执行一些耗时操作</span><br><span class="line">		.subscribeOn(Schedulers.io())</span><br><span class="line">		//在主线程进行观察，可做UI更新操作</span><br><span class="line">		.observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">		//观察的对象</span><br><span class="line">		.subscribe(new Action1&lt;Student&gt;() &#123;</span><br><span class="line">		@Override</span><br><span class="line">		public void call(Student s) &#123;</span><br><span class="line">			Toast.makeText(MainActivity.this, s.getName(), Toast.LENGTH_SHORT).show();</span><br><span class="line">			&#125;</span><br><span class="line">     	&#125;);</span><br></pre></td></tr></table></figure>
<p><strong>3.在onDestory中移除订阅</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void onDestroy() &#123;</span><br><span class="line">    super.onDestroy();</span><br><span class="line">    if(!subscribe.isUnsubscribed()) &#123;</span><br><span class="line">        subscribe.unsubscribe();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>与EventBus相同RxBus也可以使用黏性事件<br>修改过后的支持黏性事件的RxBus</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class RxBus &#123;</span><br><span class="line">    private static volatile RxBus defaultInstance;</span><br><span class="line">    private final Map&lt;Class&lt;?&gt;,Object&gt; mStickyEventMap;</span><br><span class="line"></span><br><span class="line">    private Subject&lt;Object,Object&gt; bus;</span><br><span class="line">    public RxBus()&#123;</span><br><span class="line">        bus=new SerializedSubject&lt;&gt;(PublishSubject.create());</span><br><span class="line">        mStickyEventMap=new ConcurrentHashMap&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    //单例</span><br><span class="line">    public static RxBus getInstance()&#123;</span><br><span class="line">        if(defaultInstance==null)&#123;</span><br><span class="line">            synchronized(RxBus.class)&#123;</span><br><span class="line">                if(defaultInstance==null)&#123;</span><br><span class="line">                    defaultInstance=new RxBus();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return defaultInstance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 发送一个事件</span><br><span class="line">     * @param o</span><br><span class="line">     */</span><br><span class="line">    public void post(Object o)&#123;</span><br><span class="line">        bus.onNext(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public &lt;T&gt; Observable&lt;T&gt; toObservable(Class&lt;T&gt; eventType)&#123;</span><br><span class="line">        return bus.ofType(eventType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //sticky事件</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 发送sticky事件</span><br><span class="line">     * @param event</span><br><span class="line">     */</span><br><span class="line">    public void postSticky(Object event)&#123;</span><br><span class="line">        synchronized (mStickyEventMap)&#123;</span><br><span class="line">            mStickyEventMap.put(event.getClass(),event);</span><br><span class="line">        &#125;</span><br><span class="line">        post(event);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public &lt;T&gt; Observable&lt;T&gt; toObservableSticky(final Class&lt;T&gt; eventType)&#123;</span><br><span class="line">        synchronized (mStickyEventMap)&#123;</span><br><span class="line">            Observable&lt;T&gt; observable = bus.ofType(eventType);</span><br><span class="line">            final Object event=mStickyEventMap.get(eventType);</span><br><span class="line">            if(event!=null)&#123;</span><br><span class="line">                return observable.mergeWith(Observable.create(new Observable.OnSubscribe&lt;T&gt;() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void call(Subscriber&lt;? super T&gt; subscriber) &#123;</span><br><span class="line">                        subscriber.onNext(eventType.cast(event));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;));</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                return observable;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取sticky事件</span><br><span class="line">     * @param eventType</span><br><span class="line">     * @param &lt;T&gt;</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public &lt;T&gt; T getStickyEvent(Class&lt;T&gt; eventType)&#123;</span><br><span class="line">        synchronized(mStickyEventMap)&#123;</span><br><span class="line">            return eventType.cast(mStickyEventMap.get(eventType));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 移除指定的sticky事件</span><br><span class="line">     * @param eventType</span><br><span class="line">     * @param &lt;T&gt;</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public &lt;T&gt; T removeStickyEvent(Class&lt;T&gt; eventType)&#123;</span><br><span class="line">        synchronized (mStickyEventMap)&#123;</span><br><span class="line">            return eventType.cast(mStickyEventMap.remove(eventType));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 移除所有sticky事件</span><br><span class="line">     */</span><br><span class="line">    public void removeAllStickyEvents()&#123;</span><br><span class="line">        synchronized (mStickyEventMap)&#123;</span><br><span class="line">            mStickyEventMap.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>要发送黏性事件需要使用postSticky()发送事件使用toObservableSticky接受事件，与其他使用与普通事件相同</p>
<p>由于黏性事件保存在RxBus中，当不需要使用时除了要subscribe.unsubscribe()取消订阅还需要<br>RxBus.getInstance().removeStickyEvent(Class);移除粘性事件</p>
<p>关于RxJava中的异常<br>当RxJava中发生异常时会调用onError方法，并且结束整个订阅事件，这会导致之后发出的事件不能接受的问题，需要用try…catch…捕捉异常</p>
<p><strong>参考博客：</strong><br><a href="http://www.jianshu.com/p/ca090f6e2fe2/" target="_blank" rel="noopener">用RxJava实现事件总线(Event Bus)</a><br><a href="http://www.jianshu.com/p/71ab00a2677b" target="_blank" rel="noopener">[深入RxBus]：支持Sticky事件</a><br><a href="http://www.jianshu.com/p/0493cc28a811" target="_blank" rel="noopener">[深入RxBus]：异常处理</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>第三方框架</tag>
        <tag>RxJava</tag>
        <tag>RxAndroid</tag>
        <tag>事件通讯</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 识别文件编码</title>
    <url>/2019/08/12/%E6%96%87%E4%BB%B6%E7%BC%96%E7%A0%81/</url>
    <content><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>现有一个功能是用户上传一个 csv 文件到服务端。由于不想强制规定用户使用特定编码格式的文件（这样显得用户体验差），现需要能识别用户文件的编码格式来进行正确解码。这里只做 utf-8 和 gbk 的区分。</p>
<a id="more"></a>
<h2 id="读取BOM"><a href="#读取BOM" class="headerlink" title="读取BOM"></a>读取BOM</h2><p>首先什么是BOM。</p>
<blockquote>
<p>字节顺序标记（英语：byte-order mark，BOM）是位于码点U+FEFF的统一码字符的名称。当以UTF-16或UTF-32来将UCS/统一码字符所组成的字符串编码时，这个字符被用来标示其字节序。它常被用来当做标示文件是以UTF-8、UTF-16或UTF-32编码的标记。——<a href="https://zh.wikipedia.org/wiki/%E4%BD%8D%E5%85%83%E7%B5%84%E9%A0%86%E5%BA%8F%E8%A8%98%E8%99%9F" target="_blank" rel="noopener">维基百科</a></p>
</blockquote>
<p>简单来说就是在文件的开头会有几个特殊的字符来表明当前文件的编码格式，具体字符如图：<br><img src="https://i.loli.net/2019/08/12/bsyznFZAkSchLjd.png" alt="encode"></p>
<p>对于有 BOM 的文件可以先根据 BOM 来识别文件的编码格式。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">checkEncode</span><span class="params">(BufferedInputStream bis)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    bis.mark(<span class="number">0</span>);</span><br><span class="line">    String encodeType;</span><br><span class="line">    <span class="keyword">byte</span>[] head = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">3</span>];</span><br><span class="line">    bis.read(head);</span><br><span class="line">    <span class="comment">//FE FF</span></span><br><span class="line">    <span class="keyword">if</span> (head[<span class="number">0</span>] == -<span class="number">1</span> &amp;&amp; head[<span class="number">1</span>] == -<span class="number">2</span>) &#123;</span><br><span class="line">        encodeType = UTF16;</span><br><span class="line">        <span class="comment">//EF BB BF</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (head[<span class="number">0</span>] == -<span class="number">17</span> &amp;&amp; head[<span class="number">1</span>] == -<span class="number">69</span> &amp;&amp; head[<span class="number">2</span>] == -<span class="number">65</span>) &#123; </span><br><span class="line">        encodeType = UTF8;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> encodeType;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="查看字节规则"><a href="#查看字节规则" class="headerlink" title="查看字节规则"></a>查看字节规则</h2><p>对于没有 BOM 的文件，需要根据 utf8 和 gbk 的编码规则不同来区别。根据 utf8 的编码规则逐字节判断是否符合编码规范。如果都符合则确定文件为 utf8 编码，否则为 gbk 编码。<br>utf8 是一个字符由 1～4 个字节组成。一个字符的第一个字节标示了这个字符的字节个数，之后跟随的字节每一个都是<code>10</code>开头。具体如图<br><img src="https://i.loli.net/2019/08/12/IHQfub8XpYJAGlh.png" alt="utf8"><br>结合 BOM 和 编码判断的完成代码如下。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检查编码格式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckEncodeUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String UTF16 = <span class="string">"utf16"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String UTF8 = <span class="string">"utf8"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String GBK = <span class="string">"gbk"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查输入流的编码格式(utf8 gbk)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bis 需要是可reset的输入流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">checkEncode</span><span class="params">(BufferedInputStream bis)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        bis.mark(<span class="number">0</span>);</span><br><span class="line">        String encodeType;</span><br><span class="line">        <span class="keyword">byte</span>[] head = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">3</span>];</span><br><span class="line">        bis.read(head);</span><br><span class="line">        <span class="comment">//FE FF</span></span><br><span class="line">        <span class="keyword">if</span> (head[<span class="number">0</span>] == -<span class="number">1</span> &amp;&amp; head[<span class="number">1</span>] == -<span class="number">2</span>) &#123;</span><br><span class="line">            encodeType = UTF16;</span><br><span class="line">            <span class="comment">//EF BB BF</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (head[<span class="number">0</span>] == -<span class="number">17</span> &amp;&amp; head[<span class="number">1</span>] == -<span class="number">69</span> &amp;&amp; head[<span class="number">2</span>] == -<span class="number">65</span>) &#123; <span class="comment">//带BOM</span></span><br><span class="line">            encodeType = UTF8;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isUTF8(bis)) &#123;</span><br><span class="line">            encodeType = UTF8;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            encodeType = GBK;</span><br><span class="line">        &#125;</span><br><span class="line">        bis.reset();</span><br><span class="line">        <span class="keyword">return</span> encodeType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查是否符合 utf8 的编码格式</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> is</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isUTF8</span><span class="params">(InputStream is)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        is.reset();</span><br><span class="line">        <span class="keyword">int</span> code;</span><br><span class="line">        <span class="keyword">while</span> ((code = is.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> count = getBtyeCount(code);</span><br><span class="line">            <span class="keyword">if</span>(count==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(count &gt; <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!checkFollowByte(is, count))&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取每个字符所占字节数count</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getBtyeCount</span><span class="params">(<span class="keyword">int</span> code)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> state = code &amp; <span class="number">0b11111</span> &lt;&lt; <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">if</span> (state &gt; <span class="number">0b1111</span> &lt;&lt; <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (state == <span class="number">0b1111</span> &lt;&lt; <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (state &gt;= <span class="number">0b111</span> &lt;&lt; <span class="number">5</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (state &gt;= <span class="number">0b11</span> &lt;&lt; <span class="number">6</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        state = code &amp; <span class="number">0b1</span> &lt;&lt; <span class="number">7</span>;</span><br><span class="line">        <span class="keyword">if</span> (state == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查接下来的字节是否符合 utf8 规范 10xx xxxx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> is</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkFollowByte</span><span class="params">(InputStream is, <span class="keyword">int</span> count)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[count - <span class="number">1</span>];<span class="comment">//已经读取了一个字节，不能再读取</span></span><br><span class="line">        is.read(bytes);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">byte</span> b : bytes) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!((b &amp; <span class="number">0b11</span>&lt;&lt;<span class="number">6</span>) == <span class="number">0b10</span>&lt;&lt;<span class="number">6</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="关于-reset-的问题"><a href="#关于-reset-的问题" class="headerlink" title="关于 reset 的问题"></a>关于 reset 的问题</h2><p>在 SpringMVC 中文件上传使用的是 MultipartFile 。从 MultipartFile 中得到的 InputStream 不支持 <code>reset</code> 的方法，会出现 IOException 。这里解决的方法是每次都从 MultipartFile 中获取 InputStream ，而在 CheckEncodeUtil 用完的 Stream 直接关掉。部分修改如下<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">checkEncode</span><span class="params">(BufferedInputStream bis)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    String encodeType;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        bis.mark(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] head = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">3</span>];</span><br><span class="line">        bis.read(head);</span><br><span class="line">        <span class="comment">//FE FF</span></span><br><span class="line">        <span class="keyword">if</span> (head[<span class="number">0</span>] == -<span class="number">1</span> &amp;&amp; head[<span class="number">1</span>] == -<span class="number">2</span>) &#123;</span><br><span class="line">            encodeType = UTF16;</span><br><span class="line">            <span class="comment">//EF BB BF</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (head[<span class="number">0</span>] == -<span class="number">17</span> &amp;&amp; head[<span class="number">1</span>] == -<span class="number">69</span> &amp;&amp; head[<span class="number">2</span>] == -<span class="number">65</span>) &#123;</span><br><span class="line">            encodeType = UTF8;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isUTF8(bis)) &#123;</span><br><span class="line">            encodeType = UTF8;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            encodeType = GBK;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        bis.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> encodeType;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>大后台</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>编码</tag>
        <tag>UTF8</tag>
      </tags>
  </entry>
  <entry>
    <title>日/夜模式切换</title>
    <url>/2017/03/13/%E6%97%A5%E5%A4%9C%E6%A8%A1%E5%BC%8F%E5%88%87%E6%8D%A2/</url>
    <content><![CDATA[<p>日/夜模式切换作为一个App的基本功能经常会被使用到，接下来就举出一些常用的日/夜模式切换的方法</p>
<a id="more"></a>
<p><strong>使用UIMode的方法</strong><br>这种方式操作起来比较简单，就是将不同模式下的资源分开存放，然后调用方法切换资源即可</p>
<ul>
<li><em>资源存放的路径</em></li>
</ul>
<p><img src="https://www.sisyphuser.cn/image/UIMode_1.png" alt="pic"></p>
<p><img src="https://www.sisyphuser.cn/image/UIMode_2.png" alt="pic"></p>
<ul>
<li><em>切换资源的方法</em></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (isNight) &#123;</span><br><span class="line">	AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_YES);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">	AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_NO);</span><br><span class="line">&#125;</span><br><span class="line">recreate();</span><br></pre></td></tr></table></figure>
<p>其中AppCompatDelegate.MODE_NIGHT_YES代表切换到夜间模式，AppCompatDelegate.MODE_NIGHT_NO代表切换到日间模式<br>如果是在新的Activity中切换日/夜模式则需要用RxBus(关于RxBus的用法可以参照我上篇博客)通知在后台的Activity调用recreate()重启Activity</p>
<ul>
<li><em>最终效果</em></li>
</ul>
<p><img src="https://www.sisyphuser.cn/image/UIMode_3.gif" alt="gif"></p>
<ul>
<li><em>存在问题</em></li>
</ul>
<p>由于需要recreate(),会重绘Activity导致屏幕闪烁，重新加载Avtivity时需要注意Activity内元素的保存</p>
<p><strong>使用Theme</strong><br>通过切换不同的主题来实现切换日/夜模式的效果</p>
<ul>
<li><em>在attrs.xml中设置主题中需要替换资源</em></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;resources&gt;</span><br><span class="line">    &lt;attr name=&quot;bg&quot; format=&quot;color&quot;&gt;&lt;/attr&gt;</span><br><span class="line">    &lt;attr name=&quot;button_bg&quot; format=&quot;color&quot;&gt;&lt;/attr&gt;</span><br><span class="line">    &lt;attr name=&quot;button_tv&quot; format=&quot;color&quot;&gt;&lt;/attr&gt;</span><br><span class="line">&lt;/resources&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li><em>设置日/夜模式主题</em></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> &lt;style name=&quot;Day&quot; parent=&quot;AppTheme&quot;&gt;</span><br><span class="line">	&lt;item name=&quot;bg&quot;&gt;#FFFFFF&lt;/item&gt;</span><br><span class="line">	&lt;item name=&quot;button_bg&quot;&gt;#A9A9A9&lt;/item&gt;</span><br><span class="line">	&lt;item name=&quot;button_tv&quot;&gt;#000000&lt;/item&gt;</span><br><span class="line">	&lt;item name=&quot;colorPrimary&quot;&gt;@color/colorPrimary&lt;/item&gt;</span><br><span class="line">	&lt;item name=&quot;colorPrimaryDark&quot;&gt;@color/colorPrimaryDark&lt;/item&gt;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;style name=&quot;Night&quot; parent=&quot;AppTheme&quot;&gt;</span><br><span class="line">	&lt;item name=&quot;bg&quot;&gt;#4F4F4F&lt;/item&gt;</span><br><span class="line">	&lt;item name=&quot;button_bg&quot;&gt;#000000&lt;/item&gt;</span><br><span class="line">	&lt;item name=&quot;button_tv&quot;&gt;#FFFFFF&lt;/item&gt;</span><br><span class="line">	&lt;item name=&quot;colorPrimary&quot;&gt;#828282&lt;/item&gt;</span><br><span class="line">	&lt;item name=&quot;colorPrimaryDark&quot;&gt;#828282&lt;/item&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li><em>在layout文件中使用arrts中的资源属性</em></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">android:backgroundTint=&quot;?attr/button_bg&quot;</span><br></pre></td></tr></table></figure>
<ul>
<li><em>在Activity中切换主题</em></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> if(isNight)&#123;</span><br><span class="line">	setTheme(R.style.Night);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">	setTheme(R.style.Day);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>设置主题需要放在setContentView()之前，所以每次切换完日/夜模式后都需要重新加载Activity</p>
<ul>
<li><em>存在问题</em></li>
</ul>
<p>与UIMode方法相同由于需要recreate(),会重绘Activity导致屏幕闪烁，并且在有比较多的属性需要修改时会导致style比较复杂</p>
<p>为了决解改变日/夜模式后屏幕闪烁的问题，我看了不少博客，终于找到了一个比较符合要求的项目，能够实现uiMode方法的不重建Activity切换日/夜模式。<br>项目地址：<a href="https://github.com/geminiwen/SkinSprite" target="_blank" rel="noopener">https://github.com/geminiwen/SkinSprite</a></p>
<p>效果：<br><img src="https://www.sisyphuser.cn/image/Lib.gif" alt="gif"></p>
<p>具体思路是在Activity创建View的过程中注入自己的代码。<br>接下来分析一下这个lib的具体代码</p>
<ul>
<li><em>首先是SkinnableActivity，继承自AppCompatActivity，在这个Activity中对View的创建进行拦截，我们主要关注三个方法</em></li>
</ul>
<p>1)<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void onCreate(@Nullable Bundle savedInstanceState) &#123;</span><br><span class="line">	LayoutInflater layoutInflater = LayoutInflater.from(this);</span><br><span class="line">	LayoutInflaterCompat.setFactory(layoutInflater, this);</span><br><span class="line">	super.onCreate(savedInstanceState);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>注入自己的LayoutInflatorFactory，使inflate在这个LayoutInflaterFactory中执行</p>
<p>2)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">public View onCreateView(View parent, String name, Context context, AttributeSet attrs) &#123;</span><br><span class="line">	if (mSkinnableViewInflater == null) &#123;</span><br><span class="line">		mSkinnableViewInflater = new SkinnableViewInflater();</span><br><span class="line">	&#125;</span><br><span class="line">	final boolean isPre21 = Build.VERSION.SDK_INT &lt; 21;</span><br><span class="line">	final boolean inheritContext = isPre21 &amp;&amp; shouldInheritContext((ViewParent) parent);</span><br><span class="line">	return mSkinnableViewInflater.createView(parent, name, context, attrs, inheritContext,</span><br><span class="line">	isPre21, /* Only read android:theme pre-L (L+ handles this anyway) */</span><br><span class="line">	true, /* Read read app:theme as a fallback at all times for legacy reasons */</span><br><span class="line">	VectorEnabledTintResources.shouldBeUsed() /* Only tint wrap the context if enabled */</span><br><span class="line">	);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这是具体需要创建View的方法，可以看到他将具体的创建逻辑放到了SkinnableViewInflater中，这个类之后在做分析</p>
<p>3)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void setDayNightMode(@AppCompatDelegate.NightMode int nightMode) &#123;</span><br><span class="line">	final boolean isPost21 = Build.VERSION.SDK_INT &gt;= 21;</span><br><span class="line"></span><br><span class="line">	getDelegate().setLocalNightMode(nightMode);</span><br><span class="line"></span><br><span class="line">	if (isPost21) &#123;</span><br><span class="line">		applyDayNightForStatusBar();</span><br><span class="line">		applyDayNightForActionBar();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	View decorView = getWindow().getDecorView();</span><br><span class="line">	applyDayNightForView(decorView);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这是一个我们之后需要切换日夜模式需要调用的方法，其中主要调用逻辑有<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">getDelegate().setLocalNightMode(nightMode);</span><br></pre></td></tr></table></figure></p>
<p>对系统日/夜模式的资源进行切换</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (isPost21) &#123;</span><br><span class="line">	applyDayNightForStatusBar();</span><br><span class="line">	applyDayNightForActionBar();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果api等级大于等于21（即5.0及以上版本）则更换状态栏和标题栏资源<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">applyDayNightForView(decorView);</span><br></pre></td></tr></table></figure></p>
<p>对于内容中的日/夜资源进行切换，这个方法我们可以看下他的具体实现</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private void applyDayNightForView(View view) &#123;</span><br><span class="line">	if (view instanceof Skinnable) &#123;</span><br><span class="line">		Skinnable skinnable = (Skinnable) view;</span><br><span class="line">		if (skinnable.isSkinnable()) &#123;</span><br><span class="line">			skinnable.applyDayNight();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	if (view instanceof ViewGroup) &#123;</span><br><span class="line">		ViewGroup parent = (ViewGroup)view;</span><br><span class="line">		int childCount = parent.getChildCount();</span><br><span class="line">		for (int i = 0; i &lt; childCount; i++) &#123;</span><br><span class="line">			applyDayNightForView(parent.getChildAt(i));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到这是一个递归的方法，功能是遍历了view下所有的子view，对实现了Skinnable接口并且isSkinnable()返回true的view调用applyDayNight()。可以猜想到这些View就是自定义的View，这个applyDayNight()就是刷新View中资源的方法。</p>
<ul>
<li><em>接下来可以看下上面的SkinnableViewInflater这个类</em></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public final View createView(View parent, final String name, @NonNull Context context,@NonNull AttributeSet attrs, boolean inheritContext,boolean readAndroidTheme, boolean readAppTheme, boolean wrapContext) &#123;</span><br><span class="line">    final Context originalContext = context;</span><br><span class="line"></span><br><span class="line">    // We can emulate Lollipop&apos;s android:theme attribute propagating down the view hierarchy</span><br><span class="line">    // by using the parent&apos;s context</span><br><span class="line">    if (inheritContext &amp;&amp; parent != null) &#123;</span><br><span class="line">        context = parent.getContext();</span><br><span class="line">    &#125;</span><br><span class="line">    if (readAndroidTheme || readAppTheme) &#123;</span><br><span class="line">        // We then apply the theme on the context, if specified</span><br><span class="line">        context = themifyContext(context, attrs, readAndroidTheme, readAppTheme);</span><br><span class="line">    &#125;</span><br><span class="line">    if (wrapContext) &#123;</span><br><span class="line">        context = TintContextWrapper.wrap(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    View view = null;</span><br><span class="line"></span><br><span class="line">    // We need to &apos;inject&apos; our tint aware Views in place of the standard framework versions</span><br><span class="line">    switch (name) &#123;</span><br><span class="line">        case &quot;TextView&quot;:</span><br><span class="line">            view = new SkinnableTextView(context, attrs);</span><br><span class="line">            break;</span><br><span class="line">        case &quot;ImageView&quot;:</span><br><span class="line">            view = new AppCompatImageView(context, attrs);</span><br><span class="line">            break;</span><br><span class="line">        case &quot;Button&quot;:</span><br><span class="line">            view = new SkinnableButton(context, attrs);</span><br><span class="line">            break;</span><br><span class="line">        case &quot;EditText&quot;:</span><br><span class="line">            view = new AppCompatEditText(context, attrs);</span><br><span class="line">            break;</span><br><span class="line">        case &quot;Spinner&quot;:</span><br><span class="line">            view = new AppCompatSpinner(context, attrs);</span><br><span class="line">            break;</span><br><span class="line">        case &quot;ImageButton&quot;:</span><br><span class="line">            view = new AppCompatImageButton(context, attrs);</span><br><span class="line">            break;</span><br><span class="line">        case &quot;CheckBox&quot;:</span><br><span class="line">            view = new AppCompatCheckBox(context, attrs);</span><br><span class="line">            break;</span><br><span class="line">        case &quot;RadioButton&quot;:</span><br><span class="line">            view = new AppCompatRadioButton(context, attrs);</span><br><span class="line">            break;</span><br><span class="line">        case &quot;CheckedTextView&quot;:</span><br><span class="line">            view = new AppCompatCheckedTextView(context, attrs);</span><br><span class="line">            break;</span><br><span class="line">        case &quot;AutoCompleteTextView&quot;:</span><br><span class="line">            view = new AppCompatAutoCompleteTextView(context, attrs);</span><br><span class="line">            break;</span><br><span class="line">        case &quot;MultiAutoCompleteTextView&quot;:</span><br><span class="line">            view = new AppCompatMultiAutoCompleteTextView(context, attrs);</span><br><span class="line">            break;</span><br><span class="line">        case &quot;RatingBar&quot;:</span><br><span class="line">            view = new AppCompatRatingBar(context, attrs);</span><br><span class="line">            break;</span><br><span class="line">        case &quot;SeekBar&quot;:</span><br><span class="line">            view = new AppCompatSeekBar(context, attrs);</span><br><span class="line">            break;</span><br><span class="line">        case &quot;LinearLayout&quot;:</span><br><span class="line">            view = new SkinnableLinearLayout(context, attrs);</span><br><span class="line">            break;</span><br><span class="line">        case &quot;FrameLayout&quot;:</span><br><span class="line">            view = new SkinnableFrameLayout(context, attrs);</span><br><span class="line">            break;</span><br><span class="line">        case &quot;RelativeLayout&quot;:</span><br><span class="line">            view = new SkinnableRelativeLayout(context, attrs);</span><br><span class="line">            break;</span><br><span class="line">        case &quot;android.support.v7.widget.Toolbar&quot;:</span><br><span class="line">            view = new SkinnableToolbar(context, attrs);</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (view == null &amp;&amp; originalContext != context) &#123;</span><br><span class="line">        // If the original context does not equal our themed context, then we need to manually</span><br><span class="line">        // inflate it using the name so that android:theme takes effect.</span><br><span class="line">        view = createViewFromTag(context, name, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (view != null) &#123;</span><br><span class="line">        // If we have created a view, check it&apos;s android:onClick</span><br><span class="line">        checkOnClickListener(view, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return view;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个是SkinnableViewInflater中最主要的方法，根据name创建出不同的View，即自定义的View，这里并没有把所有的view都做出来，但是都大同小异，如果不够用还可以自己添加</p>
<ul>
<li><em>最后只剩下View的没有看了，由于View比较多而且其中的内容都相似，我们拿SkinnableLinearLayout作为案例进行研究</em></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public SkinnableLinearLayout(Context context, AttributeSet attrs, int defStyleAttr) &#123;</span><br><span class="line">    super(context, attrs, defStyleAttr);</span><br><span class="line"></span><br><span class="line">    mAttrsHelper = new AttrsHelper();</span><br><span class="line">    TypedArray a = context.obtainStyledAttributes(attrs,</span><br><span class="line">            R.styleable.SkinnableView,</span><br><span class="line">            defStyleAttr, 0);</span><br><span class="line">    mAttrsHelper.storeAttributeResource(a, R.styleable.SkinnableView);</span><br><span class="line">    a.recycle();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void applyDayNight() &#123;</span><br><span class="line">    Context context = getContext();</span><br><span class="line">    int key;</span><br><span class="line"></span><br><span class="line">    key = R.styleable.SkinnableView[R.styleable.SkinnableView_android_background];</span><br><span class="line">    int backgroundResource = mAttrsHelper.getAttributeResource(key);</span><br><span class="line">    if (backgroundResource &gt; 0) &#123;</span><br><span class="line">        Drawable background = ContextCompat.getDrawable(context, backgroundResource);</span><br><span class="line">        if (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.JELLY_BEAN) &#123;</span><br><span class="line">            setBackgroundDrawable(background);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            setBackground(background);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>SkinnableLinearLayout中的思路也比较简单，在构造方法中向mAttrsHelper添加如属性，在需要刷新是再从mAttrsHelper中取出。对于不同的View也只是属性的内容不同而已</p>
<p>至此就是这个项目的大致源码，然后只需要将Activity继承SkinnableActivity,将uiMode中的<br>AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_YES);<br>改为<br> setDayNightMode(AppCompatDelegate.MODE_NIGHT_YES);<br> 并且不需要调用recreate()方法。需要注意的是还需要在该Activity中添加上android:configChanges=”uiMode”。</p>
<p>结语：这是我第一次写关于阅读源码的博客，尽管选了一个比较简单的lib但还是表达得比较凌乱。我之后还是会多多尝试写这方面的博客，努力提高自己的水平。</p>
<p><strong>参考博客：</strong><br><a href="https://segmentfault.com/a/1190000005736047" target="_blank" rel="noopener">android 实现【夜晚模式】的另外一种思路</a><br><a href="http://blog.csdn.net/u012572538/article/details/38726549" target="_blank" rel="noopener">Android通过改变主题实现夜间模式</a><br><a href="http://www.jb51.net/article/93852.htm" target="_blank" rel="noopener">Android实现日夜间模式的深入理解</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>消息队列 RabbitMQ（上）</title>
    <url>/2020/07/04/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%20RabbitMQ%20(%E4%B8%8A)/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>消息队列可以帮助我们实现异步处理、应用解耦、流量削峰、消息通讯等功能。RabbitMQ 是一个由 Erlang 语言开发的 AMQP 的开源实现。</p>
<div align="center"><br>    <img style="width:250px" src="https://www.sisyphuser.cn/pic/rabbit_logo.png"><br></div>

<a id="more"></a>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>笔者采用的是 Docker 来安装 RabbitMQ，关于 Docker 的使用可以参照前几遍博客。<br><br>首先找到镜像相关地址 <a href="https://hub.docker.com/_/rabbitmq" target="_blank" rel="noopener">https://hub.docker.com/_/rabbitmq</a> , 选择需要的镜像。我选择的是 <code>rabbitmq:3-management</code> ，该镜像包括了管理页面和主应用。<br><br>启动命令 <code>docker run -d --hostname my-rabbit --name some-rabbit -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin -p 15672:15672 -p 5672:5672 -v &lt;data_dir&gt;:/var/lib/rabbitmq rabbitmq:3-management</code> <br><br>其中 <code>RABBITMQ_DEFAULT_USER=admin</code> 是账号，<code>RABBITMQ_DEFAULT_PASS=admin</code> 是密码，<code>-p 15672:15672 -p 5672:5672</code> 配置了映射端口（15672为管理界面端口，5672为通信端口），<code>-v &lt;data_dir&gt;:/var/lib/rabbitmq</code> 配置数据保存地址(<code>&lt;data_dir&gt;</code> 为宿主机上文件位置)<br></p>
<p>进入 localhost:15672 能看到登录页面即启动成功</p>
<div align="center"><br>    <img src="https://www.sisyphuser.cn/pic/rabbitmq_01.png"><br></div>

<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="SpringBoot-中应用"><a href="#SpringBoot-中应用" class="headerlink" title="SpringBoot 中应用"></a>SpringBoot 中应用</h3><p>添加依赖：<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 添加springboot对amqp的支持 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 配置地址参数</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  rabbitmq:</span></span><br><span class="line"><span class="attr">    host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">5672</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">admin</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">admin</span></span><br><span class="line"><span class="attr">    virtual-host:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure>
<p>更多参数可以参考 <a href="https://github.com/spring-projects/spring-boot/blob/v2.3.1.RELEASE/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitProperties.java" target="_blank" rel="noopener">RabbitProperties</a><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//动态创建新的交换机、消息队列和绑定</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMQConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"q01"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">queueBuild1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">"queue_01"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"q02"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">queueBuild2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">"queue_02"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DirectExchange <span class="title">exchangeBuild</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(<span class="string">"testExchange"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"b01"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">bindingBuild1</span><span class="params">( @Qualifier(<span class="string">"q01"</span>)</span>Queue queue, DirectExchange exchanges) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue).to(exchanges).with(<span class="string">"demo_key_01"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"b02"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">bindingBuild2</span><span class="params">( @Qualifier(<span class="string">"q02"</span>)</span>Queue queue, DirectExchange exchanges) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue).to(exchanges).with(<span class="string">"demo_key_02"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//发送消息</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RabbitTemplate template;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sengMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    template.convertAndSend(<span class="string">"testExchange"</span>, <span class="string">"demo_key_01"</span>, <span class="string">"init_message"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="接收消息"><a href="#接收消息" class="headerlink" title="接收消息"></a>接收消息</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener</span>(queues = <span class="string">"queue_01"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queueTest</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Receiver"</span> + message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.jianshu.com/p/2e6280ab2bc9" target="_blank" rel="noopener">SpringBoot RabbitMQ</a><br><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-amqp" target="_blank" rel="noopener">AMQP</a><br></p>
]]></content>
      <categories>
        <category>大后台</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>消息队列</tag>
        <tag>AMQP</tag>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>消息队列 RabbitMQ（下）</title>
    <url>/2020/07/05/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%20RabbitMQ%20(%E4%B8%8B)/</url>
    <content><![CDATA[<h2 id="四种交换机类型"><a href="#四种交换机类型" class="headerlink" title="四种交换机类型"></a>四种交换机类型</h2><p>RabbitMQ 根据路由方式的不同，有四种交换机类型直连交换机、扇形交换机、主题交换机和首部交换机。</p>
<a id="more"></a>
<h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><ul>
<li><strong>交换机（Exchange）</strong><br>  用于接收生产者发布的消息，根据 Exchange 的类型和消息类型不同转发给对应的 Queue 。</li>
<li><strong>消息队列（Queue）</strong><br>  用于接收和储存消息，消费者也从对应的队列中获取消息。</li>
<li><strong>路由键（RoutingKey）</strong><br>  用于 Exchange 和 Queue 之间的绑定，Exchange 根据路由键决定将消息转发到哪几个 Queue。<div align="center"><br>  <img src="https://www.sisyphuser.cn/pic/rabbitmq_spring_01.png"><br></div>

</li>
</ul>
<h3 id="直连交换机（Direct-Exchange）"><a href="#直连交换机（Direct-Exchange）" class="headerlink" title="直连交换机（Direct Exchange）"></a>直连交换机（Direct Exchange）</h3><p>直连交换机是 RabbitMQ 默认的交换机。他将一个队列通过路由键绑定到一个交换机上。只有完全匹配的路由键消息才会被转发到绑定的队列。</p>
<h3 id="扇形交换机（Fanout-Exchange）"><a href="#扇形交换机（Fanout-Exchange）" class="headerlink" title="扇形交换机（Fanout Exchange）"></a>扇形交换机（Fanout Exchange）</h3><p>扇形交换机会将路由键忽略，将接收到的消息转发到了所有队列上。</p>
<h3 id="主题交换机（Topic-Exchange）"><a href="#主题交换机（Topic-Exchange）" class="headerlink" title="主题交换机（Topic Exchange）"></a>主题交换机（Topic Exchange）</h3><p>主题交换机将接收的消息转发到匹配的队列上，可使用 <code>#*</code> 做多个和单个字符的匹配。</p>
<h3 id="首部交换机（Headers-Exchange）"><a href="#首部交换机（Headers-Exchange）" class="headerlink" title="首部交换机（Headers Exchange）"></a>首部交换机（Headers Exchange）</h3><p>无路由键概念，以 header 和 message 中的消息匹配为准。</p>
<h2 id="六种模式"><a href="#六种模式" class="headerlink" title="六种模式"></a>六种模式</h2><h3 id="默认模式（单发送、单接收）"><a href="#默认模式（单发送、单接收）" class="headerlink" title="默认模式（单发送、单接收）"></a>默认模式（单发送、单接收）</h3><div align="center"><br>    <img src="https://www.sisyphuser.cn/pic/rabbitmq_02.png"><br></div>

<p>这个一个最简单的发送消息的模式，生产者通过一个默认的交换机（Direct Exchange）将消息转发到对应的消息队列，消费者从消息队列接收消息。</p>
<ul>
<li><p>配置信息</p>
  <figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">rabbitmq:</span></span><br><span class="line"><span class="attr">    host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">5672</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">admin</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">admin</span></span><br><span class="line"><span class="attr">    virtual-host:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>新建一个消息队列（没有绑定的消息队列默认与 (AMQP default) 交换机绑定，路由键为消息队列的名称）</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMQConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">queueBuild2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">"test_queue"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>发送消息</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AmqpTemplate template;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sengMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//不需要设置 Exchange 名称</span></span><br><span class="line">    template.convertAndSend(<span class="string">"test_queue"</span>, <span class="string">"Hello World!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>接收消息</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener</span>(queues = <span class="string">"test_queue"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queueTest</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Receiver"</span> + message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="work-模式"><a href="#work-模式" class="headerlink" title="work 模式"></a>work 模式</h3><div align="center"><br>    <img src="https://www.sisyphuser.cn/pic/rabbitmq_03.png"><br></div>

<p>主要应用于避免立即执行资源密集型任务，可以安排任务在稍后完成。work 模式的相关设置与默认模式相似。</p>
<ul>
<li><p>公平派遣和循环派遣</p>
<p>  在默认情况下 RabbitMQ 将按顺序将消息循环发给每一个消费者，这会导致由于每个任务状况不同，某些任务很重而一些很轻，使得某些消费者在一直工作而一些则闲置。此时需要设置 <code>PrefetchCount=1</code> 使队列每次只发送一个消息给消费者，防止出现某些消费者任务过重而某些没有任务的情况。但 <code>PrefetchCount=1</code> 的策略过于保守，严重限制了消费者的吞吐量，可以适当放宽限制。</p>
</li>
<li><p>创建消费者</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMQConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConnectionFactory <span class="title">connectionFactory</span><span class="params">()</span></span>&#123;</span><br><span class="line">        CachingConnectionFactory factory = <span class="keyword">new</span> CachingConnectionFactory();</span><br><span class="line">        factory.setUri(<span class="string">"amqp://admin:admin@127.0.0.1:5672"</span>);</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//自定义 RabbitListenerContainerFactory </span></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"workListenerFactory"</span>)</span><br><span class="line">    <span class="keyword">public</span> RabbitListenerContainerFactory&lt;?&gt; rabbitListenerContainerFactory(ConnectionFactory connectionFactory)&#123;</span><br><span class="line">        SimpleRabbitListenerContainerFactory factory = <span class="keyword">new</span> SimpleRabbitListenerContainerFactory();</span><br><span class="line">        factory.setConnectionFactory(connectionFactory);</span><br><span class="line">        <span class="comment">// 设置 PrefetchCount 为 1</span></span><br><span class="line">        factory.setPrefetchCount(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//申明消息接收，指定对应的 containerFactory</span></span><br><span class="line">    <span class="meta">@RabbitListener</span>(queues = <span class="string">"test_queue"</span>, containerFactory = <span class="string">"workListenerFactory"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queueTest</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">4000</span>);</span><br><span class="line">            System.out.println(<span class="string">"Receiver——001 "</span> + message);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>队列持久化</p>
<p>  在官方的 work 模式中提到了为了保障消息的不丢失需要对队列和消息都做持久化处理，在 Spring AMQP 中默认所有的队列和消息都是持久化的。下面在 SpringBoot 集成中新建一个持久化队列和一个非持久化队列。</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMQConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 持久化队列，默认第二个参数不填也是true</span></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"durable"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">queueBuild2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">"blog_queue_durable"</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  非持久化队列</span></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"undurable"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">queueBuild3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">"blog_queue_undurable"</span>,<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  在 RabbitMQ 管理页面中非持久化队列没有 <code>D</code> 标示。</p>
  <div align="center"><br>      <img src="https://www.sisyphuser.cn/pic/rabbitmq_08.png"><br>  </div>
</li>
<li><p>消息持久化</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AmqpTemplate template;</span><br><span class="line"><span class="comment">// 默认模式发送的消息即为持久化消息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sendPersistentMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    template.convertAndSend(<span class="string">""</span>, <span class="string">"blog_queue_durable"</span>, <span class="string">"persistentMessage"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 非持久化消息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sendNonPersistentMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    org.springframework.amqp.core.MessageProperties messageProperties = <span class="keyword">new</span> org.springframework.amqp.core.MessageProperties();</span><br><span class="line">    messageProperties.setContentType(<span class="string">"text/plain"</span>);</span><br><span class="line">    <span class="comment">// 设置消息类型为非持久化消息</span></span><br><span class="line">    messageProperties.setDeliveryMode(MessageDeliveryMode.NON_PERSISTENT);</span><br><span class="line">    messageProperties.setPriority(<span class="number">0</span>);</span><br><span class="line">    messageProperties.setContentEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">    Message message = <span class="keyword">new</span> Message(<span class="string">"message NON_PERSISTENT"</span>.getBytes(), messageProperties);</span><br><span class="line">    template.send(<span class="string">"blog_queue_durable"</span>,message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  将消息标记为持久化并不能完全保证消息不会丢失，如果需要得到完全可靠保证，可以使用发布者确认模式。<a href="https://www.rabbitmq.com/confirms.html" target="_blank" rel="noopener">https://www.rabbitmq.com/confirms.html</a></p>
</li>
</ul>
<h3 id="Publish-Subscribe-模式"><a href="#Publish-Subscribe-模式" class="headerlink" title="Publish/Subscribe 模式"></a>Publish/Subscribe 模式</h3><div align="center"><br>    <img src="https://www.sisyphuser.cn/pic/rabbitmq_04.png"><br></div>

<p>由上图可知该模式是由 Exchange 传给所有的队列，即为扇形交换机（Fanout Exchange）。</p>
<ul>
<li><p>创建交换机和队列</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMQConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FanoutExchange <span class="title">fanout</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FanoutExchange(<span class="string">"blog_fanout"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 匿名队列，（非持久、排他、自动删除），当没有客户端连接到队列时队列就会被删除</span></span><br><span class="line">    <span class="comment">// 也可以使用默认的普通队列</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">autoDeleteQueue1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AnonymousQueue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">autoDeleteQueue2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AnonymousQueue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//由于是扇形交换机，绑定的时候不需要 RoutingKey</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">binding1</span><span class="params">(FanoutExchange fanout,Queue autoDeleteQueue1)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(autoDeleteQueue1).to(fanout);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">binding2</span><span class="params">(FanoutExchange fanout,Queue autoDeleteQueue2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(autoDeleteQueue2).to(fanout);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>发送 Fanout 消息</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AmqpTemplate template;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">publishSubscribeTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    template.convertAndSend(<span class="string">"blog_fanout"</span>, <span class="string">""</span>, <span class="string">"fanout test message"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>接收消息</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener</span>(queues = <span class="string">"#&#123;autoDeleteQueue1.name&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fanoutQueue01</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"queue01:"</span> + message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="routing模式"><a href="#routing模式" class="headerlink" title="routing模式"></a>routing模式</h3><div align="center"><br>    <img src="https://www.sisyphuser.cn/pic/rabbitmq_05.png"><br></div>

<div align="center"><br>    <img src="https://www.sisyphuser.cn/pic/rabbitmq_09.png"><br></div>

<p>该模式即使用 Direct Exchange，将每个队列都通过路由键绑定到交换机上，以实现精准推送。同一个路由键可以被使用多次，一个队列也可以被多个路由键绑定。</p>
<ul>
<li><p>创建交换机和队列</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMQConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DirectExchange <span class="title">direct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(<span class="string">"blog_direct"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">autoDeleteQueue1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AnonymousQueue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">autoDeleteQueue2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AnonymousQueue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">binding1</span><span class="params">(DirectExchange direct, Queue autoDeleteQueue1)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(autoDeleteQueue1).to(direct).with(<span class="string">"black"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  再次新建一个 black 的 RoutingKey 绑定 autoDeleteQueue2 和 direct</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">binding2</span><span class="params">(DirectExchange direct, Queue autoDeleteQueue2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(autoDeleteQueue2).to(direct).with(<span class="string">"black"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">binding3</span><span class="params">(DirectExchange direct, Queue autoDeleteQueue2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(autoDeleteQueue2).to(direct).with(<span class="string">"green"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>发送消息</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AmqpTemplate template;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">routingTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">    template.convertAndSend(<span class="string">"blog_direct"</span>,<span class="string">"black"</span>, <span class="string">"routing key: black"</span>);</span><br><span class="line">    template.convertAndSend(<span class="string">"blog_direct"</span>,<span class="string">"green"</span>, <span class="string">"routing key: green"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="topic模式"><a href="#topic模式" class="headerlink" title="topic模式"></a>topic模式</h3><div align="center"><br>    <img src="https://www.sisyphuser.cn/pic/rabbitmq_06.png"><br></div>

<p>主题模式即使用了主题交换机，他的 RoutingKey 使用了多个单词用 <code>.</code> 分割。使用带 <code>*</code> 和 <code>#</code> 的 Key 绑定交换机和队列（<code>*</code>匹配单个单词，<code>#</code>匹配零个或多个单词）。在发送消息时需要使用完整的单词组，交换机根据对应的匹配关系转发到相应队列。</p>
<ul>
<li><p>创建交换机和队列</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMQConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TopicExchange <span class="title">topic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TopicExchange(<span class="string">"blog_topic"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">autoDeleteQueue1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AnonymousQueue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">autoDeleteQueue2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AnonymousQueue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">binding1</span><span class="params">(TopicExchange topic, Queue autoDeleteQueue1)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(autoDeleteQueue1).to(topic).with(<span class="string">"*.orange.*"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">binding2</span><span class="params">(TopicExchange topic, Queue autoDeleteQueue2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(autoDeleteQueue2).to(topic).with(<span class="string">"*.*.rabbit"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">binding3</span><span class="params">(TopicExchange topic, Queue autoDeleteQueue2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(autoDeleteQueue2).to(topic).with(<span class="string">"lazy.#"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="RPC模式"><a href="#RPC模式" class="headerlink" title="RPC模式"></a>RPC模式</h3><div align="center"><br>    <img src="https://www.sisyphuser.cn/pic/rabbitmq_07.png"><br></div>

<p>如果需要在远程上计算并等待结果返回，这种模式称为远程调用或 <code>RPC</code>。在此模式用使用的是 Direct 交换机。</p>
<ul>
<li><p>创建交换机和队列</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMQConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DirectExchange <span class="title">directExchange</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(<span class="string">"rpc_direct"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">autoDeleteQueue1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">"rpc_queue"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">binding1</span><span class="params">(DirectExchange rpc, Queue autoDeleteQueue1)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(autoDeleteQueue1).to(rpc).with(<span class="string">"rpc"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>发送接收消息</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">// 接收消息</span></span><br><span class="line"><span class="meta">@RabbitListener</span>(queues = <span class="string">"#&#123;autoDeleteQueue1.name&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fanoutQueue01</span><span class="params">(<span class="keyword">int</span> message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"queue01:"</span> + message);</span><br><span class="line">        <span class="keyword">return</span> message + <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AmqpAdmin amqpAdmin;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送消息</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rpcTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = (<span class="keyword">int</span>)template.convertSendAndReceive(<span class="string">"rpc_direct"</span>, <span class="string">"rpc"</span>, <span class="number">91</span>);</span><br><span class="line">        println(result);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/wuhenzhidu/p/10801103.html" target="_blank" rel="noopener">RabbitMQ指南之四</a><br><a href="https://www.jianshu.com/p/469f4608ce5d" target="_blank" rel="noopener">RabbitMQ的四种交换机</a><br><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-application" target="_blank" rel="noopener">Spring Boot Features</a><br><a href="https://www.rabbitmq.com/getstarted.html" target="_blank" rel="noopener">RabbitMQ</a><br><a href="https://docs.spring.io/spring-amqp/reference/#async-consumer" target="_blank" rel="noopener">Spring-AMQP</a><br></p>
]]></content>
      <categories>
        <category>大后台</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>消息队列</tag>
        <tag>AMQP</tag>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>生成唯一邀请码</title>
    <url>/2020/02/25/%E7%94%9F%E6%88%90%E5%94%AF%E4%B8%80%E9%82%80%E8%AF%B7%E7%A0%81/</url>
    <content><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><ul>
<li>现在每一个用户有一个邀请码</li>
<li>邀请码唯一</li>
<li>不能太长</li>
</ul>
<a id="more"></a>
<h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><ul>
<li><p>根据 ID 的编码<br>首先想到的是根据用户的 ID 对其进行进制转化，生成一个同样唯一的 code。根据邀请码的长度会有用户个数限制。<br></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一个由大写字母和数字组成的编码串</span></span><br><span class="line">String baseCode = <span class="string">"ABCDEFGHJKLMNPQRSTUVWXYZ23456789"</span>;</span><br><span class="line"><span class="comment">// 取邀请码的长度为 6 位</span></span><br><span class="line"><span class="keyword">int</span>[] inviteIndex = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">6</span>];</span><br><span class="line"><span class="comment">// 获取 ID 的 32 进制数组，</span></span><br><span class="line">inviteIndex[<span class="number">0</span>] = id;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">6</span>-<span class="number">1</span>; i++)&#123;</span><br><span class="line">    inviteIndex[i+<span class="number">1</span>] = inviteIndex[i]/<span class="number">32</span>;</span><br><span class="line">    inviteIndex[i] = inviteIndex[i] % <span class="number">32</span>;</span><br><span class="line">&#125;</span><br><span class="line">inviteIndex[<span class="number">5</span>] = inviteIndex[<span class="number">5</span>] % <span class="number">32</span>;</span><br><span class="line"><span class="comment">// 根据数组获取 code</span></span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;<span class="number">6</span>; i++)&#123;</span><br><span class="line">    sb.append(baseCode.charAt(inviteIndex[i]%<span class="number">32</span>));</span><br><span class="line">&#125;</span><br><span class="line">code = sb.toString();</span><br></pre></td></tr></table></figure>
</li>
<li><p>最终得到的结果会是 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BAAAAA</span><br><span class="line">CAAAAA</span><br><span class="line">DAAAAA</span><br><span class="line">EAAAAA</span><br><span class="line">FAAAAA</span><br><span class="line">GAAAAA</span><br><span class="line">HAAAAA</span><br><span class="line">JAAAAA</span><br><span class="line">KAAAAA</span><br><span class="line">LAAAAA</span><br></pre></td></tr></table></figure>
</li>
<li><p>问题<br>虽然结果满足了需求，但是生成的邀请码是连续的，后几位基本不变。这会导致当用户输错后，后台无法检测到。</p>
</li>
<li><p>对 CODE 进行混淆<br>为了解决上面这个问题，我这对 ID 进行了放大，并对最终结果的每一位都进行相加处理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对 ID 放大</span></span><br><span class="line">id = id * <span class="number">3</span> + <span class="number">47</span>;</span><br><span class="line"><span class="comment">// 对结果进行处理</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;<span class="number">6</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;i;j++)&#123;</span><br><span class="line">        inviteIndex[i] = inviteIndex[i]+inviteIndex[j];</span><br><span class="line">    &#125;</span><br><span class="line">    inviteIndex[i] = inviteIndex[i] % <span class="number">32</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>同样得到的结果为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UVFLWJ</span><br><span class="line">XYMYN2</span><br><span class="line">23TCEJ</span><br><span class="line">56ZQ62</span><br><span class="line">8974WJ</span><br><span class="line">BDEJSA</span><br><span class="line">EGLWJS</span><br><span class="line">HKSAAA</span><br><span class="line">LNYN2S</span><br><span class="line">PR62SA</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="完整编码、解码代码"><a href="#完整编码、解码代码" class="headerlink" title="完整编码、解码代码"></a>完整编码、解码代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//编码</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">encode</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">    id = id * <span class="number">3</span> + <span class="number">47</span>;</span><br><span class="line">    <span class="comment">// 一个由大写字母和数字组成的编码串</span></span><br><span class="line">    String baseCode = <span class="string">"ABCDEFGHJKLMNPQRSTUVWXYZ23456789"</span>;</span><br><span class="line">    <span class="comment">// 取邀请码的长度为 6 位</span></span><br><span class="line">    <span class="keyword">int</span>[] inviteIndex = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">6</span>];</span><br><span class="line">    <span class="comment">// 获取 ID 的 32 进制数组，</span></span><br><span class="line">    inviteIndex[<span class="number">0</span>] = id;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">6</span>-<span class="number">1</span>; i++)&#123;</span><br><span class="line">        inviteIndex[i+<span class="number">1</span>] = inviteIndex[i]/<span class="number">32</span>;</span><br><span class="line">        inviteIndex[i] = inviteIndex[i] % <span class="number">32</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    inviteIndex[<span class="number">5</span>] = inviteIndex[<span class="number">5</span>] % <span class="number">32</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;<span class="number">6</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;i;j++)&#123;</span><br><span class="line">            inviteIndex[i] = inviteIndex[i]+inviteIndex[j];</span><br><span class="line">        &#125;</span><br><span class="line">        inviteIndex[i] = inviteIndex[i] % <span class="number">32</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 根据数组获取 code</span></span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;<span class="number">6</span>; i++)&#123;</span><br><span class="line">        sb.append(baseCode.charAt(inviteIndex[i]%<span class="number">32</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    String code = sb.toString();</span><br><span class="line">    <span class="keyword">return</span> code;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//解码</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">decode</span><span class="params">(String code)</span></span>&#123;</span><br><span class="line">    String baseCode = <span class="string">"ABCDEFGHJKLMNPQRSTUVWXYZ23456789"</span>;</span><br><span class="line">    code = code.toUpperCase();</span><br><span class="line">    <span class="keyword">int</span>[] b = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">6</span>];</span><br><span class="line">    <span class="keyword">int</span>[] baseValue = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">6</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; code.length(); i++) &#123;</span><br><span class="line">        b[i] = baseCode.indexOf(code.charAt(i));</span><br><span class="line">        baseValue[i] = b[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> res = baseValue[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; code.length() - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i + <span class="number">1</span>; j++) &#123;</span><br><span class="line">            baseValue[i + <span class="number">1</span>] = baseValue[i + <span class="number">1</span>] - b[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (baseValue[i + <span class="number">1</span>] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            baseValue[i + <span class="number">1</span>] += <span class="number">32</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        baseValue[i + <span class="number">1</span>] = baseValue[i + <span class="number">1</span>] % <span class="number">32</span>;</span><br><span class="line">        res = res + baseValue[i + <span class="number">1</span>] * (<span class="keyword">int</span>) Math.pow(<span class="number">32</span>, i + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (res - <span class="number">47</span>) / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>大后台</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>功能需求</tag>
      </tags>
  </entry>
</search>
